/*
 * This file is generated by Entity Class Compiler, (c) CroTeam 1997-98
 */

#line 2 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"

#include "StdH.h"

#include <EntitiesMP/EnemyDive.h>
#include <EntitiesMP/EnemyDive_tables.h>
void CEnemyDive::SetDefaultProperties(void) {
  m_EedtType = EDT_DIVE_ONLY ;
  m_bInLiquid = TRUE ;
  m_fDiveWalkSpeed = 1.0f;
  m_aDiveWalkRotateSpeed = AngleDeg(10.0f);
  m_fDiveAttackRunSpeed = 1.0f;
  m_aDiveAttackRotateSpeed = AngleDeg(10.0f);
  m_fDiveCloseRunSpeed = 1.0f;
  m_aDiveCloseRotateSpeed = AngleDeg(10.0f);
  m_fDiveAttackDistance = 50.0f;
  m_fDiveCloseDistance = 10.0f;
  m_fDiveAttackFireTime = 2.0f;
  m_fDiveCloseFireTime = 1.0f;
  m_fDiveStopDistance = 0.0f;
  m_fDiveIgnoreRange = 200.0f;
  m_fDiveLockOnEnemyTime = 0.0f;
  CEnemyBase::SetDefaultProperties();
}
  FLOAT & CEnemyDive::GetProp(FLOAT & m_fBase) 
#line 48 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
{
#line 49 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
if(m_bInLiquid ){
#line 50 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
return * ((& m_fBase ) + (& m_fDiveWalkSpeed  - & m_fWalkSpeed ));
#line 51 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
}else {
#line 52 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
return m_fBase ;
#line 53 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
}
#line 54 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
}
  
#line 57 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
void CEnemyDive::StartPathFinding(void) 
#line 58 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
{
#line 59 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
m_dtDestination  = DT_PLAYERSPOTTED ;
#line 60 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
m_vPlayerSpotted  = PlayerDestinationPos  ();
#line 61 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
}
  void CEnemyDive::AdjustDifficulty(void) 
#line 64 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
{
#line 65 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
FLOAT fMoveSpeed  = GetSP  () -> sp_fEnemyMovementSpeed ;
#line 66 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
FLOAT fAttackSpeed  = GetSP  () -> sp_fEnemyMovementSpeed ;
#line 69 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
m_fDiveAttackRunSpeed  *= fMoveSpeed ;
#line 70 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
m_aDiveAttackRotateSpeed  *= fMoveSpeed ;
#line 71 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
m_fDiveCloseRunSpeed  *= fMoveSpeed ;
#line 72 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
m_aDiveCloseRotateSpeed  *= fMoveSpeed ;
#line 73 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
m_fDiveAttackFireTime  *= 1 / fAttackSpeed ;
#line 74 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
m_fDiveCloseFireTime  *= 1 / fAttackSpeed ;
#line 75 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
m_fDiveLockOnEnemyTime  *= 1 / fAttackSpeed ;
#line 77 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
CEnemyBase  :: AdjustDifficulty  ();
#line 78 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
}
  BOOL CEnemyDive::CanHitEnemy(CEntity * penTarget,FLOAT fCosAngle) {
#line 81 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
if(IsInPlaneFrustum  (penTarget  , fCosAngle )){
#line 82 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
return IsVisibleCheckAll  (penTarget );
#line 83 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
}
#line 84 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
return FALSE ;
#line 85 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
}
  
#line 89 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
void CEnemyDive::PostMoving(void) {
#line 90 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
CEnemyBase  :: PostMoving  ();
#line 92 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
if(m_EedtType  != EDT_GROUND_ONLY  && ! m_bInLiquid  && en_fImmersionFactor  > 0.9f && 
#line 93 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
(GetWorld  () -> wo_actContentTypes  [ en_iDnContent  ] . ct_ulFlags  & CTF_SWIMABLE )){
#line 94 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
m_bInLiquid  = TRUE ;
#line 95 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
ChangeCollisionToLiquid  ();
#line 96 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
SendEvent  (ERestartAttack  ());
#line 97 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
}
#line 99 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
if(m_EedtType  != EDT_DIVE_ONLY  && m_bInLiquid  && (en_fImmersionFactor  < 0.5f || en_fImmersionFactor  == 1.0f) && 
#line 100 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
en_penReference  != NULL  && ! (GetWorld  () -> wo_actContentTypes  [ en_iUpContent  ] . ct_ulFlags  & CTF_SWIMABLE )){
#line 101 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
m_bInLiquid  = FALSE ;
#line 102 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
ChangeCollisionToGround  ();
#line 103 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
SendEvent  (ERestartAttack  ());
#line 104 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
}
#line 105 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
}
  ULONG CEnemyDive::SetDesiredMovement(void) 
#line 115 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
{
#line 117 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
if(! m_bInLiquid ){
#line 119 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
return CEnemyBase  :: SetDesiredMovement  ();
#line 120 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
}
#line 123 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
ULONG  ulFlags  = CEnemyBase  :: SetDesiredMovement  ();
#line 126 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
if(m_fMoveSpeed  > 0.0f){
#line 128 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
FLOAT3D vTranslation  = (m_vDesiredPosition  - GetPlacement  () . pl_PositionVector ) * ! en_mRotation ;
#line 129 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
vTranslation  (1) = 0.0f;
#line 130 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
if(vTranslation  (3) > 0){
#line 131 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
vTranslation  (3) = 0.0f;
#line 132 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
}
#line 133 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
vTranslation  . Normalize  ();
#line 134 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
vTranslation  *= m_fMoveSpeed ;
#line 135 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
SetDesiredTranslation  (vTranslation );
#line 136 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
}
#line 138 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
return ulFlags ;
#line 139 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
}
  
#line 142 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
BOOL CEnemyDive::MayMoveToAttack(void) 
#line 143 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
{
#line 144 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
return WouldNotLeaveAttackRadius  ();
#line 145 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
}
  
#line 151 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
void CEnemyDive::SetEntityPosition() {
#line 152 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
switch(m_EedtType ){
#line 153 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
case EDT_GROUND_ONLY : 
#line 154 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
m_bInLiquid  = FALSE ;
#line 155 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
break ;
#line 156 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
case EDT_DIVE_ONLY : 
#line 157 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
m_bInLiquid  = TRUE ;
#line 158 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
break ;
#line 159 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
case EDT_GROUND_DIVE : 
#line 160 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
break ;
#line 161 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
}
#line 164 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
if(m_bInLiquid ){
#line 165 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
ChangeCollisionToLiquid  ();
#line 166 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
}else {
#line 167 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
ChangeCollisionToGround  ();
#line 168 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
}
#line 170 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
StandingAnim  ();
#line 171 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
}
  void CEnemyDive::ChangeCollisionToLiquid(void) {}
  void CEnemyDive::ChangeCollisionToGround(void) {}
BOOL CEnemyDive::
#line 190 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
Hit(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CEnemyDive_Hit
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CEnemyDive::Hit expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 192 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
if(m_bInLiquid ){
#line 193 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
Jump(STATE_CURRENT, STATE_CEnemyDive_DiveHit, TRUE, EVoid());return TRUE;
#line 194 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
}else {
#line 195 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
Jump(STATE_CURRENT, STATE_CEnemyDive_GroundHit, TRUE, EVoid());return TRUE;
#line 196 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
} ASSERT(FALSE); return TRUE;};BOOL CEnemyDive::
#line 200 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
Fire(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CEnemyDive_Fire
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CEnemyDive::Fire expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 202 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
if(m_bInLiquid ){
#line 203 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
Jump(STATE_CURRENT, STATE_CEnemyDive_DiveFire, TRUE, EVoid());return TRUE;
#line 204 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
}else {
#line 205 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
Jump(STATE_CURRENT, STATE_CEnemyDive_GroundFire, TRUE, EVoid());return TRUE;
#line 206 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
} ASSERT(FALSE); return TRUE;};BOOL CEnemyDive::
#line 213 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
MainLoop(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CEnemyDive_MainLoop
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CEnemyDive::MainLoop expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 214 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
SetEntityPosition  ();
#line 215 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
Jump(STATE_CURRENT, STATE_CEnemyBase_MainLoop, FALSE, EVoid());return TRUE; ASSERT(FALSE); return TRUE;};BOOL CEnemyDive::
#line 219 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
Main(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CEnemyDive_Main
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CEnemyDive::Main expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 220 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
Return(STATE_CURRENT,EVoid());
#line 220 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CEnemyDive::
#line 229 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
GroundHit(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CEnemyDive_GroundHit
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CEnemyDive::GroundHit expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 231 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
Return(STATE_CURRENT,EReturn  ());
#line 231 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CEnemyDive::
#line 234 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
GroundFire(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CEnemyDive_GroundFire
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CEnemyDive::GroundFire expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 236 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
Return(STATE_CURRENT,EReturn  ());
#line 236 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CEnemyDive::
#line 240 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
DiveHit(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CEnemyDive_DiveHit
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CEnemyDive::DiveHit expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 242 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
Return(STATE_CURRENT,EReturn  ());
#line 242 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CEnemyDive::
#line 246 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
DiveFire(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CEnemyDive_DiveFire
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CEnemyDive::DiveFire expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 248 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
Return(STATE_CURRENT,EReturn  ());
#line 248 "V:/Programs/SamSDK/Sources/EntitiesMP/EnemyDive.es"
return TRUE; ASSERT(FALSE); return TRUE;};