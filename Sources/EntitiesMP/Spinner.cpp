/*
 * This file is generated by Entity Class Compiler, (c) CroTeam 1997-98
 */

#line 2 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"

#include "StdH.h"

#include <EntitiesMP/Spinner.h>
#include <EntitiesMP/Spinner_tables.h>
CEntityEvent *ESpinnerInit::MakeCopy(void) { CEntityEvent *peeCopy = new ESpinnerInit(*this); return peeCopy;}
ESpinnerInit::ESpinnerInit() : CEntityEvent(EVENTCODE_ESpinnerInit) {;
 ClearToDefault(penParent);
 ClearToDefault(penTwister);
 ClearToDefault(vRotationAngle);
 ClearToDefault(tmSpinTime);
 ClearToDefault(fUpSpeed);
 ClearToDefault(bImpulse);
 ClearToDefault(tmImpulseDuration);
};
void CSpinner::SetDefaultProperties(void) {
  m_penParent = NULL;
  m_aSpinRotation = FLOAT3D(0.0f , 0.0f , 0.0f);
  m_vSpeed = FLOAT3D(0.0f , 0.0f , 0.0f);
  m_tmExpire = 0.0f;
  m_vLastSpeed = FLOAT3D(0.0f , 0.0f , 0.0f);
  m_bImpulse = FALSE ;
  m_tmWaitAfterImpulse = 0.0f;
  m_tmSpawn = 0.0f;
  m_vSpinSpeed = FLOAT3D(0.0f , 0.0f , 0.0f);
  CRationalEntity::SetDefaultProperties();
}
BOOL CSpinner::
#line 39 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
Main(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CSpinner_Main
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_ESpinnerInit, "CSpinner::Main expects 'ESpinnerInit' as input!");  const ESpinnerInit &esi = (const ESpinnerInit &)__eeInput;
#line 42 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
if((! (esi  . penParent  -> GetPhysicsFlags  () & EPF_MOVABLE )) || 
#line 43 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
(esi  . penParent  == NULL ) || (esi  . penParent  == NULL ))
#line 44 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
{
#line 45 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
Destroy  ();
#line 46 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
Return(STATE_CURRENT,EVoid());
#line 46 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
return TRUE;
#line 47 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
}
#line 48 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
ASSERT  (esi  . penParent  != NULL );
#line 49 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
ASSERT  (esi  . penTwister  != NULL );
#line 52 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
CTwister  & penTwister  = (CTwister  &) * esi  . penTwister ;
#line 53 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
CMovableEntity  & penParent  = (CMovableEntity  &) * esi  . penParent ;
#line 54 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
m_penParent  = esi  . penParent ;
#line 55 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
m_aSpinRotation  = esi  . vRotationAngle ;
#line 56 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
m_bImpulse  = esi  . bImpulse ;
#line 57 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
if(m_bImpulse ){
#line 58 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
m_tmWaitAfterImpulse  = esi  . tmSpinTime  - esi  . tmImpulseDuration ;
#line 59 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
if(m_tmWaitAfterImpulse  <= 0.0f){m_tmWaitAfterImpulse  = 0.01f;}
#line 60 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
}
#line 62 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
m_vSpinSpeed  = ((CMovableEntity  &) * m_penParent ) . en_vCurrentTranslationAbsolute ;
#line 63 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
m_vSpinSpeed  = FLOAT3D (0.0f , 0.0f , m_vSpinSpeed  . Length  ());
#line 66 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
InitAsVoid  ();
#line 67 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
SetPhysicsFlags  (EPF_MODEL_IMMATERIAL );
#line 68 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
SetCollisionFlags  (ECF_IMMATERIAL );
#line 70 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
if(! m_bImpulse ){
#line 71 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
m_tmExpire  = _pTimer  -> CurrentTick  () + esi  . tmSpinTime ;
#line 72 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
}else {
#line 73 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
m_tmExpire  = _pTimer  -> CurrentTick  () + esi  . tmImpulseDuration ;
#line 74 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
}
#line 75 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
m_tmSpawn  = _pTimer  -> CurrentTick  ();
#line 78 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
m_vSpeed  = FLOAT3D (penTwister  . en_mRotation  (1 , 2) , penTwister  . en_mRotation  (2 , 2) , penTwister  . en_mRotation  (3 , 2)) * esi  . fUpSpeed ;
#line 81 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
ANGLE3D aRnd ;
#line 82 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
FLOATmatrix3D m ;
#line 83 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
aRnd  (1) = FRnd  () * 360.0f;aRnd  (2) = FRnd  () * 30.0f;aRnd  (3) = 0.0f;
#line 84 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
MakeRotationMatrixFast  (m  , aRnd );
#line 85 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
m_vSpeed  = m_vSpeed  * m ;
#line 88 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
Jump(STATE_CURRENT,0x015c0003, FALSE, EInternal());return TRUE;}BOOL CSpinner::H0x015c0003_Main_03(const CEntityEvent &__eeInput)
#line 89 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
{
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x015c0003
if(!(_pTimer  -> CurrentTick  () < m_tmExpire )){ Jump(STATE_CURRENT,0x015c0004, FALSE, EInternal());return TRUE;}
#line 91 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
if(m_penParent  -> GetFlags  () & ENF_DELETED ){
#line 92 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
Destroy  ();
#line 93 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
Return(STATE_CURRENT,EVoid());
#line 93 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
return TRUE;
#line 94 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
}
#line 96 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
if(((CMovableEntity  &) * m_penParent ) . en_vCurrentTranslationAbsolute  != m_vLastSpeed  || 
#line 97 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
((CMovableEntity  &) * m_penParent ) . en_vCurrentTranslationAbsolute  == FLOAT3D (0.0f , 0.0f , 0.0f)){
#line 99 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
((CMovableEntity  &) * m_penParent ) . en_vCurrentTranslationAbsolute  += m_vSpeed ;
#line 100 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
m_vLastSpeed  = ((CMovableEntity  &) * m_penParent ) . en_vCurrentTranslationAbsolute ;
#line 101 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
}else {
#line 103 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
((CMovableEntity  &) * m_penParent ) . SetDesiredTranslation  (m_vSpinSpeed );
#line 104 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
}
#line 107 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
if(! m_bImpulse ){
#line 108 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
((CMovableEntity  &) * m_penParent ) . en_aDesiredRotationRelative  = m_aSpinRotation ;
#line 109 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
}
#line 110 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
SetTimerAfter(_pTimer  -> TickQuantum );
Jump(STATE_CURRENT, 0x015c0001, FALSE, EBegin());return TRUE;}BOOL CSpinner::H0x015c0001_Main_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x015c0001
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x015c0002, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CSpinner::H0x015c0002_Main_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x015c0002
;Jump(STATE_CURRENT,0x015c0003, FALSE, EInternal());return TRUE;
#line 111 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
}BOOL CSpinner::H0x015c0004_Main_04(const CEntityEvent &__eeInput) {
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x015c0004

#line 113 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
((CMovableEntity  &) * m_penParent ) . en_aDesiredRotationRelative  = ANGLE3D (0.0f , 0.0f , 0.0f);
#line 116 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
if(!(m_bImpulse )){ Jump(STATE_CURRENT,0x015c0007, FALSE, EInternal());return TRUE;}
#line 117 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
((CMovableEntity  &) * m_penParent ) . SetDesiredTranslation  (FLOAT3D (0.0f , 0.0f , 0.0f));
#line 118 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
SetTimerAfter(m_tmWaitAfterImpulse );
Jump(STATE_CURRENT, 0x015c0005, FALSE, EBegin());return TRUE;}BOOL CSpinner::H0x015c0005_Main_05(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x015c0005
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x015c0006, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CSpinner::H0x015c0006_Main_06(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x015c0006
;Jump(STATE_CURRENT,0x015c0007, FALSE, EInternal());return TRUE;}BOOL CSpinner::H0x015c0007_Main_07(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x015c0007

#line 122 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
Destroy  ();
#line 124 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
Return(STATE_CURRENT,EVoid());
#line 124 "V:/Programs/SamSDK/Sources/EntitiesMP/Spinner.es"
return TRUE; ASSERT(FALSE); return TRUE;};