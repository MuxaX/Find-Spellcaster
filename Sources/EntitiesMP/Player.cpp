/*
 * This file is generated by Entity Class Compiler, (c) CroTeam 1997-98
 */

#line 2 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"


#include "StdH.h"
#include "GameMP/SEColors.h"

#include <Engine/Build.h>
#include <Engine/Network/Network.h>
#include <locale.h>

#include "ModelsMP/Player/SeriousSam/Player.h"
#include "ModelsMP/Player/SeriousSam/Body.h"
#include "ModelsMP/Player/SeriousSam/Head.h"

#include "EntitiesMP/PlayerMarker.h"
#include "EntitiesMP/PlayerWeapons.h"
#include "EntitiesMP/PlayerAnimator.h"
#include "EntitiesMP/PlayerView.h"
#include "EntitiesMP/MovingBrush.h"
#include "EntitiesMP/Switch.h"
#include "EntitiesMP/MessageHolder.h"
#include "EntitiesMP/Camera.h"
#include "EntitiesMP/WorldLink.h"
#include "EntitiesMP/HealthItem.h"
#include "EntitiesMP/ArmorItem.h"
#include "EntitiesMP/WeaponItem.h"
#include "EntitiesMP/AmmoItem.h"
#include "EntitiesMP/PowerUpItem.h"
#include "EntitiesMP/MessageItem.h"
#include "EntitiesMP/AmmoPack.h"
#include "EntitiesMP/KeyItem.h"
#include "EntitiesMP/MusicHolder.h"
#include "EntitiesMP/EnemyBase.h"
#include "EntitiesMP/PlayerActionMarker.h"
#include "EntitiesMP/BasicEffects.h"
#include "EntitiesMP/BackgroundViewer.h"
#include "EntitiesMP/WorldSettingsController.h"
#include "EntitiesMP/ScrollHolder.h"
#include "EntitiesMP/TextFXHolder.h"
#include "EntitiesMP/SeriousBomb.h"
#include "EntitiesMP/CreditsHolder.h"
#include "EntitiesMP/HudPicHolder.h"

extern void JumpFromBouncer(CEntity *penToBounce, CEntity *penBouncer);
// from game
#define GRV_SHOWEXTRAS  (1L<<0)   // add extra stuff like console, weapon, pause

#define GENDER_MALE     0
#define GENDER_FEMALE   1
#define GENDEROFFSET    100   // sound components for genders are offset by this value


#include <EntitiesMP/Player.h>
#include <EntitiesMP/Player_tables.h>
CEntityEvent *ECameraStart::MakeCopy(void) { CEntityEvent *peeCopy = new ECameraStart(*this); return peeCopy;}
ECameraStart::ECameraStart() : CEntityEvent(EVENTCODE_ECameraStart) {;
 ClearToDefault(penCamera);
};
CEntityEvent *ECameraStop::MakeCopy(void) { CEntityEvent *peeCopy = new ECameraStop(*this); return peeCopy;}
ECameraStop::ECameraStop() : CEntityEvent(EVENTCODE_ECameraStop) {;
 ClearToDefault(penCamera);
};
CEntityEvent *ERebirth::MakeCopy(void) { CEntityEvent *peeCopy = new ERebirth(*this); return peeCopy;}
ERebirth::ERebirth() : CEntityEvent(EVENTCODE_ERebirth) {;
};
CEntityEvent *EDisconnected::MakeCopy(void) { CEntityEvent *peeCopy = new EDisconnected(*this); return peeCopy;}
EDisconnected::EDisconnected() : CEntityEvent(EVENTCODE_EDisconnected) {;
};
CEntityEvent *EAutoAction::MakeCopy(void) { CEntityEvent *peeCopy = new EAutoAction(*this); return peeCopy;}
EAutoAction::EAutoAction() : CEntityEvent(EVENTCODE_EAutoAction) {;
 ClearToDefault(penFirstMarker);
};
#line 93 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"

extern void DrawHUD( const CPlayer *penPlayerCurrent, CDrawPort *pdpCurrent, BOOL bSnooping, const CPlayer *penPlayerOwner);
extern void InitHUD(void);
extern void EndHUD(void);

static CTimerValue _tvProbingLast;

// used to render certain entities only for certain players (like picked items, etc.)
extern ULONG _ulPlayerRenderingMask = 0;

// temporary BOOL used to discard calculating of 3rd view when calculating absolute view placement
BOOL _bDiscard3rdView=FALSE;

#define NAME name

const FLOAT _fBlowUpAmmount = 70.0f;

// computer message adding flags
#define CMF_READ       (1L<<0)
#define CMF_ANALYZE    (1L<<1)

struct MarkerDistance {
public:
  FLOAT md_fMinD;
  CPlayerMarker *md_ppm;
  void Clear(void);
};

// export current player projection
CAnyProjection3D prPlayerProjection;


int qsort_CompareMarkerDistance(const void *pv0, const void *pv1)
{
  MarkerDistance &md0 = *(MarkerDistance*)pv0;
  MarkerDistance &md1 = *(MarkerDistance*)pv1;
  if(      md0.md_fMinD<md1.md_fMinD) return +1;
  else if( md0.md_fMinD>md1.md_fMinD) return -1;
  else                                return  0;
}

static inline FLOAT IntensityAtDistance( FLOAT fFallOff, FLOAT fHotSpot, FLOAT fDistance)
{
  // intensity is zero if further than fall-off range
  if( fDistance>fFallOff) return 0.0f;
  // intensity is maximum if closer than hot-spot range
  if( fDistance<fHotSpot) return 1.0f;
  // interpolate if between fall-off and hot-spot range
  return (fFallOff-fDistance)/(fFallOff-fHotSpot);
}

static CTString MakeEmptyString(INDEX ctLen, char ch=' ')
{
  char ach[2];
  ach[0] = ch;
  ach[1] = 0;
  CTString strSpaces;
  for (INDEX i=0; i<ctLen; i++) {
    strSpaces+=ach;
  }
  return strSpaces;
}

// take a two line string and align into one line of minimum given length
static _ctAlignWidth = 20;
static CTString AlignString(const CTString &strOrg)
{
  // split into two lines
  CTString strL = strOrg;
  strL.OnlyFirstLine();
  CTString strR = strOrg;
  strR.RemovePrefix(strL);
  strR.DeleteChar(0);

  // get their lengths
  INDEX iLenL = strL.LengthNaked();
  INDEX iLenR = strR.LengthNaked();

  // find number of spaces to insert
  INDEX ctSpaces = _ctAlignWidth-(iLenL+iLenR);
  if (ctSpaces<1) {
    ctSpaces=1;
  }

  // make aligned string
  return strL+MakeEmptyString(ctSpaces)+strR;
}

static CTString CenterString(const CTString &str)
{
  INDEX ctSpaces = (_ctAlignWidth-str.LengthNaked())/2;
  if (ctSpaces<0) {
    ctSpaces=0;
  }
  return MakeEmptyString(ctSpaces)+str;
}

static CTString PadStringRight(const CTString &str, INDEX iLen)
{
  INDEX ctSpaces = iLen-str.LengthNaked();
  if (ctSpaces<0) {
    ctSpaces=0;
  }
  return str+MakeEmptyString(ctSpaces);
}

static CTString PadStringLeft(const CTString &str, INDEX iLen)
{
  INDEX ctSpaces = iLen-str.LengthNaked();
  if (ctSpaces<0) {
    ctSpaces=0;
  }
  return MakeEmptyString(ctSpaces)+str;
}

static void KillAllEnemies(CEntity *penKiller)
{
  // for each entity in the world
  {FOREACHINDYNAMICCONTAINER(penKiller->GetWorld()->wo_cenEntities, CEntity, iten) {
    CEntity *pen = iten;
    if (IsDerivedFromClass(pen, "Enemy Base") && !IsOfClass(pen, "Devil")) {
      CEnemyBase *penEnemy = (CEnemyBase *)pen;
      if (penEnemy->m_penEnemy==NULL) {
        continue;
      }
      penKiller->InflictDirectDamage(pen, penKiller, DMT_BULLET,
        penEnemy->GetHealth()+1, pen->GetPlacement().pl_PositionVector, FLOAT3D(0,1,0));
    }
  }}
}


#define HEADING_MAX      45.0f
#define PITCH_MAX        90.0f
#define BANKING_MAX      45.0f

// player flags
#define PLF_INITIALIZED           (1UL<<0)   // set when player entity is ready to function
#define PLF_VIEWROTATIONCHANGED   (1UL<<1)   // for adjusting view rotation separately from legs
#define PLF_JUMPALLOWED           (1UL<<2)   // if jumping is allowed
#define PLF_SYNCWEAPON            (1UL<<3)   // weapon model needs to be synchronized before rendering
#define PLF_AUTOMOVEMENTS         (1UL<<4)   // complete automatic control of movements
#define PLF_DONTRENDER            (1UL<<5)   // don't render view (used at end of level)
#define PLF_CHANGINGLEVEL         (1UL<<6)   // mark that we next are to appear at start of new level
#define PLF_APPLIEDACTION         (1UL<<7)   // used to detect when player is not connected
#define PLF_NOTCONNECTED          (1UL<<8)   // set if the player is not connected
#define PLF_LEVELSTARTED          (1UL<<9)   // marks that level start time was recorded
#define PLF_ISZOOMING             (1UL<<10)  // marks that player is zoomed in with the sniper
#define PLF_RESPAWNINPLACE        (1UL<<11)  // don't move to marker when respawning (for current death only)

// defines representing flags used to fill player buttoned actions
#define PLACT_FIRE                (1L<<0)
#define PLACT_RELOAD              (1L<<1)
#define PLACT_WEAPON_NEXT         (1L<<2)
#define PLACT_WEAPON_PREV         (1L<<3)
#define PLACT_WEAPON_FLIP         (1L<<4)
#define PLACT_USE                 (1L<<5)
#define PLACT_COMPUTER            (1L<<6)
#define PLACT_3RD_PERSON_VIEW     (1L<<7)
#define PLACT_CENTER_VIEW         (1L<<8)
#define PLACT_USE_HELD            (1L<<9)
#define PLACT_SNIPER_ZOOMIN       (1L<<10)
#define PLACT_SNIPER_ZOOMOUT      (1L<<11)
#define PLACT_SNIPER_USE          (1L<<12)
#define PLACT_FIREBOMB            (1L<<13)
#define PLACT_ALTFIRE             (1L<<14)
#define PLACT_SELECT_WEAPON_SHIFT (15)
#define PLACT_SELECT_WEAPON_MASK  (0x1FL<<PLACT_SELECT_WEAPON_SHIFT)

#define MAX_WEAPONS 30

#define PICKEDREPORT_TIME   (2.0f)  // how long (picked-up) message stays on screen

// is player spying another player
//extern TIME _tmSnoopingStarted;
//extern CEntity *_penTargeting;


struct PlayerControls {
  FLOAT3D aRotation;
  FLOAT3D aViewRotation;
  FLOAT3D vTranslation;

  BOOL bMoveForward;
  BOOL bMoveBackward;
  BOOL bMoveLeft;
  BOOL bMoveRight;
  BOOL bMoveUp;
  BOOL bMoveDown;

  BOOL bTurnLeft;
  BOOL bTurnRight;
  BOOL bTurnUp;
  BOOL bTurnDown;
  BOOL bTurnBankingLeft;
  BOOL bTurnBankingRight;
  BOOL bCenterView;

  BOOL bLookLeft;
  BOOL bLookRight;
  BOOL bLookUp;
  BOOL bLookDown;
  BOOL bLookBankingLeft;
  BOOL bLookBankingRight;

  BOOL bSelectWeapon[MAX_WEAPONS+1];
  BOOL bWeaponNext;
  BOOL bWeaponPrev;
  BOOL bWeaponFlip;

  BOOL bWalk;
  BOOL bStrafe;
  BOOL bFire;
  BOOL bAltFire;
  BOOL bReload;
  BOOL bUse;
  BOOL bComputer;
  BOOL bUseOrComputer;
  BOOL bUseOrComputerLast;  // for internal use
  BOOL b3rdPersonView;

  BOOL bSniperZoomIn;
  BOOL bSniperZoomOut;
  BOOL bFireBomb;
};

static struct PlayerControls pctlCurrent;

//MuxaX texture objects
static CTextureObject _toBloodScreen1;
static CTextureObject _toBloodScreen2;
static CTextureObject _toBloodScreen3;
static CTextureObject _toSwitchArm;
static CTextureObject _toUltraDamage;
static CTextureObject _toInvulnerabilityB;
static CTextureObject _toPowerUpAll;

// cheats
static INDEX cht_iGoToMarker = -1;
static INDEX cht_bKillAll    = FALSE;
static INDEX cht_bGiveAll    = FALSE;
static INDEX cht_bOpen       = FALSE;
static INDEX cht_bAllMessages= FALSE;
static INDEX cht_bRefresh    = FALSE;
extern INDEX cht_bGod        = FALSE;
extern INDEX cht_bFly        = FALSE;
extern INDEX cht_bGhost      = FALSE;
extern INDEX cht_bInvisible  = FALSE;
extern FLOAT cht_fTranslationMultiplier = 1.0f;
extern INDEX cht_bEnable     = 0;

// interface control
static INDEX hud_bShowAll	    = TRUE; // used internaly in menu/console
extern INDEX hud_bShowWeapon  = TRUE;
extern INDEX hud_bShowMessages = TRUE;
extern INDEX hud_bShowInfo    = TRUE;
extern INDEX hud_bShowLatency = FALSE;
extern INDEX hud_iShowPlayers = -1;   // auto
extern INDEX hud_iSortPlayers = -1;   // auto
extern FLOAT hud_fOpacity     = 0.9f;
extern FLOAT hud_fScaling     = 1.0f;
extern FLOAT hud_tmWeaponsOnScreen = 3.0f;
extern FLOAT hud_tmLatencySnapshot = 1.0f;
extern INDEX hud_bShowMatchInfo = TRUE;

extern FLOAT plr_fBreathingStrength = 0.0f;
extern FLOAT plr_tmSnoopingTime;
extern INDEX cht_bKillFinalBoss = FALSE;
INDEX cht_bDebugFinalBoss = FALSE;
INDEX cht_bDumpFinalBossData = FALSE;
INDEX cht_bDebugFinalBossAnimations = FALSE;
INDEX cht_bDumpPlayerShading = FALSE;

extern FLOAT wpn_fRecoilSpeed[17]   = {0};
extern FLOAT wpn_fRecoilLimit[17]   = {0};
extern FLOAT wpn_fRecoilDampUp[17]  = {0};
extern FLOAT wpn_fRecoilDampDn[17]  = {0};
extern FLOAT wpn_fRecoilOffset[17]  = {0};
extern FLOAT wpn_fRecoilFactorP[17] = {0};
extern FLOAT wpn_fRecoilFactorZ[17] = {0};

// misc
static FLOAT plr_fAcceleration  = 100.0f;
static FLOAT plr_fDeceleration  = 60.0f;
static FLOAT plr_fSpeedForward  = 10.0f;
static FLOAT plr_fSpeedBackward = 10.0f;
static FLOAT plr_fSpeedSide     = 10.0f;
static FLOAT plr_fSpeedUp       = 11.0f;
static FLOAT plr_fViewHeightStand  = 1.9f;
static FLOAT plr_fViewHeightCrouch = 0.7f;
static FLOAT plr_fViewHeightSwim   = 0.4f;
static FLOAT plr_fViewHeightDive   = 0.0f;
extern FLOAT plr_fViewDampFactor        = 0.4f;
extern FLOAT plr_fViewDampLimitGroundUp = 0.1f;
extern FLOAT plr_fViewDampLimitGroundDn = 0.4f;
extern FLOAT plr_fViewDampLimitWater    = 0.1f;
static FLOAT plr_fFrontClipDistance = 0.25f;
static FLOAT plr_fFOV = 90.0f;
static FLOAT net_tmLatencyAvg;
extern INDEX plr_bRenderPicked = FALSE;
extern INDEX plr_bRenderPickedParticles = FALSE;
extern INDEX plr_bOnlySam = FALSE;
extern INDEX ent_bReportBrokenChains = FALSE;
extern FLOAT ent_tmMentalIn   = 0.5f;
extern FLOAT ent_tmMentalOut  = 0.75f;
extern FLOAT ent_tmMentalFade = 0.5f;

extern FLOAT gfx_fEnvParticlesDensity = 1.0f;
extern FLOAT gfx_fEnvParticlesRange = 1.0f;

// prediction control vars
extern FLOAT cli_fPredictPlayersRange = 0.0f;
extern FLOAT cli_fPredictItemsRange = 3.0f;
extern FLOAT cli_tmPredictFoe = 10.0f;
extern FLOAT cli_tmPredictAlly = 10.0f;
extern FLOAT cli_tmPredictEnemy  = 10.0f;

static FLOAT plr_fSwimSoundDelay = 0.8f;
static FLOAT plr_fDiveSoundDelay = 1.6f;
static FLOAT plr_fWalkSoundDelay = 0.5f;
static FLOAT plr_fRunSoundDelay  = 0.3f;

static FLOAT ctl_tmComputerDoubleClick = 0.5f; // double click delay for calling computer
static FLOAT _tmLastUseOrCompPressed = -10.0f;  // for computer doubleclick

// speeds for button rotation
static FLOAT ctl_fButtonRotationSpeedH = 300.0f;
static FLOAT ctl_fButtonRotationSpeedP = 150.0f;
static FLOAT ctl_fButtonRotationSpeedB = 150.0f;
// modifier for axis strafing
static FLOAT ctl_fAxisStrafingModifier = 1.0f;

// !=NULL if some player wants to call computer
DECL_DLL extern class CPlayer *cmp_ppenPlayer = NULL;
// !=NULL for rendering computer on secondary display in dualhead
DECL_DLL extern class CPlayer *cmp_ppenDHPlayer = NULL;
// set to update current message in background mode (for dualhead)
DECL_DLL extern BOOL cmp_bUpdateInBackground = FALSE;
// set for initial calling computer without rendering game
DECL_DLL extern BOOL cmp_bInitialStart = FALSE;

// game sets this for player hud and statistics and hiscore sound playing
DECL_DLL extern INDEX plr_iHiScore = 0.0f;

// these define address and size of player controls structure
DECL_DLL extern void *ctl_pvPlayerControls = &pctlCurrent;
DECL_DLL extern const SLONG ctl_slPlayerControlsSize = sizeof(pctlCurrent);

// called to compose action packet from current controls
DECL_DLL void ctl_ComposeActionPacket(const CPlayerCharacter &pc, CPlayerAction &paAction, BOOL bPreScan)
{
  // allow double axis controls
  paAction.pa_aRotation += paAction.pa_aViewRotation;

  CPlayerSettings *pps = (CPlayerSettings *)pc.pc_aubAppearance;
//  CPrintF("compose: prescan %d, x:%g\n", bPreScan, paAction.pa_aRotation(1));
  // if strafing
  if (pctlCurrent.bStrafe) {
    // move rotation left/right into translation left/right
    paAction.pa_vTranslation(1) = -paAction.pa_aRotation(1)*ctl_fAxisStrafingModifier;
    paAction.pa_aRotation(1) = 0;
  }
  // if centering view
  if (pctlCurrent.bCenterView) {
    // don't allow moving view up/down
    paAction.pa_aRotation(2) = 0;
  }

  // multiply axis actions with speed
  paAction.pa_vTranslation(1) *= plr_fSpeedSide;
  paAction.pa_vTranslation(2) *= plr_fSpeedUp;
  if (paAction.pa_vTranslation(3)<0) {
    paAction.pa_vTranslation(3) *= plr_fSpeedForward;
  } else {
    paAction.pa_vTranslation(3) *= plr_fSpeedBackward;
  }

  // find local player, if any
  CPlayer *penThis = NULL;
  INDEX ctPlayers = CEntity::GetMaxPlayers();
  for (INDEX iPlayer = 0; iPlayer<ctPlayers; iPlayer++) {
    CPlayer *pen=(CPlayer *)CEntity::GetPlayerEntity(iPlayer);
    if (pen!=NULL && pen->en_pcCharacter==pc) {
      penThis = pen;
      break;
    }
  }
  // if not found
  if (penThis==NULL) {
    // do nothing
    return;
  }
  // accumulate local rotation
  penThis->m_aLocalRotation    +=paAction.pa_aRotation;
  penThis->m_aLocalViewRotation+=paAction.pa_aViewRotation;
  penThis->m_vLocalTranslation +=paAction.pa_vTranslation;

  // if prescanning
  if (bPreScan) {
    // no button checking
    return;
  }

  // add button movement/rotation/look actions to the axis actions
  if(pctlCurrent.bMoveForward  ) paAction.pa_vTranslation(3) -= plr_fSpeedForward;
  if(pctlCurrent.bMoveBackward ) paAction.pa_vTranslation(3) += plr_fSpeedBackward;
  if(pctlCurrent.bMoveLeft  || pctlCurrent.bStrafe&&pctlCurrent.bTurnLeft) paAction.pa_vTranslation(1) -= plr_fSpeedSide;
  if(pctlCurrent.bMoveRight || pctlCurrent.bStrafe&&pctlCurrent.bTurnRight) paAction.pa_vTranslation(1) += plr_fSpeedSide;
  if(pctlCurrent.bMoveUp       ) paAction.pa_vTranslation(2) += plr_fSpeedUp;
  if(pctlCurrent.bMoveDown     ) paAction.pa_vTranslation(2) -= plr_fSpeedUp;

  const FLOAT fQuantum = _pTimer->TickQuantum;
  if(pctlCurrent.bTurnLeft  && !pctlCurrent.bStrafe) penThis->m_aLocalRotation(1) += ctl_fButtonRotationSpeedH*fQuantum;
  if(pctlCurrent.bTurnRight && !pctlCurrent.bStrafe) penThis->m_aLocalRotation(1) -= ctl_fButtonRotationSpeedH*fQuantum;
  if(pctlCurrent.bTurnUp           ) penThis->m_aLocalRotation(2) += ctl_fButtonRotationSpeedP*fQuantum;
  if(pctlCurrent.bTurnDown         ) penThis->m_aLocalRotation(2) -= ctl_fButtonRotationSpeedP*fQuantum;
  if(pctlCurrent.bTurnBankingLeft  ) penThis->m_aLocalRotation(3) += ctl_fButtonRotationSpeedB*fQuantum;
  if(pctlCurrent.bTurnBankingRight ) penThis->m_aLocalRotation(3) -= ctl_fButtonRotationSpeedB*fQuantum;

  if(pctlCurrent.bLookLeft         ) penThis->m_aLocalViewRotation(1) += ctl_fButtonRotationSpeedH*fQuantum;
  if(pctlCurrent.bLookRight        ) penThis->m_aLocalViewRotation(1) -= ctl_fButtonRotationSpeedH*fQuantum;
  if(pctlCurrent.bLookUp           ) penThis->m_aLocalViewRotation(2) += ctl_fButtonRotationSpeedP*fQuantum;
  if(pctlCurrent.bLookDown         ) penThis->m_aLocalViewRotation(2) -= ctl_fButtonRotationSpeedP*fQuantum;
  if(pctlCurrent.bLookBankingLeft  ) penThis->m_aLocalViewRotation(3) += ctl_fButtonRotationSpeedB*fQuantum;
  if(pctlCurrent.bLookBankingRight ) penThis->m_aLocalViewRotation(3) -= ctl_fButtonRotationSpeedB*fQuantum;

  // use current accumulated rotation
  paAction.pa_aRotation     = penThis->m_aLocalRotation;
  paAction.pa_aViewRotation = penThis->m_aLocalViewRotation;
  //paAction.pa_vTranslation  = penThis->m_vLocalTranslation;

  // if walking
  if(pctlCurrent.bWalk) {
    // make forward/backward and sidestep speeds slower
    paAction.pa_vTranslation(3) /= 2.0f;
    paAction.pa_vTranslation(1) /= 2.0f;
  }

  // reset all button actions
  paAction.pa_ulButtons = 0;

  // set weapon selection bits
  for(INDEX i=1; i<MAX_WEAPONS; i++) {
    if(pctlCurrent.bSelectWeapon[i]) {
      paAction.pa_ulButtons = i<<PLACT_SELECT_WEAPON_SHIFT;
      break;
    }
  }
  // set button pressed flags
  if(pctlCurrent.bWeaponNext) paAction.pa_ulButtons |= PLACT_WEAPON_NEXT;
  if(pctlCurrent.bWeaponPrev) paAction.pa_ulButtons |= PLACT_WEAPON_PREV;
  if(pctlCurrent.bWeaponFlip) paAction.pa_ulButtons |= PLACT_WEAPON_FLIP;
  if(pctlCurrent.bFire)       paAction.pa_ulButtons |= PLACT_FIRE;
  if(pctlCurrent.bAltFire)    paAction.pa_ulButtons |= PLACT_ALTFIRE;
  if(pctlCurrent.bReload)     paAction.pa_ulButtons |= PLACT_RELOAD;
  if(pctlCurrent.bUse)        paAction.pa_ulButtons |= PLACT_USE|PLACT_USE_HELD|PLACT_SNIPER_USE;
  if(pctlCurrent.bComputer)      paAction.pa_ulButtons |= PLACT_COMPUTER;
  if(pctlCurrent.b3rdPersonView) paAction.pa_ulButtons |= PLACT_3RD_PERSON_VIEW;
  if(pctlCurrent.bCenterView)    paAction.pa_ulButtons |= PLACT_CENTER_VIEW;
  // is 'use' being held?
  if(pctlCurrent.bUseOrComputer) paAction.pa_ulButtons |= PLACT_USE_HELD|PLACT_SNIPER_USE;
  if(pctlCurrent.bSniperZoomIn)  paAction.pa_ulButtons |= PLACT_SNIPER_ZOOMIN;
  if(pctlCurrent.bSniperZoomOut) paAction.pa_ulButtons |= PLACT_SNIPER_ZOOMOUT;
  if(pctlCurrent.bFireBomb)      paAction.pa_ulButtons |= PLACT_FIREBOMB;

  // if userorcomp just pressed
  if(pctlCurrent.bUseOrComputer && !pctlCurrent.bUseOrComputerLast) {
    // if double-click is off
    if (ctl_tmComputerDoubleClick==0 || (pps->ps_ulFlags&PSF_COMPSINGLECLICK)) {
      // press both
      paAction.pa_ulButtons |= PLACT_USE|PLACT_COMPUTER;
    // if double-click is on
    } else {
      // if double click
      if (_pTimer->GetRealTimeTick()<=_tmLastUseOrCompPressed+ctl_tmComputerDoubleClick) {
        // computer pressed
        paAction.pa_ulButtons |= PLACT_COMPUTER;
      // if single click
      } else {
        // use pressed
        paAction.pa_ulButtons |= PLACT_USE;
      }
    }
    _tmLastUseOrCompPressed = _pTimer->GetRealTimeTick();
  }
  // remember old userorcomp pressed state
  pctlCurrent.bUseOrComputerLast = pctlCurrent.bUseOrComputer;
};

void CPlayer_Precache(void)
{
  CDLLEntityClass *pdec = &CPlayer_DLLClass;

  // precache view
  extern void CPlayerView_Precache(void);
  CPlayerView_Precache();

  // precache all player sounds
  pdec->PrecacheSound(SOUND_WATER_ENTER        );
  pdec->PrecacheSound(SOUND_WATER_LEAVE        );
  pdec->PrecacheSound(SOUND_WALK_L             );
  pdec->PrecacheSound(SOUND_WALK_R             );
  pdec->PrecacheSound(SOUND_WALK_SAND_L        );
  pdec->PrecacheSound(SOUND_WALK_SAND_R        );
  pdec->PrecacheSound(SOUND_SWIM_L             );
  pdec->PrecacheSound(SOUND_SWIM_R             );
  pdec->PrecacheSound(SOUND_DIVE_L             );
  pdec->PrecacheSound(SOUND_DIVE_R             );
  pdec->PrecacheSound(SOUND_DIVEIN             );
  pdec->PrecacheSound(SOUND_DIVEOUT            );
  pdec->PrecacheSound(SOUND_DROWN              );
  pdec->PrecacheSound(SOUND_INHALE0            );
  pdec->PrecacheSound(SOUND_JUMP               );
  pdec->PrecacheSound(SOUND_LAND               );
  pdec->PrecacheSound(SOUND_WOUNDWEAK          );
  pdec->PrecacheSound(SOUND_WOUNDMEDIUM        );
  pdec->PrecacheSound(SOUND_WOUNDSTRONG        );
  pdec->PrecacheSound(SOUND_WOUNDWATER         );
  pdec->PrecacheSound(SOUND_DEATH              );
  pdec->PrecacheSound(SOUND_DEATHWATER         );
  pdec->PrecacheSound(SOUND_WATERAMBIENT       );
  pdec->PrecacheSound(SOUND_WATERBUBBLES       );
  pdec->PrecacheSound(SOUND_WATERWALK_L        );
  pdec->PrecacheSound(SOUND_WATERWALK_R        );
  pdec->PrecacheSound(SOUND_INHALE1            );
  pdec->PrecacheSound(SOUND_INHALE2            );
  pdec->PrecacheSound(SOUND_INFO               );
  pdec->PrecacheSound(SOUND_WALK_GRASS_L       );
  pdec->PrecacheSound(SOUND_WALK_GRASS_R       );
  pdec->PrecacheSound(SOUND_WALK_WOOD_L        );
  pdec->PrecacheSound(SOUND_WALK_WOOD_R        );
  pdec->PrecacheSound(SOUND_WALK_SNOW_L        );
  pdec->PrecacheSound(SOUND_WALK_SNOW_R        );
//pdec->PrecacheSound(SOUND_HIGHSCORE          );
  pdec->PrecacheSound(SOUND_SNIPER_ZOOM        );
  pdec->PrecacheSound(SOUND_SNIPER_QZOOM       );
  pdec->PrecacheSound(SOUND_SILENCE            );
  pdec->PrecacheSound(SOUND_POWERUP_BEEP       );

  pdec->PrecacheSound(SOUND_F_WATER_ENTER        );
  pdec->PrecacheSound(SOUND_F_WATER_LEAVE        );
  pdec->PrecacheSound(SOUND_F_WALK_L             );
  pdec->PrecacheSound(SOUND_F_WALK_R             );
  pdec->PrecacheSound(SOUND_F_WALK_SAND_L        );
  pdec->PrecacheSound(SOUND_F_WALK_SAND_R        );
  pdec->PrecacheSound(SOUND_F_SWIM_L             );
  pdec->PrecacheSound(SOUND_F_SWIM_R             );
  pdec->PrecacheSound(SOUND_F_DIVE_L             );
  pdec->PrecacheSound(SOUND_F_DIVE_R             );
  pdec->PrecacheSound(SOUND_F_DIVEIN             );
  pdec->PrecacheSound(SOUND_F_DIVEOUT            );
  pdec->PrecacheSound(SOUND_F_DROWN              );
  pdec->PrecacheSound(SOUND_F_INHALE0            );
  pdec->PrecacheSound(SOUND_F_JUMP               );
  pdec->PrecacheSound(SOUND_F_LAND               );
  pdec->PrecacheSound(SOUND_F_WOUNDWEAK          );
  pdec->PrecacheSound(SOUND_F_WOUNDMEDIUM        );
  pdec->PrecacheSound(SOUND_F_WOUNDSTRONG        );
  pdec->PrecacheSound(SOUND_F_WOUNDWATER         );
  pdec->PrecacheSound(SOUND_F_DEATH              );
  pdec->PrecacheSound(SOUND_F_DEATHWATER         );
  pdec->PrecacheSound(SOUND_F_WATERWALK_L        );
  pdec->PrecacheSound(SOUND_F_WATERWALK_R        );
  pdec->PrecacheSound(SOUND_F_INHALE1            );
  pdec->PrecacheSound(SOUND_F_INHALE2            );
  pdec->PrecacheSound(SOUND_F_WALK_GRASS_L       );
  pdec->PrecacheSound(SOUND_F_WALK_GRASS_R       );
  pdec->PrecacheSound(SOUND_F_WALK_WOOD_L        );
  pdec->PrecacheSound(SOUND_F_WALK_WOOD_R        );
  pdec->PrecacheSound(SOUND_F_WALK_SNOW_L        );
  pdec->PrecacheSound(SOUND_F_WALK_SNOW_R        );
//pdec->PrecacheSound(SOUND_F_HIGHSCORE          );
  pdec->PrecacheSound(SOUND_BLOWUP               );

  pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_TELEPORT);
  pdec->PrecacheClass(CLASS_SERIOUSBOMB);

  pdec->PrecacheModel(MODEL_FLESH);
  pdec->PrecacheModel(MODEL_FLESH_APPLE);
  pdec->PrecacheModel(MODEL_FLESH_BANANA);
  pdec->PrecacheModel(MODEL_FLESH_BURGER);
  pdec->PrecacheTexture(TEXTURE_FLESH_RED);
  pdec->PrecacheTexture(TEXTURE_FLESH_GREEN);
  pdec->PrecacheTexture(TEXTURE_FLESH_APPLE);
  pdec->PrecacheTexture(TEXTURE_FLESH_BANANA);
  pdec->PrecacheTexture(TEXTURE_FLESH_BURGER);
  pdec->PrecacheTexture(TEXTURE_FLESH_LOLLY);
  pdec->PrecacheTexture(TEXTURE_FLESH_ORANGE);

  pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_BLOODSPILL);
  pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_BLOODSTAIN);
  pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_BLOODSTAINGROW);
  pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_BLOODEXPLODE);

  //pdec->PrecacheTexture(TEXTURE_BLOOD_MANY);
}

void CPlayer_OnInitClass(void)
{
  // clear current player controls
  memset(&pctlCurrent, 0, sizeof(pctlCurrent));
  // declare player control variables
  _pShell->DeclareSymbol("user INDEX ctl_bMoveForward;",  &pctlCurrent.bMoveForward);
  _pShell->DeclareSymbol("user INDEX ctl_bMoveBackward;", &pctlCurrent.bMoveBackward);
  _pShell->DeclareSymbol("user INDEX ctl_bMoveLeft;",     &pctlCurrent.bMoveLeft);
  _pShell->DeclareSymbol("user INDEX ctl_bMoveRight;",    &pctlCurrent.bMoveRight);
  _pShell->DeclareSymbol("user INDEX ctl_bMoveUp;",       &pctlCurrent.bMoveUp);
  _pShell->DeclareSymbol("user INDEX ctl_bMoveDown;",     &pctlCurrent.bMoveDown);
  _pShell->DeclareSymbol("user INDEX ctl_bTurnLeft;",         &pctlCurrent.bTurnLeft);
  _pShell->DeclareSymbol("user INDEX ctl_bTurnRight;",        &pctlCurrent.bTurnRight);
  _pShell->DeclareSymbol("user INDEX ctl_bTurnUp;",           &pctlCurrent.bTurnUp);
  _pShell->DeclareSymbol("user INDEX ctl_bTurnDown;",         &pctlCurrent.bTurnDown);
  _pShell->DeclareSymbol("user INDEX ctl_bTurnBankingLeft;",  &pctlCurrent.bTurnBankingLeft);
  _pShell->DeclareSymbol("user INDEX ctl_bTurnBankingRight;", &pctlCurrent.bTurnBankingRight);
  _pShell->DeclareSymbol("user INDEX ctl_bCenterView;",       &pctlCurrent.bCenterView);
  _pShell->DeclareSymbol("user INDEX ctl_bLookLeft;",         &pctlCurrent.bLookLeft);
  _pShell->DeclareSymbol("user INDEX ctl_bLookRight;",        &pctlCurrent.bLookRight);
  _pShell->DeclareSymbol("user INDEX ctl_bLookUp;",           &pctlCurrent.bLookUp);
  _pShell->DeclareSymbol("user INDEX ctl_bLookDown;",         &pctlCurrent.bLookDown);
  _pShell->DeclareSymbol("user INDEX ctl_bLookBankingLeft;",  &pctlCurrent.bLookBankingLeft);
  _pShell->DeclareSymbol("user INDEX ctl_bLookBankingRight;", &pctlCurrent.bLookBankingRight );
  _pShell->DeclareSymbol("user INDEX ctl_bWalk;",           &pctlCurrent.bWalk);
  _pShell->DeclareSymbol("user INDEX ctl_bStrafe;",         &pctlCurrent.bStrafe);
  _pShell->DeclareSymbol("user INDEX ctl_bFire;",           &pctlCurrent.bFire);
  _pShell->DeclareSymbol("user INDEX ctl_bReload;",         &pctlCurrent.bReload);
  _pShell->DeclareSymbol("user INDEX ctl_bUse;",            &pctlCurrent.bUse);
  _pShell->DeclareSymbol("user INDEX ctl_bComputer;",       &pctlCurrent.bComputer);
  _pShell->DeclareSymbol("user INDEX ctl_bUseOrComputer;",  &pctlCurrent.bUseOrComputer);
  _pShell->DeclareSymbol("user INDEX ctl_b3rdPersonView;",  &pctlCurrent.b3rdPersonView);
  _pShell->DeclareSymbol("user INDEX ctl_bWeaponNext;",         &pctlCurrent.bWeaponNext);
  _pShell->DeclareSymbol("user INDEX ctl_bWeaponPrev;",         &pctlCurrent.bWeaponPrev);
  _pShell->DeclareSymbol("user INDEX ctl_bWeaponFlip;",         &pctlCurrent.bWeaponFlip);
  _pShell->DeclareSymbol("user INDEX ctl_bSelectWeapon[30+1];", &pctlCurrent.bSelectWeapon);
  _pShell->DeclareSymbol("persistent user FLOAT ctl_tmComputerDoubleClick;", &ctl_tmComputerDoubleClick);
  _pShell->DeclareSymbol("persistent user FLOAT ctl_fButtonRotationSpeedH;", &ctl_fButtonRotationSpeedH);
  _pShell->DeclareSymbol("persistent user FLOAT ctl_fButtonRotationSpeedP;", &ctl_fButtonRotationSpeedP);
  _pShell->DeclareSymbol("persistent user FLOAT ctl_fButtonRotationSpeedB;", &ctl_fButtonRotationSpeedB);
  _pShell->DeclareSymbol("persistent user FLOAT ctl_fAxisStrafingModifier;", &ctl_fAxisStrafingModifier);
  //new
  _pShell->DeclareSymbol("user INDEX ctl_bSniperZoomIn;",         &pctlCurrent.bSniperZoomIn);
  _pShell->DeclareSymbol("user INDEX ctl_bSniperZoomOut;",        &pctlCurrent.bSniperZoomOut);
  _pShell->DeclareSymbol("user INDEX ctl_bFireBomb;",             &pctlCurrent.bFireBomb);
  //AltFireButton
  _pShell->DeclareSymbol("user INDEX ctl_bAltFire;",              &pctlCurrent.bAltFire);

  _pShell->DeclareSymbol("user FLOAT plr_fSwimSoundDelay;", &plr_fSwimSoundDelay);
  _pShell->DeclareSymbol("user FLOAT plr_fDiveSoundDelay;", &plr_fDiveSoundDelay);
  _pShell->DeclareSymbol("user FLOAT plr_fWalkSoundDelay;", &plr_fWalkSoundDelay);
  _pShell->DeclareSymbol("user FLOAT plr_fRunSoundDelay;",  &plr_fRunSoundDelay);

  _pShell->DeclareSymbol("persistent user FLOAT cli_fPredictPlayersRange;",&cli_fPredictPlayersRange);
  _pShell->DeclareSymbol("persistent user FLOAT cli_fPredictItemsRange;",  &cli_fPredictItemsRange  );
  _pShell->DeclareSymbol("persistent user FLOAT cli_tmPredictFoe;",        &cli_tmPredictFoe        );
  _pShell->DeclareSymbol("persistent user FLOAT cli_tmPredictAlly;",       &cli_tmPredictAlly       );
  _pShell->DeclareSymbol("persistent user FLOAT cli_tmPredictEnemy;",      &cli_tmPredictEnemy      );

  _pShell->DeclareSymbol("     INDEX hud_bShowAll;",     &hud_bShowAll);
  _pShell->DeclareSymbol("user INDEX hud_bShowInfo;",    &hud_bShowInfo);
  _pShell->DeclareSymbol("user const FLOAT net_tmLatencyAvg;", &net_tmLatencyAvg);
  _pShell->DeclareSymbol("persistent user INDEX hud_bShowLatency;", &hud_bShowLatency);
  _pShell->DeclareSymbol("persistent user INDEX hud_iShowPlayers;", &hud_iShowPlayers);
  _pShell->DeclareSymbol("persistent user INDEX hud_iSortPlayers;", &hud_iSortPlayers);
  _pShell->DeclareSymbol("persistent user INDEX hud_bShowWeapon;",  &hud_bShowWeapon);
  _pShell->DeclareSymbol("persistent user INDEX hud_bShowMessages;",&hud_bShowMessages);
  _pShell->DeclareSymbol("persistent user FLOAT hud_fScaling;",     &hud_fScaling);
  _pShell->DeclareSymbol("persistent user FLOAT hud_fOpacity;",     &hud_fOpacity);
  _pShell->DeclareSymbol("persistent user FLOAT hud_tmWeaponsOnScreen;",  &hud_tmWeaponsOnScreen);
  _pShell->DeclareSymbol("persistent user FLOAT hud_tmLatencySnapshot;",  &hud_tmLatencySnapshot);
  _pShell->DeclareSymbol("persistent user FLOAT plr_fBreathingStrength;", &plr_fBreathingStrength);
  _pShell->DeclareSymbol("INDEX cht_bKillFinalBoss;",  &cht_bKillFinalBoss);
  _pShell->DeclareSymbol("INDEX cht_bDebugFinalBoss;", &cht_bDebugFinalBoss);
  _pShell->DeclareSymbol("INDEX cht_bDumpFinalBossData;", &cht_bDumpFinalBossData);
  _pShell->DeclareSymbol("INDEX cht_bDebugFinalBossAnimations;", &cht_bDebugFinalBossAnimations);
  _pShell->DeclareSymbol("INDEX cht_bDumpPlayerShading;", &cht_bDumpPlayerShading);
  _pShell->DeclareSymbol("persistent user INDEX hud_bShowMatchInfo;", &hud_bShowMatchInfo);

  _pShell->DeclareSymbol("persistent user FLOAT wpn_fRecoilSpeed[17];",   &wpn_fRecoilSpeed);
  _pShell->DeclareSymbol("persistent user FLOAT wpn_fRecoilLimit[17];",   &wpn_fRecoilLimit);
  _pShell->DeclareSymbol("persistent user FLOAT wpn_fRecoilDampUp[17];",  &wpn_fRecoilDampUp);
  _pShell->DeclareSymbol("persistent user FLOAT wpn_fRecoilDampDn[17];",  &wpn_fRecoilDampDn);
  _pShell->DeclareSymbol("persistent user FLOAT wpn_fRecoilOffset[17];",  &wpn_fRecoilOffset);
  _pShell->DeclareSymbol("persistent user FLOAT wpn_fRecoilFactorP[17];", &wpn_fRecoilFactorP);
  _pShell->DeclareSymbol("persistent user FLOAT wpn_fRecoilFactorZ[17];", &wpn_fRecoilFactorZ);

  // cheats
  _pShell->DeclareSymbol("user INDEX cht_bGod;",       &cht_bGod);
  _pShell->DeclareSymbol("user INDEX cht_bFly;",       &cht_bFly);
  _pShell->DeclareSymbol("user INDEX cht_bGhost;",     &cht_bGhost);
  _pShell->DeclareSymbol("user INDEX cht_bInvisible;", &cht_bInvisible);
  _pShell->DeclareSymbol("user INDEX cht_bGiveAll;",   &cht_bGiveAll);
  _pShell->DeclareSymbol("user INDEX cht_bKillAll;",   &cht_bKillAll);
  _pShell->DeclareSymbol("user INDEX cht_bOpen;",      &cht_bOpen);
  _pShell->DeclareSymbol("user INDEX cht_bAllMessages;", &cht_bAllMessages);
  _pShell->DeclareSymbol("user FLOAT cht_fTranslationMultiplier ;", &cht_fTranslationMultiplier);
  _pShell->DeclareSymbol("user INDEX cht_bRefresh;", &cht_bRefresh);
  // this one is masqueraded cheat enable variable
  _pShell->DeclareSymbol("INDEX cht_bEnable;", &cht_bEnable);

  // this cheat is always enabled
  _pShell->DeclareSymbol("user INDEX cht_iGoToMarker;", &cht_iGoToMarker);

  // player speed and view parameters, not declared except in internal build
  #if 0
    _pShell->DeclareSymbol("user FLOAT plr_fViewHeightStand;", &plr_fViewHeightStand);
    _pShell->DeclareSymbol("user FLOAT plr_fViewHeightCrouch;",&plr_fViewHeightCrouch);
    _pShell->DeclareSymbol("user FLOAT plr_fViewHeightSwim;",  &plr_fViewHeightSwim);
    _pShell->DeclareSymbol("user FLOAT plr_fViewHeightDive;",  &plr_fViewHeightDive);
    _pShell->DeclareSymbol("user FLOAT plr_fViewDampFactor;",         &plr_fViewDampFactor);
    _pShell->DeclareSymbol("user FLOAT plr_fViewDampLimitGroundUp;",  &plr_fViewDampLimitGroundUp);
    _pShell->DeclareSymbol("user FLOAT plr_fViewDampLimitGroundDn;",  &plr_fViewDampLimitGroundDn);
    _pShell->DeclareSymbol("user FLOAT plr_fViewDampLimitWater;",     &plr_fViewDampLimitWater);
    _pShell->DeclareSymbol("user FLOAT plr_fAcceleration;",  &plr_fAcceleration);
    _pShell->DeclareSymbol("user FLOAT plr_fDeceleration;",  &plr_fDeceleration);
    _pShell->DeclareSymbol("user FLOAT plr_fSpeedForward;",  &plr_fSpeedForward);
    _pShell->DeclareSymbol("user FLOAT plr_fSpeedBackward;", &plr_fSpeedBackward);
    _pShell->DeclareSymbol("user FLOAT plr_fSpeedSide;",     &plr_fSpeedSide);
    _pShell->DeclareSymbol("user FLOAT plr_fSpeedUp;",       &plr_fSpeedUp);
  #endif
  _pShell->DeclareSymbol("persistent user FLOAT plr_fFOV;", &plr_fFOV);
  _pShell->DeclareSymbol("persistent user FLOAT plr_fFrontClipDistance;", &plr_fFrontClipDistance);
  _pShell->DeclareSymbol("persistent user INDEX plr_bRenderPicked;", &plr_bRenderPicked);
  _pShell->DeclareSymbol("persistent user INDEX plr_bRenderPickedParticles;", &plr_bRenderPickedParticles);
  _pShell->DeclareSymbol("persistent user INDEX plr_bOnlySam;", &plr_bOnlySam);
  _pShell->DeclareSymbol("persistent user INDEX ent_bReportBrokenChains;", &ent_bReportBrokenChains);
  _pShell->DeclareSymbol("persistent user FLOAT ent_tmMentalIn  ;", &ent_tmMentalIn  );
  _pShell->DeclareSymbol("persistent user FLOAT ent_tmMentalOut ;", &ent_tmMentalOut );
  _pShell->DeclareSymbol("persistent user FLOAT ent_tmMentalFade;", &ent_tmMentalFade);
  _pShell->DeclareSymbol("persistent user FLOAT gfx_fEnvParticlesDensity;", &gfx_fEnvParticlesDensity);
  _pShell->DeclareSymbol("persistent user FLOAT gfx_fEnvParticlesRange;", &gfx_fEnvParticlesRange);
  
  //MuxaX checking blood files
  try 
  {
    _toBloodScreen3.SetData_t(CTFILENAME("TexturesMP\\Interface\\Blood3.tex"));
  } catch (char *strError) {
    FatalError( strError);
	}
	
  try 
  {
    _toBloodScreen2.SetData_t(CTFILENAME("TexturesMP\\Interface\\Blood2.tex"));
  } catch (char *strError) {
    FatalError( strError);
	}
	
  try 
  {
    _toBloodScreen1.SetData_t(CTFILENAME("TexturesMP\\Interface\\Blood1.tex"));
  } catch (char *strError) {
    FatalError( strError);
	}
	
//MuxaX checking switchArm files
  try 
  {
    _toSwitchArm.SetData_t(CTFILENAME("TexturesMP\\Interface\\SwitchArm.tex"));
  } catch (char *strError) {
    FatalError( strError);
	}
	
  try 
  {
    _toUltraDamage.SetData_t(CTFILENAME("TexturesMP\\Interface\\UltraStrong.tex"));
  } catch (char *strError) {
    FatalError( strError);
	}
	
  try 
  {
    _toInvulnerabilityB.SetData_t(CTFILENAME("TexturesMP\\Interface\\InvulnerabilityB.tex"));
  } catch (char *strError) {
    FatalError( strError);
	}
	
  try 
  {
    _toPowerUpAll.SetData_t(CTFILENAME("TexturesMP\\Interface\\PowerUpAll.tex"));
  } catch (char *strError) {
    FatalError( strError);
	}
	

  // player appearance interface
  _pShell->DeclareSymbol("INDEX SetPlayerAppearance(INDEX, INDEX, INDEX, INDEX);", &SetPlayerAppearance);

  // call player weapons persistant variable initialization
  extern void CPlayerWeapons_Init(void);
  CPlayerWeapons_Init();

  // initialize HUD
  InitHUD();

  // precache
  CPlayer_Precache();
}

// clean up
void CPlayer_OnEndClass(void)
{
  EndHUD();
}

CTString GetDifficultyString(void)
{
  if (GetSP()->sp_bMental) { return TRANS("Mental"); }

  switch (GetSP()->sp_gdGameDifficulty) {
  case CSessionProperties::GD_TOURIST:  return TRANS("Tourist");
  case CSessionProperties::GD_EASY:     return TRANS("Easy");
  default:
  case CSessionProperties::GD_NORMAL:   return TRANS("Normal");
  case CSessionProperties::GD_HARD:     return TRANS("Hard");
  case CSessionProperties::GD_EXTREME:  return TRANS("Serious");
  }
}
// armor & health constants getters

FLOAT MaxArmor(void)
{
  if (GetSP()->sp_gdGameDifficulty<=CSessionProperties::GD_EASY) {
    return 100;
  } else {
    return 100;
  }
}
FLOAT TopArmor(void)
{
  if (GetSP()->sp_gdGameDifficulty<=CSessionProperties::GD_EASY) {
    return 100;
  } else {
    return 100;
  }
}
FLOAT MaxHealth(void)
{
  if (GetSP()->sp_gdGameDifficulty<=CSessionProperties::GD_EASY) {
    return 100;
  } else {
    return 100;
  }
}
FLOAT TopHealth(void)
{
  if (GetSP()->sp_gdGameDifficulty<=CSessionProperties::GD_EASY) {
    return 100;
  } else {
    return 100;
  }
}

// info structure
static EntityInfo eiPlayerGround = {
  EIBT_FLESH, 80.0f,
  0.0f, 1.7f, 0.0f,     // source (eyes)
  0.0f, 1.0f, 0.0f,     // target (body)
};
static EntityInfo eiPlayerCrouch = {
  EIBT_FLESH, 80.0f,
  0.0f, 1.2f, 0.0f,     // source (eyes)
  0.0f, 0.7f, 0.0f,     // target (body)
};
static EntityInfo eiPlayerSwim = {
  EIBT_FLESH, 40.0f,
  0.0f, 0.0f, 0.0f,     // source (eyes)
  0.0f, 0.0f, 0.0f,     // target (body)
};


// animation light specific
#define LIGHT_ANIM_MINIGUN 2
#define LIGHT_ANIM_TOMMYGUN 3
#define LIGHT_ANIM_COLT_SHOTGUN 4
#define LIGHT_ANIM_NONE 5

const char *NameForState(PlayerState pst)
{
  switch(pst) {
  case PST_STAND: return "stand";
  case PST_CROUCH: return "crouch";
  case PST_FALL: return "fall";
  case PST_SWIM: return "swim";
  case PST_DIVE: return "dive";
  default: return "???";
  };
}


// print explanation on how a player died
void PrintPlayerDeathMessage(CPlayer *ppl, const EDeath &eDeath)
{
  CTString strMyName = ppl->GetPlayerName();
  CEntity *penKiller = eDeath.eLastDamage.penInflictor;
  // if killed by a valid entity
  if (penKiller!=NULL) {
    // if killed by a player
    if (IsOfClass(penKiller, "Player")) {
      // if not self
      if (penKiller!=ppl) {
        CTString strKillerName = ((CPlayer*)penKiller)->GetPlayerName();

        if(eDeath.eLastDamage.dmtType==DMT_TELEPORT) {
          CPrintF(TRANS("%s telefragged %s\n"), strKillerName, strMyName);
        } else if(eDeath.eLastDamage.dmtType==DMT_CLOSERANGE) {
          CPrintF(TRANS("%s cut %s into pieces\n"), strKillerName, strMyName);
        } else if(eDeath.eLastDamage.dmtType==DMT_CHAINSAW) {
          CPrintF(TRANS("%s cut %s into pieces\n"), strKillerName, strMyName);
        } else if(eDeath.eLastDamage.dmtType==DMT_BULLET) {
          CPrintF(TRANS("%s poured lead into %s\n"), strKillerName, strMyName);
        } else if(eDeath.eLastDamage.dmtType==DMT_PROJECTILE || eDeath.eLastDamage.dmtType==DMT_EXPLOSION) {
          CPrintF(TRANS("%s blew %s away\n"), strKillerName, strMyName);
        } else if(eDeath.eLastDamage.dmtType==DMT_CANNONBALL) {
          CPrintF(TRANS("%s smashed %s with a cannon\n"), strKillerName, strMyName);
        } else if(eDeath.eLastDamage.dmtType==DMT_CANNONBALL_EXPLOSION) {
          CPrintF(TRANS("%s nuked %s\n"), strKillerName, strMyName);
        } else {
          CPrintF(TRANS("%s killed %s\n"), strKillerName, strMyName);
        }
      } else {
        // make message from damage type
        switch(eDeath.eLastDamage.dmtType) {
        case DMT_DROWNING:  CPrintF(TRANS("%s drowned\n"), strMyName); break;
        case DMT_BURNING:   CPrintF(TRANS("%s burst into flames\n"), strMyName); break;
        case DMT_SPIKESTAB: CPrintF(TRANS("%s fell into a spike-hole\n"), strMyName); break;
        case DMT_FREEZING:  CPrintF(TRANS("%s has frozen\n"), strMyName); break;
        case DMT_ACID:      CPrintF(TRANS("%s dissolved\n"), strMyName); break;
        case DMT_PROJECTILE:
        case DMT_EXPLOSION:
          CPrintF(TRANS("%s blew himself away\n"), strMyName); break;
        default:            CPrintF(TRANS("%s has committed suicide\n"), strMyName);
        }
      }
    // if killed by an enemy
    } else if (IsDerivedFromClass(penKiller, "Enemy Base")) {
      // check for telefrag first
      if(eDeath.eLastDamage.dmtType==DMT_TELEPORT) {
        CPrintF(TRANS("%s was telefragged\n"), strMyName);
        return;
      }
      // describe how this enemy killed player
      CPrintF("%s\n", (const char*)((CEnemyBase*)penKiller)->GetPlayerKillDescription(strMyName, eDeath));

    // if killed by some other entity
    } else {
      // make message from damage type
      switch(eDeath.eLastDamage.dmtType) {
      case DMT_SPIKESTAB: CPrintF(TRANS("%s was pierced\n"), strMyName); break;
      case DMT_BRUSH:     CPrintF(TRANS("%s was squashed\n"), strMyName); break;
      case DMT_ABYSS:     CPrintF(TRANS("%s went over the edge\n"), strMyName); break;
      case DMT_IMPACT:    CPrintF(TRANS("%s swashed\n"), strMyName); break;
      case DMT_HEAT:      CPrintF(TRANS("%s stood in the sun for too long\n"), strMyName); break;
      default:            CPrintF(TRANS("%s passed away\n"), strMyName);
      }
    }
  // if no entity pointer (shouldn't happen)
  } else {
    CPrintF(TRANS("%s is missing in action\n"), strMyName);
  }
}


void CPlayer::SetDefaultProperties(void) {
  m_strName = "<unnamed player>";
  m_ulLastButtons = 0x0;
  m_fArmor = 0.0f;
  m_strGroup = "";
  m_ulKeys = 0;
  m_fMaxHealth = 1;
  m_ulFlags = 0;
  m_penWeapons = NULL;
  m_penAnimator = NULL;
  m_penView = NULL;
  m_pen3rdPersonView = NULL;
  m_iViewState = PVT_PLAYEREYES ;
  m_iLastViewState = PVT_PLAYEREYES ;
  m_aoLightAnimation.SetData(NULL);

  m_fDamageAmmount = 0.0f;
  m_tmWoundedTime = 0.0f;
  m_tmScreamTime = 0.0f;
  m_iGender = GENDER_MALE ;
  m_pstState = PST_STAND ;
  m_fFallTime = 0.0f;
  m_fSwimTime = 0.0f;
  m_tmOutOfWater = 0.0f;
  m_tmMoveSound = 0.0f;
  m_bMoveSoundLeft = TRUE ;
  m_tmNextAmbientOnce = 0.0f;
  m_tmMouthSoundLast = 0.0f;
  m_penCamera = NULL;
  m_strCenterMessage = "";
  m_tmCenterMessageEnd = 0.0f;
  m_bPendingMessage = FALSE ;
  m_tmMessagePlay = 0.0f;
  m_tmAnalyseEnd = 0.0f;
  m_bComputerInvoked = FALSE ;
  m_tmAnimateInbox = -100.0f;
  m_penMainMusicHolder = NULL;
  m_tmLastDamage = -1.0f;
  m_fMaxDamageAmmount = 0.0f;
  m_vDamage = FLOAT3D(0 , 0 , 0);
  m_tmSpraySpawned = -1.0f;
  m_fSprayDamage = 0.0f;
  m_penSpray = NULL;
  m_soWeapon0.SetOwner(this);
m_soWeapon0.Stop_internal();
  m_soWeapon1.SetOwner(this);
m_soWeapon1.Stop_internal();
  m_soWeapon2.SetOwner(this);
m_soWeapon2.Stop_internal();
  m_soWeapon3.SetOwner(this);
m_soWeapon3.Stop_internal();
  m_soWeaponAmbient.SetOwner(this);
m_soWeaponAmbient.Stop_internal();
  m_soPowerUpBeep.SetOwner(this);
m_soPowerUpBeep.Stop_internal();
  m_soMouth.SetOwner(this);
m_soMouth.Stop_internal();
  m_soFootL.SetOwner(this);
m_soFootL.Stop_internal();
  m_soFootR.SetOwner(this);
m_soFootR.Stop_internal();
  m_soBody.SetOwner(this);
m_soBody.Stop_internal();
  m_soLocalAmbientLoop.SetOwner(this);
m_soLocalAmbientLoop.Stop_internal();
  m_soLocalAmbientOnce.SetOwner(this);
m_soLocalAmbientOnce.Stop_internal();
  m_soMessage.SetOwner(this);
m_soMessage.Stop_internal();
  m_soHighScore.SetOwner(this);
m_soHighScore.Stop_internal();
  m_soSpeech.SetOwner(this);
m_soSpeech.Stop_internal();
  m_soSniperZoom.SetOwner(this);
m_soSniperZoom.Stop_internal();
  m_iMana = 0;
  m_fManaFraction = 0.0f;
  m_iHighScore = 0;
  m_iBeatenHighScore = 0;
  m_tmLatency = 0.0f;
  m_tmLatencyLastAvg = 0.0f;
  m_tmLatencyAvgSum = 0.0f;
  m_ctLatencyAvg = 0;
  m_bEndOfLevel = FALSE ;
  m_bEndOfGame = FALSE ;
  m_iMayRespawn = 0;
  m_tmSpawned = 0.0f;
  m_vDied = FLOAT3D(0 , 0 , 0);
  m_aDied = FLOAT3D(0 , 0 , 0);
  m_tmEstTime = 0.0f;
  m_iTimeScore = 0;
  m_iStartTime = 0;
  m_iEndTime = 0;
  m_tmLevelStarted = 0.0f;
  m_strLevelStats = "";
  m_penActionMarker = NULL;
  m_fAutoSpeed = 0.0f;
  m_iAutoOrgWeapon = 0;
  m_vAutoSpeed = FLOAT3D(0 , 0 , 0);
  m_tmSpiritStart = 0.0f;
  m_tmFadeStart = 0.0f;
  m_tmLastPicked = -10000.0f;
  m_strPickedName = "";
  m_fPickedAmmount = 0.0f;
  m_fPickedMana = 0.0f;
  m_iLastHealth = 0;
  m_iLastArmor = 0;
  m_iLastAmmo = 0;
  m_tmHealthChanged = -9;
  m_tmArmorChanged = -9;
  m_tmAmmoChanged = -9;
  m_tmMinigunAutoFireStart = -1.0f;
  m_vLastStain = FLOAT3D(0 , 0 , 0);
  m_aLastRotation = FLOAT3D(0 , 0 , 0);
  m_aLastViewRotation = FLOAT3D(0 , 0 , 0);
  m_vLastTranslation = FLOAT3D(0 , 0 , 0);
  m_aLocalRotation = FLOAT3D(0 , 0 , 0);
  m_aLocalViewRotation = FLOAT3D(0 , 0 , 0);
  m_vLocalTranslation = FLOAT3D(0 , 0 , 0);
  m_tmInvisibility = 0.0f;
  m_tmInvulnerability = 0.0f;
  m_tmSeriousDamage = 0.0f;
  m_tmSeriousSpeed = 0.0f;
  m_tmInvisibilityMax = 30.0f;
  m_tmInvulnerabilityMax = 30.0f;
  m_tmSeriousDamageMax = 30.0f;
  m_tmSeriousSpeedMax = 30.0f;
  m_tmChainShakeEnd = 0.0f;
  m_fChainShakeStrength = 1.0f;
  m_fChainShakeFreqMod = 1.0f;
  m_fChainsawShakeDX = 0.0f;
  m_fChainsawShakeDY = 0.0f;
  m_iSeriousBombCount = 0;
  m_iLastSeriousBombCount = 0;
  m_tmSeriousBombFired = -10.0f;
  m_tmBulletShakeEnd = 0.0f;
  m_fBulletShakeStrengthX = 1.0f;
  m_fBulletShakeStrengthY = 1.0f;
  m_fBulletShakeFreqMod = 1.0f;
  m_fBulletShakeDX = 0.0f;
  m_fBulletShakeDY = 0.0f;
  m_penPrediction = NULL;
  CPlayerEntity::SetDefaultProperties();
}
  
#line 1361 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX CPlayer::GenderSound(INDEX iSound) 
#line 1362 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1363 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return iSound  + m_iGender  * GENDEROFFSET ;
#line 1364 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1366 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::AddBouble(FLOAT3D vPos,FLOAT3D vSpeedRelative) 
#line 1367 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1368 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ShellLaunchData  & sld  = m_asldData  [ m_iFirstEmptySLD  ];
#line 1369 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
sld  . sld_vPos  = vPos ;
#line 1370 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const FLOATmatrix3D & m  = GetRotationMatrix  ();
#line 1371 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D vUp  (m  (1 , 2) , m  (2 , 2) , m  (3 , 2));
#line 1372 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
sld  . sld_vUp  = vUp ;
#line 1373 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
sld  . sld_vSpeed  = vSpeedRelative  * m ;
#line 1374 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
sld  . sld_tmLaunch  = _pTimer  -> CurrentTick  ();
#line 1375 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
sld  . sld_estType  = ESL_BUBBLE ;
#line 1377 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iFirstEmptySLD  = (m_iFirstEmptySLD  + 1) % MAX_FLYING_SHELLS ;
#line 1378 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1380 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::ClearShellLaunchData(void) 
#line 1381 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1383 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iFirstEmptySLD  = 0;
#line 1384 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
for(INDEX iShell  = 0;iShell  < MAX_FLYING_SHELLS ;iShell  ++)
#line 1385 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1386 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_asldData  [ iShell  ] . sld_tmLaunch  = - 100.0f;
#line 1387 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1388 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1390 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::AddBulletSpray(FLOAT3D vPos,EffectParticlesType eptType,FLOAT3D vStretch) 
#line 1391 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1392 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BulletSprayLaunchData  & bsld  = m_absldData  [ m_iFirstEmptyBSLD  ];
#line 1393 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bsld  . bsld_vPos  = vPos ;
#line 1394 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bsld  . bsld_vG  = en_vGravityDir ;
#line 1395 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bsld  . bsld_eptType  = eptType ;
#line 1396 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bsld  . bsld_iRndBase  = FRnd  () * 123456;
#line 1397 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bsld  . bsld_tmLaunch  = _pTimer  -> CurrentTick  ();
#line 1398 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bsld  . bsld_vStretch  = vStretch ;
#line 1400 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iFirstEmptyBSLD  = (m_iFirstEmptyBSLD  + 1) % MAX_BULLET_SPRAYS ;
#line 1401 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1403 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::ClearBulletSprayLaunchData(void) 
#line 1404 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1405 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iFirstEmptyBSLD  = 0;
#line 1406 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
for(INDEX iBulletSpray  = 0;iBulletSpray  < MAX_BULLET_SPRAYS ;iBulletSpray  ++)
#line 1407 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1408 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_absldData  [ iBulletSpray  ] . bsld_tmLaunch  = - 100.0f;
#line 1409 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1410 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1412 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::AddGoreSpray(FLOAT3D vPos,FLOAT3D v3rdPos,SprayParticlesType sptType,FLOAT3D vSpilDirection,
#line 1413 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOATaabbox3D boxHitted,FLOAT fDamagePower,COLOR colParticles) 
#line 1414 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1415 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GoreSprayLaunchData  & gsld  = m_agsldData  [ m_iFirstEmptyGSLD  ];
#line 1416 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
gsld  . gsld_vPos  = vPos ;
#line 1417 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
gsld  . gsld_v3rdPos  = v3rdPos ;
#line 1418 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
gsld  . gsld_vG  = en_vGravityDir ;
#line 1419 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
gsld  . gsld_fGA  = en_fGravityA ;
#line 1420 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
gsld  . gsld_sptType  = sptType ;
#line 1421 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
gsld  . gsld_boxHitted  = boxHitted ;
#line 1422 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
gsld  . gsld_vSpilDirection  = vSpilDirection ;
#line 1423 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
gsld  . gsld_fDamagePower  = fDamagePower ;
#line 1424 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
gsld  . gsld_tmLaunch  = _pTimer  -> CurrentTick  ();
#line 1425 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
gsld  . gsld_colParticles  = colParticles ;
#line 1427 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iFirstEmptyGSLD  = (m_iFirstEmptyGSLD  + 1) % MAX_GORE_SPRAYS ;
#line 1428 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1430 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::ClearGoreSprayLaunchData(void) 
#line 1431 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1432 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iFirstEmptyGSLD  = 0;
#line 1433 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
for(INDEX iGoreSpray  = 0;iGoreSpray  < MAX_GORE_SPRAYS ;iGoreSpray  ++)
#line 1434 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1435 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_agsldData  [ iGoreSpray  ] . gsld_tmLaunch  = - 100.0f;
#line 1436 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1437 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
   CPlayer::CPlayer(void) 
#line 1440 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1442 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bUseButtonHeld  = FALSE ;
#line 1443 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ClearShellLaunchData  ();
#line 1444 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ClearBulletSprayLaunchData  ();
#line 1445 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ClearGoreSprayLaunchData  ();
#line 1446 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmPredict  = 0;
#line 1452 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1454 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
class CPlayerWeapons * CPlayer::GetPlayerWeapons(void) 
#line 1455 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1456 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ASSERT  (m_penWeapons  != NULL );
#line 1457 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return (CPlayerWeapons  *) & * m_penWeapons ;
#line 1458 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1459 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
class CPlayerAnimator * CPlayer::GetPlayerAnimator(void) 
#line 1460 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1461 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ASSERT  (m_penAnimator  != NULL );
#line 1462 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return (CPlayerAnimator  *) & * m_penAnimator ;
#line 1463 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1465 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerSettings * CPlayer::GetSettings(void) 
#line 1466 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1467 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return (CPlayerSettings  *) en_pcCharacter  . pc_aubAppearance ;
#line 1468 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  void CPlayer::Copy(CEntity & enOther,ULONG ulFlags) 
#line 1471 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1472 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerEntity  :: Copy  (enOther  , ulFlags );
#line 1473 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayer  * penOther  = (CPlayer  *) (& enOther );
#line 1474 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_moRender  . Copy  (penOther  -> m_moRender );
#line 1475 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psLevelStats  = penOther  -> m_psLevelStats ;
#line 1476 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psLevelTotal  = penOther  -> m_psLevelTotal ;
#line 1477 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psGameStats  = penOther  -> m_psGameStats ;
#line 1478 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psGameTotal  = penOther  -> m_psGameTotal ;
#line 1481 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ulFlags  & COPY_PREDICTOR )
#line 1482 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1484 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
memcpy  (m_asldData  , penOther  -> m_asldData  , sizeof  (m_asldData ));
#line 1485 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iFirstEmptySLD  = penOther  -> m_iFirstEmptySLD ;
#line 1487 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_acmiMessages  . Clear  ();
#line 1488 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ctUnreadMessages  = 0;
#line 1490 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetupLightSource  ();
#line 1493 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 1495 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_acmiMessages  = penOther  -> m_acmiMessages ;
#line 1496 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ctUnreadMessages  = penOther  -> m_ctUnreadMessages ;
#line 1497 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1498 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1501 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::UpdateLatency(FLOAT tmLatencyNow) 
#line 1502 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1503 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
TIME  tmNow  = _pTimer  -> GetHighPrecisionTimer  () . GetSeconds  ();
#line 1506 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(tmNow  < m_tmLatencyLastAvg  + hud_tmLatencySnapshot ){
#line 1508 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmLatencyAvgSum  += tmLatencyNow ;
#line 1509 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ctLatencyAvg  ++;
#line 1512 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 1514 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmLatency  = m_tmLatencyAvgSum  / m_ctLatencyAvg ;
#line 1516 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmLatencyAvgSum  = 0.0f;
#line 1517 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ctLatencyAvg  = 0;
#line 1518 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmLatencyLastAvg  = tmNow ;
#line 1519 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1521 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(_pNetwork  -> IsPlayerLocal  (this )){
#line 1522 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_tmPing  = m_tmLatency ;
#line 1523 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
net_tmLatencyAvg  = en_tmPing ;
#line 1524 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1525 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1528 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::ValidateCharacter(void) 
#line 1529 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1531 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_bSinglePlayer ){
#line 1533 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerSettings  * pps  = (CPlayerSettings  *) en_pcCharacter  . pc_aubAppearance ;
#line 1534 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
memset  (pps  -> ps_achModelFile  , 0 , sizeof  (pps  -> ps_achModelFile ));
#line 1535 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1536 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1538 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::ParseGender(CTString & strName) 
#line 1539 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1540 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(strName  . RemovePrefix  ("#male#")){
#line 1541 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iGender  = GENDER_MALE ;
#line 1542 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(strName  . RemovePrefix  ("#female#")){
#line 1543 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iGender  = GENDER_FEMALE ;
#line 1544 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 1545 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iGender  = GENDER_MALE ;
#line 1546 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1547 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1549 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::CheckHighScore(void) 
#line 1550 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1552 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! _pNetwork  -> IsPlayingDemo  ()){
#line 1554 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(plr_iHiScore  > m_iHighScore ){
#line 1555 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iHighScore  = plr_iHiScore ;
#line 1556 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1557 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1560 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_psGameStats  . ps_iScore  > m_iHighScore ){
#line 1562 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_iHighScore  > m_iBeatenHighScore ){
#line 1564 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iBeatenHighScore  = m_iHighScore ;
#line 1566 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_soHighScore  . Set3DParameters  (25.0f , 5.0f , 1.0f , 1.0f);
#line 1568 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1569 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1570 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1572 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString CPlayer::GetPredictName(void)const 
#line 1573 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1574 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(IsPredicted  ()){
#line 1575 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return "PREDICTED";
#line 1576 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(IsPredictor  ()){
#line 1577 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return "predictor";
#line 1578 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(GetFlags  () & ENF_WILLBEPREDICTED ){
#line 1579 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return "WILLBEPREDICTED";
#line 1580 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 1581 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return "no prediction";
#line 1582 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1583 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1585 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::Write_t(CTStream * ostr) 
#line 1586 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1587 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerEntity  :: Write_t  (ostr );
#line 1589 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ostr  -> WriteID_t  ("MSGS");
#line 1590 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX ctMsg  = m_acmiMessages  . Count  ();
#line 1591 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
(* ostr ) << ctMsg ;
#line 1592 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
for(INDEX iMsg  = 0;iMsg  < ctMsg ;iMsg  ++){
#line 1593 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_acmiMessages  [ iMsg  ] . Write_t  (* ostr );
#line 1594 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1595 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ostr  -> Write_t  (& m_psLevelStats  , sizeof  (m_psLevelStats ));
#line 1596 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ostr  -> Write_t  (& m_psLevelTotal  , sizeof  (m_psLevelTotal ));
#line 1597 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ostr  -> Write_t  (& m_psGameStats  , sizeof  (m_psGameStats ));
#line 1598 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ostr  -> Write_t  (& m_psGameTotal  , sizeof  (m_psGameTotal ));
#line 1599 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1601 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::Read_t(CTStream * istr) 
#line 1602 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1603 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerEntity  :: Read_t  (istr );
#line 1605 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ClearShellLaunchData  ();
#line 1606 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ClearBulletSprayLaunchData  ();
#line 1607 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ClearGoreSprayLaunchData  ();
#line 1609 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
istr  -> ExpectID_t  ("MSGS");
#line 1610 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX ctMsg ;
#line 1611 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
(* istr ) >> ctMsg ;
#line 1612 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_acmiMessages  . Clear  ();
#line 1613 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ctUnreadMessages  = 0;
#line 1614 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ctMsg  > 0){
#line 1615 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_acmiMessages  . Push  (ctMsg );
#line 1616 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
for(INDEX iMsg  = 0;iMsg  < ctMsg ;iMsg  ++){
#line 1617 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_acmiMessages  [ iMsg  ] . Read_t  (* istr );
#line 1618 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! m_acmiMessages  [ iMsg  ] . cmi_bRead ){
#line 1619 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ctUnreadMessages  ++;
#line 1620 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1621 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1622 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1624 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
istr  -> Read_t  (& m_psLevelStats  , sizeof  (m_psLevelStats ));
#line 1625 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
istr  -> Read_t  (& m_psLevelTotal  , sizeof  (m_psLevelTotal ));
#line 1626 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
istr  -> Read_t  (& m_psGameStats  , sizeof  (m_psGameStats ));
#line 1627 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
istr  -> Read_t  (& m_psGameTotal  , sizeof  (m_psGameTotal ));
#line 1630 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ValidateCharacter  ();
#line 1631 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString strDummy ;
#line 1632 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetPlayerAppearance  (& m_moRender  , & en_pcCharacter  , strDummy  , FALSE );
#line 1633 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ParseGender  (strDummy );
#line 1634 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  |= PLF_SYNCWEAPON ;
#line 1636 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetupLightSource  ();
#line 1637 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1640 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CLightSource * CPlayer::GetLightSource(void) 
#line 1641 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1642 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! IsPredictor  ()){
#line 1643 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return & m_lsLightSource ;
#line 1644 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 1645 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return NULL ;
#line 1646 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1647 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1650 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::SetPredictionTime(TIME tmAdvance) 
#line 1651 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1652 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmPredict  = _pTimer  -> CurrentTick  () + tmAdvance ;
#line 1653 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1656 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
TIME CPlayer::GetPredictionTime(void) 
#line 1657 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1658 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return m_tmPredict ;
#line 1659 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1662 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT CPlayer::GetPredictionRange(void) 
#line 1663 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1664 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return cli_fPredictPlayersRange ;
#line 1665 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1668 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::AddDependentsToPrediction(void) 
#line 1669 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1670 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penWeapons  -> AddToPrediction  ();
#line 1671 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penAnimator  -> AddToPrediction  ();
#line 1672 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penView  -> AddToPrediction  ();
#line 1673 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_pen3rdPersonView  -> AddToPrediction  ();
#line 1674 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1677 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
TIME CPlayer::GetStatsInGameTimeLevel(void) 
#line 1678 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1679 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_bEndOfLevel ){
#line 1680 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return m_psLevelStats  . ps_tmTime ;
#line 1681 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 1682 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return _pNetwork  -> GetGameTime  () - m_tmLevelStarted ;
#line 1683 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1684 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1685 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
TIME CPlayer::GetStatsInGameTimeGame(void) 
#line 1686 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1687 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_bEndOfLevel ){
#line 1688 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return m_psGameStats  . ps_tmTime ;
#line 1689 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 1690 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return m_psGameStats  . ps_tmTime  + (_pNetwork  -> GetGameTime  () - m_tmLevelStarted );
#line 1691 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1692 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1694 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT CPlayer::GetStatsRealWorldTime(void) 
#line 1695 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1696 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
time_t  timeNow ;
#line 1697 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_bEndOfLevel ){
#line 1698 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
timeNow  = m_iEndTime ;
#line 1699 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 1700 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
time  (& timeNow );
#line 1701 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1702 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return (FLOAT) difftime  (timeNow  , m_iStartTime );
#line 1703 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1705 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString CPlayer::GetStatsRealWorldStarted(void) 
#line 1706 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1707 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
struct  tm  * newtime ;
#line 1708 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
newtime  = localtime  (& m_iStartTime );
#line 1710 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
setlocale  (LC_ALL  , "");
#line 1711 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString strTimeline ;
#line 1712 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
char  achTimeLine  [ 256 ];
#line 1713 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strftime  (achTimeLine  , sizeof  (achTimeLine ) - 1 , "%a %x %H:%M" , newtime );
#line 1714 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strTimeline  = achTimeLine ;
#line 1715 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
setlocale  (LC_ALL  , "C");
#line 1716 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return strTimeline ;
#line 1717 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  void CPlayer::GetStats(CTString & strStats,const CompStatType csType,INDEX ctCharsPerRow) 
#line 1721 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1724 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(csType  == CST_SHORT ){
#line 1725 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetShortStats  (strStats );
#line 1726 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 1727 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ASSERT  (csType  == CST_DETAIL );
#line 1729 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  = "\n";
#line 1730 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
_ctAlignWidth  = Min  (ctCharsPerRow  , INDEX (60));
#line 1732 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_bCooperative ){
#line 1733 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_bSinglePlayer ){
#line 1734 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetDetailStatsSP  (strStats  , 0);
#line 1735 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 1736 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetDetailStatsCoop  (strStats );
#line 1737 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1738 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 1739 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetDetailStatsDM  (strStats );
#line 1740 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1741 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1742 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1745 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::GetShortStats(CTString & strStats) 
#line 1746 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1747 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  . PrintF  (TRANS  ("%s %s Score: %d Kills: %d/%d") , 
#line 1748 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetDifficultyString  () , TimeToString  (GetStatsInGameTimeLevel  ()) , 
#line 1749 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psLevelStats  . ps_iScore  , m_psLevelStats  . ps_iKills  , m_psLevelTotal  . ps_iKills );
#line 1750 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1753 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::GetDetailStatsDM(CTString & strStats) 
#line 1754 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1755 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
extern  INDEX SetAllPlayersStats  (INDEX iSortKey );
#line 1756 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
extern  CPlayer  * _apenPlayers  [ NET_MAXGAMEPLAYERS  ];
#line 1758 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const BOOL bFragMatch  = GetSP  () -> sp_bUseFrags ;
#line 1761 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const INDEX ctPlayers  = SetAllPlayersStats  (bFragMatch  ? 5 : 3);
#line 1764 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "^cFFFFFF%s:^r\n%s" , TRANS  ("TIME") , TimeToString  (_pNetwork  -> GetGameTime  ())));
#line 1765 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1768 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iMaxFrags  = LowerLimit  (INDEX (0));
#line 1769 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iMaxScore  = LowerLimit  (INDEX (0));
#line 1770 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{for(INDEX iPlayer  = 0;iPlayer  < ctPlayers ;iPlayer  ++){
#line 1771 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayer  * penPlayer  = _apenPlayers  [ iPlayer  ];
#line 1772 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iMaxFrags  = Max  (iMaxFrags  , penPlayer  -> m_psLevelStats  . ps_iKills );
#line 1773 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iMaxScore  = Max  (iMaxScore  , penPlayer  -> m_psLevelStats  . ps_iScore );
#line 1774 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}}
#line 1777 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const CSessionProperties  & sp  = * GetSP  ();
#line 1778 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(sp  . sp_iTimeLimit  > 0){
#line 1779 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fTimeLeft  = ClampDn  (sp  . sp_iTimeLimit  * 60.0f - _pNetwork  -> GetGameTime  () , 0.0f);
#line 1780 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "^cFFFFFF%s:^r\n%s" , TRANS  ("TIME LEFT") , TimeToString  (fTimeLeft )));
#line 1781 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1782 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1783 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(bFragMatch  && sp  . sp_iFragLimit  > 0){
#line 1784 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iFragsLeft  = ClampDn  (sp  . sp_iFragLimit  - iMaxFrags  , INDEX (0));
#line 1785 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "^cFFFFFF%s:^r\n%d" , TRANS  ("FRAGS LEFT") , iFragsLeft ));
#line 1786 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1787 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1788 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! bFragMatch  && sp  . sp_iScoreLimit  > 0){
#line 1789 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iScoreLeft  = ClampDn  (sp  . sp_iScoreLimit  - iMaxScore  , INDEX (0));
#line 1790 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "^cFFFFFF%s:^r\n%d" , TRANS  ("SCORE LEFT") , iScoreLeft ));
#line 1791 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1792 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1793 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1795 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString strRank  = TRANS  ("NO.");
#line 1796 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString strFrag  = bFragMatch  ? TRANS  ("FRAGS") : TRANS  ("SCORE");
#line 1797 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString strPing  = TRANS  ("PING");
#line 1798 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString strName  = TRANS  ("PLAYER");
#line 1799 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX ctRankChars  = Max  (strRank  . Length  () , INDEX (3));
#line 1800 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX ctFragChars  = Max  (strFrag  . Length  () , INDEX (7));
#line 1801 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX ctPingChars  = Max  (strPing  . Length  () , INDEX (5));
#line 1802 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX ctNameChars  = Max  (strName  . Length  () , INDEX (20));
#line 1805 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "^cFFFFFF";
#line 1806 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += PadStringRight  (strRank  , ctRankChars ) + " ";
#line 1807 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += PadStringLeft  (strFrag  , ctFragChars ) + " ";
#line 1808 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += PadStringLeft  (strPing  , ctPingChars ) + " ";
#line 1809 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += PadStringRight  (strName  , ctNameChars ) + " ";
#line 1810 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "^r";
#line 1811 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n\n";
#line 1812 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{for(INDEX iPlayer  = 0;iPlayer  < ctPlayers ;iPlayer  ++){
#line 1813 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString strLine ;
#line 1814 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayer  * penPlayer  = _apenPlayers  [ iPlayer  ];
#line 1815 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iPing  = ceil  (penPlayer  -> en_tmPing  * 1000.0f);
#line 1816 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iScore  = bFragMatch  ? penPlayer  -> m_psLevelStats  . ps_iKills  : penPlayer  -> m_psLevelStats  . ps_iScore ;
#line 1817 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString strName  = penPlayer  -> GetPlayerName  ();
#line 1819 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += PadStringRight  (CTString (0 , "%d" , iPlayer  + 1) , ctRankChars ) + " ";
#line 1820 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += PadStringLeft  (CTString (0 , "%d" , iScore ) , ctFragChars ) + " ";
#line 1821 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += PadStringLeft  (CTString (0 , "%d" , iPing ) , ctPingChars ) + " ";
#line 1822 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += PadStringRight  (strName  , ctNameChars ) + " ";
#line 1823 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1824 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}}
#line 1825 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1828 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::GetDetailStatsCoop(CTString & strStats) 
#line 1829 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1831 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "^b" + CenterString  (TRANS  ("YOUR STATS")) + "^r\n";
#line 1832 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1833 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetDetailStatsSP  (strStats  , 1);
#line 1836 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
extern  INDEX SetAllPlayersStats  (INDEX iSortKey );
#line 1837 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
extern  CPlayer  * _apenPlayers  [ NET_MAXGAMEPLAYERS  ];
#line 1838 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const INDEX ctPlayers  = SetAllPlayersStats  (3);
#line 1841 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlayerStats  psSquadLevel  = PlayerStats  ();
#line 1842 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlayerStats  psSquadGame  = PlayerStats  ();
#line 1843 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{for(INDEX iPlayer  = 0;iPlayer  < ctPlayers ;iPlayer  ++){
#line 1844 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayer  * penPlayer  = _apenPlayers  [ iPlayer  ];
#line 1846 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ASSERT  (penPlayer  != NULL );
#line 1847 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlayerStats  psLevel  = penPlayer  -> m_psLevelStats ;
#line 1848 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlayerStats  psGame  = penPlayer  -> m_psGameStats ;
#line 1849 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
psSquadLevel  . ps_iScore  += psLevel  . ps_iScore ;
#line 1850 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
psSquadLevel  . ps_iKills  += psLevel  . ps_iKills ;
#line 1851 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
psSquadLevel  . ps_iDeaths  += psLevel  . ps_iDeaths ;
#line 1852 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
psSquadLevel  . ps_iSecrets  += psLevel  . ps_iSecrets ;
#line 1853 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
psSquadGame  . ps_iScore  += psGame  . ps_iScore ;
#line 1854 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
psSquadGame  . ps_iKills  += psGame  . ps_iKills ;
#line 1855 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
psSquadGame  . ps_iDeaths  += psGame  . ps_iDeaths ;
#line 1856 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
psSquadGame  . ps_iSecrets  += psGame  . ps_iSecrets ;
#line 1857 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}}
#line 1860 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1861 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "^b" + CenterString  (TRANS  ("SQUAD TOTAL")) + "^r\n";
#line 1862 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1863 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += CTString (0 , "^cFFFFFF%s^r" , TranslateConst  (en_pwoWorld  -> GetName  () , 0));
#line 1864 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1865 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "  %s:\n%d" , TRANS  ("SCORE") , psSquadLevel  . ps_iScore ));
#line 1866 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1867 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "  %s:\n%d" , TRANS  ("DEATHS") , psSquadLevel  . ps_iDeaths ));
#line 1868 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1869 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "  %s:\n%d/%d" , TRANS  ("KILLS") , psSquadLevel  . ps_iKills  , m_psLevelTotal  . ps_iKills ));
#line 1870 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1871 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "  %s:\n%d/%d" , TRANS  ("SECRETS") , psSquadLevel  . ps_iSecrets  , m_psLevelTotal  . ps_iSecrets ));
#line 1872 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1873 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1874 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += CTString ("^cFFFFFF") + TRANS  ("TOTAL") + "^r\n";
#line 1875 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "  %s:\n%d" , TRANS  ("SCORE") , psSquadGame  . ps_iScore ));
#line 1876 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1877 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "  %s:\n%d" , TRANS  ("DEATHS") , psSquadGame  . ps_iDeaths ));
#line 1878 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1879 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "  %s:\n%d/%d" , TRANS  ("KILLS") , psSquadGame  . ps_iKills  , m_psGameTotal  . ps_iKills ));
#line 1880 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1881 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "  %s:\n%d/%d" , TRANS  ("SECRETS") , psSquadGame  . ps_iSecrets  , m_psGameTotal  . ps_iSecrets ));
#line 1882 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1883 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1886 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1887 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "^b" + CenterString  (TRANS  ("OTHER PLAYERS")) + "^r\n";
#line 1888 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1891 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{for(INDEX iPlayer  = 0;iPlayer  < ctPlayers ;iPlayer  ++){
#line 1892 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayer  * penPlayer  = _apenPlayers  [ iPlayer  ];
#line 1894 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(penPlayer  == this ){
#line 1896 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
continue ;
#line 1897 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1899 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "^cFFFFFF" + CenterString  (penPlayer  -> GetPlayerName  ()) + "^r\n\n";
#line 1900 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penPlayer  -> GetDetailStatsSP  (strStats  , 2);
#line 1901 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1902 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}}
#line 1903 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1906 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::GetDetailStatsSP(CTString & strStats,INDEX iCoopType) 
#line 1907 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1908 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(iCoopType  <= 1){
#line 1909 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_bEndOfGame ){
#line 1910 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_gdGameDifficulty  == CSessionProperties  :: GD_EXTREME ){
#line 1911 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += TRANS  ("^f4SERIOUS GAME FINISHED,\nMENTAL MODE IS NOW ENABLED!^F\n\n");
#line 1912 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(GetSP  () -> sp_bMental ){
#line 1913 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += TRANS  ("^f4YOU HAVE MASTERED THE GAME!^F\n\n");
#line 1914 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1915 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1916 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1918 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(iCoopType  <= 1){
#line 1920 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "^cFFFFFF%s:^r\n%d" , TRANS  ("TOTAL SCORE") , m_psGameStats  . ps_iScore ));
#line 1921 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1922 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "^cFFFFFF%s:^r\n%s" , TRANS  ("DIFFICULTY") , GetDifficultyString  ()));
#line 1923 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1924 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "^cFFFFFF%s:^r\n%s" , TRANS  ("STARTED") , GetStatsRealWorldStarted  ()));
#line 1925 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1926 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "^cFFFFFF%s:^r\n%s" , TRANS  ("PLAYING TIME") , TimeToString  (GetStatsRealWorldTime  ())));
#line 1927 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1928 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_psGameStats  . ps_iScore  <= plr_iHiScore ){
#line 1929 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "^cFFFFFF%s:^r\n%d" , TRANS  ("HI-SCORE") , plr_iHiScore ));
#line 1930 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 1931 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += TRANS  ("YOU BEAT THE HI-SCORE!");
#line 1932 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1933 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n\n";
#line 1934 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1937 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += CTString (0 , "^cFFFFFF%s^r" , TranslateConst  (en_pwoWorld  -> GetName  () , 0));
#line 1938 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1939 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(iCoopType  <= 1){
#line 1940 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_bEndOfLevel ){
#line 1941 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "  %s:\n%s" , TRANS  ("ESTIMATED TIME") , TimeToString  (m_tmEstTime )));
#line 1942 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1943 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "  %s:\n%d" , TRANS  ("TIME BONUS") , m_iTimeScore ));
#line 1944 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1945 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1946 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1949 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1950 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "  %s:\n%d" , TRANS  ("SCORE") , m_psLevelStats  . ps_iScore ));
#line 1951 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1952 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "  %s:\n%d/%d" , TRANS  ("KILLS") , m_psLevelStats  . ps_iKills  , m_psLevelTotal  . ps_iKills ));
#line 1953 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1954 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(iCoopType  >= 1){
#line 1955 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "  %s:\n%d" , TRANS  ("DEATHS") , m_psLevelStats  . ps_iDeaths  , m_psLevelTotal  . ps_iDeaths ));
#line 1956 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1957 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1958 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "  %s:\n%d/%d" , TRANS  ("SECRETS") , m_psLevelStats  . ps_iSecrets  , m_psLevelTotal  . ps_iSecrets ));
#line 1959 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1960 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(iCoopType  <= 1){
#line 1961 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "  %s:\n%s" , TRANS  ("TIME") , TimeToString  (GetStatsInGameTimeLevel  ())));
#line 1962 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1963 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1964 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1967 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += CTString ("^cFFFFFF") + TRANS  ("TOTAL") + "^r";
#line 1968 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1969 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "  %s:\n%d" , TRANS  ("SCORE") , m_psGameStats  . ps_iScore ));
#line 1970 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1971 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "  %s:\n%d/%d" , TRANS  ("KILLS") , m_psGameStats  . ps_iKills  , m_psGameTotal  . ps_iKills ));
#line 1972 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1973 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(iCoopType  >= 1){
#line 1974 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "  %s:\n%d" , TRANS  ("DEATHS") , m_psGameStats  . ps_iDeaths  , m_psGameTotal  . ps_iDeaths ));
#line 1975 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1976 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1977 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "  %s:\n%d/%d" , TRANS  ("SECRETS") , m_psGameStats  . ps_iSecrets  , m_psGameTotal  . ps_iSecrets ));
#line 1978 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1979 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(iCoopType  <= 1){
#line 1980 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += AlignString  (CTString (0 , "  %s:\n%s" , TRANS  ("GAME TIME") , TimeToString  (GetStatsInGameTimeGame  ())));
#line 1981 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1982 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1983 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += "\n";
#line 1986 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(iCoopType  < 1){
#line 1987 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_strLevelStats  != ""){
#line 1988 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  += CTString ("^cFFFFFF") + TRANS  ("Per level statistics") + "^r\n\n" + m_strLevelStats ;
#line 1989 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1990 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 1991 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 1994 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::GetGameSpyPlayerInfo(INDEX iPlayer,CTString & strOut) 
#line 1995 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 1996 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString strKey ;
#line 1997 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strKey  . PrintF  ("\\player_%d\\%s" , iPlayer  , (const char  *) GetPlayerName  ());
#line 1998 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strOut  += strKey ;
#line 1999 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_bUseFrags ){
#line 2000 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strKey  . PrintF  ("\\frags_%d\\%d" , iPlayer  , m_psLevelStats  . ps_iKills );
#line 2001 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strOut  += strKey ;
#line 2002 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 2003 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strKey  . PrintF  ("\\frags_%d\\%d" , iPlayer  , m_psLevelStats  . ps_iScore );
#line 2004 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strOut  += strKey ;
#line 2005 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2006 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strKey  . PrintF  ("\\ping_%d\\%d" , iPlayer  , INDEX (ceil  (en_tmPing  * 1000.0f)));
#line 2007 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strOut  += strKey ;
#line 2008 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2011 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL CPlayer::HasMessage(const CTFileName & fnmMessage) 
#line 2012 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2013 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ULONG  ulHash  = fnmMessage  . GetHash  ();
#line 2014 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX ctMsg  = m_acmiMessages  . Count  ();
#line 2015 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
for(INDEX iMsg  = 0;iMsg  < ctMsg ;iMsg  ++){
#line 2016 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_acmiMessages  [ iMsg  ] . cmi_ulHash  == ulHash  && 
#line 2017 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_acmiMessages  [ iMsg  ] . cmi_fnmFileName  == fnmMessage ){
#line 2018 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE ;
#line 2019 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2020 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2021 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return FALSE ;
#line 2022 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2025 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::ReceiveComputerMessage(const CTFileName & fnmMessage,ULONG ulFlags) 
#line 2026 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2028 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(HasMessage  (fnmMessage )){
#line 2030 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ;
#line 2031 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2033 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CCompMessageID  & cmi  = m_acmiMessages  . Push  ();
#line 2034 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
cmi  . NewMessage  (fnmMessage );
#line 2035 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
cmi  . cmi_bRead  = ulFlags  & CMF_READ ;
#line 2036 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! (ulFlags  & CMF_READ )){
#line 2037 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ctUnreadMessages  ++;
#line 2038 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
cmp_bUpdateInBackground  = TRUE ;
#line 2039 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2040 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! (ulFlags  & CMF_READ ) && (ulFlags  & CMF_ANALYZE )){
#line 2041 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmAnalyseEnd  = _pTimer  -> CurrentTick  () + 2.0f;
#line 2042 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_soMessage  . Set3DParameters  (25.0f , 5.0f , 1.0f , 1.0f);
#line 2043 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soMessage  , SOUND_INFO  , SOF_3D  | SOF_VOLUMETRIC  | SOF_LOCAL );
#line 2044 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2045 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2047 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::SayVoiceMessage(const CTFileName & fnmMessage) 
#line 2048 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2049 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSettings  () -> ps_ulFlags  & PSF_NOQUOTES ){
#line 2050 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ;
#line 2051 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2052 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetSpeakMouthPitch  ();
#line 2053 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soSpeech  , fnmMessage  , SOF_3D  | SOF_VOLUMETRIC );
#line 2054 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2057 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::CheatAllMessagesDir(const CTString & strDir,ULONG ulFlags) 
#line 2058 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2060 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CDynamicStackArray  < CTFileName > afnmDir ;
#line 2061 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
MakeDirList  (afnmDir  , strDir  , "*.txt" , DLI_RECURSIVE );
#line 2064 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
for(INDEX i  = 0;i  < afnmDir  . Count  ();i  ++){
#line 2065 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTFileName fnm  = afnmDir  [ i  ];
#line 2067 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ReceiveComputerMessage  (fnm  , ulFlags );
#line 2068 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2069 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2072 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::CheatAllMessages(void) 
#line 2073 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2077 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CheatAllMessagesDir  ("Data\\Messages\\weapons\\" , 0);
#line 2078 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CheatAllMessagesDir  ("Data\\Messages\\enemies\\" , 0);
#line 2079 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CheatAllMessagesDir  ("DataMP\\Messages\\enemies\\" , 0);
#line 2080 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CheatAllMessagesDir  ("DataMP\\Messages\\information\\" , 0);
#line 2081 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CheatAllMessagesDir  ("DataMP\\Messages\\statistics\\" , 0);
#line 2082 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CheatAllMessagesDir  ("DataMP\\Messages\\weapons\\" , 0);
#line 2083 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CheatAllMessagesDir  ("DataMP\\Messages\\background\\" , 0);
#line 2084 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2087 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::ItemPicked(const CTString & strName,FLOAT fAmmount) 
#line 2088 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2090 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(_pTimer  -> CurrentTick  () > m_tmLastPicked  + PICKEDREPORT_TIME ){
#line 2092 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_strPickedName  = "";
#line 2094 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fPickedMana  = 0;
#line 2095 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2097 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_strPickedName  != strName ){
#line 2099 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_strPickedName  = strName ;
#line 2101 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fPickedAmmount  = 0;
#line 2102 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2104 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fPickedAmmount  += fAmmount ;
#line 2105 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmLastPicked  = _pTimer  -> CurrentTick  ();
#line 2106 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2109 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::SetupLightSource(void) 
#line 2110 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2112 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CLightSource  lsNew ;
#line 2113 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
lsNew  . ls_ulFlags  = LSF_NONPERSISTENT  | LSF_DYNAMIC ;
#line 2114 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
lsNew  . ls_rHotSpot  = 1.0f;
#line 2115 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
lsNew  . ls_colColor  = C_WHITE ;
#line 2116 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
lsNew  . ls_rFallOff  = 2.5f;
#line 2117 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
lsNew  . ls_plftLensFlare  = NULL ;
#line 2118 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
lsNew  . ls_ubPolygonalMask  = 0;
#line 2119 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
lsNew  . ls_paoLightAnimation  = & m_aoLightAnimation ;
#line 2121 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_lsLightSource  . ls_penEntity  = this ;
#line 2122 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_lsLightSource  . SetLightSource  (lsNew );
#line 2123 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2126 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::PlayLightAnim(INDEX iAnim,ULONG ulFlags) {
#line 2127 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_aoLightAnimation  . GetData  () != NULL ){
#line 2128 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_aoLightAnimation  . PlayAnim  (iAnim  , ulFlags );
#line 2129 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2130 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2133 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL CPlayer::AdjustShadingParameters(FLOAT3D & vLightDirection,COLOR & colLight,COLOR & colAmbient) 
#line 2134 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2135 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(cht_bDumpPlayerShading )
#line 2136 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2137 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ANGLE3D a3dHPB ;
#line 2138 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
DirectionVectorToAngles  (- vLightDirection  , a3dHPB );
#line 2139 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
UBYTE  ubAR  , ubAG  , ubAB ;
#line 2140 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
UBYTE  ubCR  , ubCG  , ubCB ;
#line 2141 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ColorToRGB  (colAmbient  , ubAR  , ubAG  , ubAB );
#line 2142 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ColorToRGB  (colLight  , ubCR  , ubCG  , ubCB );
#line 2143 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPrintF  ("Ambient: %d,%d,%d, Color: %d,%d,%d, Direction HPB (%g,%g,%g)\n" , 
#line 2144 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ubAR  , ubAG  , ubAB  , ubCR  , ubCG  , ubCB  , a3dHPB  (1) , a3dHPB  (2) , a3dHPB  (3));
#line 2145 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2148 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! GetSP  () -> sp_bCooperative ){
#line 2149 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
UBYTE  ubH  , ubS  , ubV ;
#line 2150 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ColorToHSV  (colAmbient  , ubH  , ubS  , ubV );
#line 2151 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ubV  < 22){
#line 2152 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ubV  = 22;
#line 2153 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
colAmbient  = HSVToColor  (ubH  , ubS  , ubV );
#line 2154 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2155 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2157 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return CPlayerEntity  :: AdjustShadingParameters  (vLightDirection  , colLight  , colAmbient );
#line 2158 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2161 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CModelObject * CPlayer::GetModelForRendering(void) 
#line 2162 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2164 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! (m_ulFlags  & PLF_INITIALIZED )){
#line 2166 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return GetModelObject  ();
#line 2167 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2170 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlacement3D plView ;
#line 2171 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plView  . Lerp  (en_plLastViewpoint  , en_plViewpoint  , _pTimer  -> GetLerpFactor  ());
#line 2173 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerAnimator  &) * m_penAnimator ) . BodyAndHeadOrientation  (plView );
#line 2174 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerAnimator  &) * m_penAnimator ) . OnPreRender  ();
#line 2176 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_moRender  . Synchronize  (* GetModelObject  ());
#line 2177 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_ulFlags  & PLF_SYNCWEAPON ){
#line 2178 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  &= ~ PLF_SYNCWEAPON ;
#line 2179 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetPlayerAnimator  () -> SyncWeapon  ();
#line 2180 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2182 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT tmNow  = _pTimer  -> GetLerpedCurrentTick  ();
#line 2184 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fFading  = 1.0f;
#line 2185 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_tmFadeStart  != 0){
#line 2186 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fFactor  = (tmNow  - m_tmFadeStart ) / 5.0f;
#line 2187 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fFactor  = Clamp  (fFactor  , 0.0f , 1.0f);
#line 2188 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fFading  *= fFactor ;
#line 2189 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2192 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT tmSpawnInvulnerability  = GetSP  () -> sp_tmSpawnInvulnerability ;
#line 2193 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(tmSpawnInvulnerability  > 0 && tmNow  - m_tmSpawned  < tmSpawnInvulnerability ){
#line 2195 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fDelta  = tmNow  - m_tmSpawned ;
#line 2196 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fFading  *= 0.75f + 0.25f * Sin  (fDelta  / 0.5f * 360);
#line 2197 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2199 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
COLOR colAlpha  = m_moRender  . mo_colBlendColor ;
#line 2200 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
colAlpha  = (colAlpha  & 0xffffff00) + (COLOR (fFading  * 0xff) & 0xff);
#line 2201 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_moRender  . mo_colBlendColor  = colAlpha ;
#line 2204 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_ulFlags  & PLF_NOTCONNECTED ){
#line 2206 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fFading  *= 0.25f + 0.25f * Sin  (tmNow  / 2.0f * 360);
#line 2208 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(m_tmInvisibility  > tmNow ){
#line 2209 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fIntensity  = 0.0f;
#line 2210 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if((m_tmInvisibility  - tmNow ) < 3.0f)
#line 2211 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2212 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fIntensity  = 0.5f - 0.5f * cos  ((m_tmInvisibility  - tmNow ) * (6.0f * 3.1415927f / 3.0f));
#line 2213 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2214 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(_ulPlayerRenderingMask  == 1 << GetMyPlayerIndex  ()){
#line 2215 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
colAlpha  = (colAlpha  & 0xffffff00) | (INDEX) (INVISIBILITY_ALPHA_LOCAL  + (FLOAT) (254 - INVISIBILITY_ALPHA_LOCAL ) * fIntensity );
#line 2216 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(TRUE ){
#line 2217 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if((m_tmInvisibility  - tmNow ) < 1.28f){
#line 2218 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
colAlpha  = (colAlpha  & 0xffffff00) | (INDEX) (INVISIBILITY_ALPHA_REMOTE  + (FLOAT) (254 - INVISIBILITY_ALPHA_REMOTE ) * fIntensity );
#line 2219 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(TRUE ){
#line 2220 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
colAlpha  = (colAlpha  & 0xffffff00) | INVISIBILITY_ALPHA_REMOTE ;
#line 2221 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2222 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2223 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_moRender  . mo_colBlendColor  = colAlpha ;
#line 2224 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2227 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return & m_moRender ;
#line 2228 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2231 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
class CPlayerActionMarker * CPlayer::GetActionMarker(void) {
#line 2232 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return (CPlayerActionMarker  *) & * m_penActionMarker ;
#line 2233 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2236 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::FindMusicHolder(void) 
#line 2237 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2238 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_penMainMusicHolder  == NULL ){
#line 2239 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penMainMusicHolder  = _pNetwork  -> GetEntityWithName  ("MusicHolder" , 0);
#line 2240 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2241 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2244 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::UpdateLevelStats(void) 
#line 2245 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2247 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psLevelStats  = PlayerStats  ();
#line 2250 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_penMainMusicHolder  == NULL ){
#line 2251 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ;
#line 2252 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2253 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CMusicHolder  & mh  = (CMusicHolder  &) * m_penMainMusicHolder ;
#line 2256 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(mh  . m_ctEnemiesInWorld  == 0){
#line 2257 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
mh  . CountEnemies  ();
#line 2258 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2260 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psLevelTotal  . ps_iKills  = mh  . m_ctEnemiesInWorld ;
#line 2261 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psGameTotal  . ps_iKills  += mh  . m_ctEnemiesInWorld ;
#line 2262 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psLevelTotal  . ps_iSecrets  = mh  . m_ctSecretsInWorld ;
#line 2263 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psGameTotal  . ps_iSecrets  += mh  . m_ctSecretsInWorld ;
#line 2264 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2267 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL CPlayer::IsFuss(void) 
#line 2268 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2270 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_penMainMusicHolder  == NULL ){
#line 2272 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return FALSE ;
#line 2273 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2275 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ((CMusicHolder  *) & * m_penMainMusicHolder ) -> m_cenFussMakers  . Count  () > 0;
#line 2276 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2278 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::SetDefaultMouthPitch(void) 
#line 2279 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2280 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_soMouth  . Set3DParameters  (50.0f , 10.0f , 1.0f , 1.0f);
#line 2281 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2282 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::SetRandomMouthPitch(FLOAT fMin,FLOAT fMax) 
#line 2283 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2284 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_soMouth  . Set3DParameters  (50.0f , 10.0f , 1.0f , Lerp  (fMin  , fMax  , FRnd  ()));
#line 2285 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2286 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::SetSpeakMouthPitch(void) 
#line 2287 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2288 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_soSpeech  . Set3DParameters  (50.0f , 10.0f , 2.0f , 1.0f);
#line 2289 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2292 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::ApplyShaking(CPlacement3D & plViewer) 
#line 2293 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2295 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fT  = _pTimer  -> GetLerpedCurrentTick  ();
#line 2296 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(fT  < m_tmChainShakeEnd )
#line 2297 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2298 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fChainsawShakeDX  = 0.3f * m_fChainShakeStrength  * SinFast  (fT  * m_fChainShakeFreqMod  * 3300.0f);
#line 2299 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fChainsawShakeDY  = 0.3f * m_fChainShakeStrength  * SinFast  (fT  * m_fChainShakeFreqMod  * 2900.0f);
#line 2301 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plViewer  . pl_PositionVector  (1) += m_fChainsawShakeDX ;
#line 2302 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plViewer  . pl_PositionVector  (3) += m_fChainsawShakeDY ;
#line 2303 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2305 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(fT  < m_tmBulletShakeEnd )
#line 2306 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2307 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fBulletShakeDX  = - (1.0f * m_fBulletShakeStrengthX  * MCosFast  (fT  * m_fBulletShakeFreqMod  * 90.0f));
#line 2308 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fBulletShakeDY  = 1.0f * m_fBulletShakeStrengthY  * MCosFast  (fT  * m_fBulletShakeFreqMod  * 90.0f);
#line 2310 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plViewer  . pl_PositionVector  (1) += m_fBulletShakeDX ;
#line 2311 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plViewer  . pl_PositionVector  (2) += m_fBulletShakeDY ;
#line 2312 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2314 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CWorldSettingsController  * pwsc  = GetWSC  (this );
#line 2315 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pwsc  == NULL  || pwsc  -> m_tmShakeStarted  < 0){
#line 2316 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ;
#line 2317 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2319 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
TIME  tm  = _pTimer  -> GetLerpedCurrentTick  () - pwsc  -> m_tmShakeStarted ;
#line 2320 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(tm  < 0){
#line 2321 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ;
#line 2322 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2323 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fDistance  = (plViewer  . pl_PositionVector  - pwsc  -> m_vShakePos ) . Length  ();
#line 2324 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fIntensity  = IntensityAtDistance  (pwsc  -> m_fShakeFalloff  , 0 , fDistance );
#line 2325 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fShakeY  , fShakeB  , fShakeZ ;
#line 2326 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! pwsc  -> m_bShakeFadeIn ){
#line 2327 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fShakeY  = SinFast  (tm  * pwsc  -> m_tmShakeFrequencyY  * 360.0f) * 
#line 2328 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
exp  (- tm  * (pwsc  -> m_fShakeFade )) * 
#line 2329 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fIntensity  * pwsc  -> m_fShakeIntensityY ;
#line 2330 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fShakeB  = SinFast  (tm  * pwsc  -> m_tmShakeFrequencyB  * 360.0f) * 
#line 2331 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
exp  (- tm  * (pwsc  -> m_fShakeFade )) * 
#line 2332 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fIntensity  * pwsc  -> m_fShakeIntensityB ;
#line 2333 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fShakeZ  = SinFast  (tm  * pwsc  -> m_tmShakeFrequencyZ  * 360.0f) * 
#line 2334 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
exp  (- tm  * (pwsc  -> m_fShakeFade )) * 
#line 2335 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fIntensity  * pwsc  -> m_fShakeIntensityZ ;
#line 2336 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 2337 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT ootm  = 1.0f / tm ;
#line 2338 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fShakeY  = SinFast  (tm  * pwsc  -> m_tmShakeFrequencyY  * 360.0f) * 
#line 2339 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
exp  ((tm  - 2) * ootm  * (pwsc  -> m_fShakeFade )) * 
#line 2340 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fIntensity  * pwsc  -> m_fShakeIntensityY ;
#line 2341 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fShakeB  = SinFast  (tm  * pwsc  -> m_tmShakeFrequencyB  * 360.0f) * 
#line 2342 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
exp  ((tm  - 2) * ootm  * (pwsc  -> m_fShakeFade )) * 
#line 2343 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fIntensity  * pwsc  -> m_fShakeIntensityB ;
#line 2344 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fShakeZ  = SinFast  (tm  * pwsc  -> m_tmShakeFrequencyZ  * 360.0f) * 
#line 2345 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
exp  ((tm  - 2) * ootm  * (pwsc  -> m_fShakeFade )) * 
#line 2346 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fIntensity  * pwsc  -> m_fShakeIntensityZ ;
#line 2347 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2348 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plViewer  . pl_PositionVector  (2) += fShakeY ;
#line 2349 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plViewer  . pl_PositionVector  (3) += fShakeZ ;
#line 2350 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plViewer  . pl_OrientationAngle  (3) += fShakeB ;
#line 2352 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2354 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
COLOR CPlayer::GetWorldGlaring(void) 
#line 2355 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2356 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CWorldSettingsController  * pwsc  = GetWSC  (this );
#line 2357 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pwsc  == NULL  || pwsc  -> m_tmGlaringStarted  < 0){
#line 2358 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return 0;
#line 2359 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2360 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
TIME  tm  = _pTimer  -> GetLerpedCurrentTick  ();
#line 2361 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fRatio  = CalculateRatio  (tm  , pwsc  -> m_tmGlaringStarted  , pwsc  -> m_tmGlaringEnded  , 
#line 2362 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pwsc  -> m_fGlaringFadeInRatio  , pwsc  -> m_fGlaringFadeOutRatio );
#line 2363 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
COLOR colResult  = (pwsc  -> m_colGlade  & 0xFFFFFF00) | (UBYTE  (fRatio  * 255.0f));
#line 2364 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return colResult ;
#line 2365 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2367 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::RenderScroll(CDrawPort * pdp) 
#line 2368 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2369 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CWorldSettingsController  * pwsc  = GetWSC  (this );
#line 2370 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pwsc  != NULL  && pwsc  -> m_penScrollHolder  != NULL )
#line 2371 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2372 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CScrollHolder  & sch  = (CScrollHolder  &) * pwsc  -> m_penScrollHolder ;
#line 2373 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
sch  . Credits_Render  (& sch  , pdp );
#line 2374 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2375 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2377 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::RenderCredits(CDrawPort * pdp) 
#line 2378 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2379 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CWorldSettingsController  * pwsc  = GetWSC  (this );
#line 2380 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pwsc  != NULL  && pwsc  -> m_penCreditsHolder  != NULL )
#line 2381 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2382 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CCreditsHolder  & cch  = (CCreditsHolder  &) * pwsc  -> m_penCreditsHolder ;
#line 2383 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
cch  . Credits_Render  (& cch  , pdp );
#line 2384 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2385 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2387 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::RenderTextFX(CDrawPort * pdp) 
#line 2388 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2389 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CWorldSettingsController  * pwsc  = GetWSC  (this );
#line 2390 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pwsc  != NULL  && pwsc  -> m_penTextFXHolder  != NULL )
#line 2391 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2392 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTextFXHolder  & tfx  = (CTextFXHolder  &) * pwsc  -> m_penTextFXHolder ;
#line 2393 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
tfx  . TextFX_Render  (& tfx  , pdp );
#line 2394 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2395 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2397 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::RenderHudPicFX(CDrawPort * pdp) 
#line 2398 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2399 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CWorldSettingsController  * pwsc  = GetWSC  (this );
#line 2400 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pwsc  != NULL  && pwsc  -> m_penHudPicFXHolder  != NULL )
#line 2401 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2402 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CHudPicHolder  & hpfx  = (CHudPicHolder  &) * pwsc  -> m_penHudPicFXHolder ;
#line 2403 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
hpfx  . HudPic_Render  (& hpfx  , pdp );
#line 2404 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2405 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2407 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::Glare(FLOAT fStart,FLOAT fEnd,FLOAT fFinR,FLOAT fFoutR) 
#line 2408 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2409 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CWorldSettingsController  * pwsc  = GetWSC  (this );
#line 2410 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pwsc  != NULL )
#line 2411 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2412 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pwsc  -> m_colGlade  = C_WHITE ;
#line 2413 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pwsc  -> m_tmGlaringStarted  = _pTimer  -> CurrentTick  () + fStart ;
#line 2414 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pwsc  -> m_tmGlaringEnded  = pwsc  -> m_tmGlaringStarted  + fEnd ;
#line 2415 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pwsc  -> m_fGlaringFadeInRatio  = fFinR ;
#line 2416 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pwsc  -> m_fGlaringFadeOutRatio  = fFoutR ;
#line 2417 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2418 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2426 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::SetupView(CDrawPort * pdp,CAnyProjection3D & apr,CEntity * & penViewer,
#line 2427 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlacement3D & plViewer,COLOR & colBlend,BOOL bCamera) 
#line 2428 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2430 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetLerpedAbsoluteViewPlacement  (plViewer );
#line 2431 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ASSERT  (IsValidFloat  (plViewer  . pl_OrientationAngle  (1)) && IsValidFloat  (plViewer  . pl_OrientationAngle  (2)) && IsValidFloat  (plViewer  . pl_OrientationAngle  (3)));
#line 2433 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penViewer  = GetViewEntity  ();
#line 2435 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iViewState  = m_iViewState ;
#line 2437 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_penCamera  != NULL  && bCamera ){
#line 2438 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iViewState  = PVT_SCENECAMERA ;
#line 2439 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plViewer  = m_penCamera  -> GetLerpedPlacement  ();
#line 2440 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penViewer  = m_penCamera ;
#line 2441 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2444 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPerspectiveProjection3D  prPerspectiveProjection ;
#line 2445 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plr_fFOV  = Clamp  (plr_fFOV  , 1.0f , 160.0f);
#line 2446 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ANGLE aFOV  = plr_fFOV ;
#line 2448 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! GetSP  () -> sp_bCooperative ){
#line 2449 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
aFOV  = 90.0f;
#line 2450 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2452 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if((((CPlayerWeapons  &) * m_penWeapons ) . m_iCurrentWeapon  == WEAPON_SNIPER ) || (((CPlayerWeapons  &) * m_penWeapons ) . m_iCurrentWeapon  == WEAPON_TOMMYGUN ) || (((CPlayerWeapons  &) * m_penWeapons ) . m_iCurrentWeapon  == WEAPON_ROCKETLAUNCHER ) || (((CPlayerWeapons  &) * m_penWeapons ) . m_iCurrentWeapon  == WEAPON_IRONCANNON ))
#line 2453 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2454 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
aFOV  = Lerp  (((CPlayerWeapons  &) * m_penWeapons ) . m_fSniperFOVlast  , 
#line 2455 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . m_fSniperFOV  , 
#line 2456 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
_pTimer  -> GetLerpFactor  ());
#line 2457 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2459 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_pstState  == PST_DIVE  && iViewState  == PVT_PLAYEREYES ){
#line 2460 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
TIME  tmNow  = _pTimer  -> GetLerpedCurrentTick  ();
#line 2461 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
aFOV  += sin  (tmNow  * 0.79f) * 2.0f;
#line 2462 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2463 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ApplyShaking  (plViewer );
#line 2465 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
colBlend  = 0;
#line 2466 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(iViewState  == PVT_SCENECAMERA ){
#line 2467 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CCamera  * pcm  = (CCamera  *) & * m_penCamera ;
#line 2468 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
prPerspectiveProjection  . FOVL  () = 
#line 2469 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Lerp  (pcm  -> m_fLastFOV  , pcm  -> m_fFOV  , _pTimer  -> GetLerpFactor  ());
#line 2470 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pcm  -> m_tmDelta  > 0.001f){
#line 2471 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fFactor  = (_pTimer  -> GetLerpedCurrentTick  () - pcm  -> m_tmAtMarker ) / pcm  -> m_tmDelta ;
#line 2472 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fFactor  = Clamp  (fFactor  , 0.0f , 1.0f);
#line 2473 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
colBlend  = LerpColor  (pcm  -> m_colFade0  , pcm  -> m_colFade1  , fFactor );
#line 2474 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 2475 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
colBlend  = pcm  -> m_colFade0 ;
#line 2476 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2477 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 2478 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
prPerspectiveProjection  . FOVL  () = aFOV ;
#line 2479 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2480 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
prPerspectiveProjection  . ScreenBBoxL  () = FLOATaabbox2D  (
#line 2481 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT2D  (0.0f , 0.0f) , 
#line 2482 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT2D  ((FLOAT) pdp  -> GetWidth  () , (FLOAT) pdp  -> GetHeight  ())
#line 2483 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
);
#line 2485 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plr_fFrontClipDistance  = Clamp  (plr_fFrontClipDistance  , 0.05f , 0.50f);
#line 2486 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fFCD  = plr_fFrontClipDistance ;
#line 2488 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_pstState  == PST_SWIM  && iViewState  == PVT_PLAYEREYES ){fFCD  *= 0.6666f;}
#line 2489 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
prPerspectiveProjection  . FrontClipDistanceL  () = fFCD ;
#line 2490 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
prPerspectiveProjection  . AspectRatioL  () = 1.0f;
#line 2492 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
apr  = prPerspectiveProjection ;
#line 2493 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
apr  -> ViewerPlacementL  () = plViewer ;
#line 2494 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
apr  -> ObjectPlacementL  () = CPlacement3D (FLOAT3D (0 , 0 , 0) , ANGLE3D (0 , 0 , 0));
#line 2495 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
prPlayerProjection  = apr ;
#line 2496 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
prPlayerProjection  -> Prepare  ();
#line 2497 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2500 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::ListenFromEntity(CEntity * penListener,const CPlacement3D & plSound) 
#line 2501 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2502 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOATmatrix3D mRotation ;
#line 2503 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
MakeRotationMatrixFast  (mRotation  , plSound  . pl_OrientationAngle );
#line 2504 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
sliSound  . sli_vPosition  = plSound  . pl_PositionVector ;
#line 2505 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
sliSound  . sli_mRotation  = mRotation ;
#line 2506 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
sliSound  . sli_fVolume  = 1.0f;
#line 2507 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
sliSound  . sli_vSpeed  = en_vCurrentTranslationAbsolute ;
#line 2508 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
sliSound  . sli_penEntity  = penListener ;
#line 2509 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_pstState  == PST_DIVE ){
#line 2510 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
sliSound  . sli_fFilter  = 20.0f;
#line 2511 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 2512 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
sliSound  . sli_fFilter  = 0.0f;
#line 2513 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2514 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iEnv  = 0;
#line 2516 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CBrushSector  * pbsc  = penListener  -> GetSectorFromPoint  (plSound  . pl_PositionVector );
#line 2519 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pbsc  != NULL ){
#line 2520 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iEnv  = pbsc  -> GetEnvironmentType  ();
#line 2521 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2524 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CEnvironmentType  & et  = GetWorld  () -> wo_aetEnvironmentTypes  [ iEnv  ];
#line 2525 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
sliSound  . sli_iEnvironmentType  = et  . et_iType ;
#line 2526 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
sliSound  . sli_fEnvironmentSize  = et  . et_fSize ;
#line 2527 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
_pSound  -> Listen  (sliSound );
#line 2528 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2531 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::RenderDummyView(CDrawPort * pdp) 
#line 2532 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2534 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> Fill  (C_BLACK  | CT_OPAQUE );
#line 2537 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! GetSP  () -> sp_bSinglePlayer ){
#line 2539 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PIX  pixDPWidth  = pdp  -> GetWidth  ();
#line 2540 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PIX  pixDPHeight  = pdp  -> GetHeight  ();
#line 2541 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fScale  = (FLOAT) pixDPWidth  / 640.0f;
#line 2542 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> SetFont  (_pfdDisplayFont );
#line 2543 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> SetTextScaling  (fScale );
#line 2544 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> SetTextAspect  (1.0f);
#line 2545 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString strMsg ;
#line 2546 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strMsg  . PrintF  (TRANS  ("%s connected") , GetPlayerName  ());
#line 2547 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> PutTextCXY  (strMsg  , pixDPWidth  * 0.5f , pixDPHeight  * 0.5f , SE_COL_PURPLE_NEUTRAL_LT  | CT_OPAQUE );
#line 2548 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2549 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2552 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::RenderPlayerView(CDrawPort * pdp,BOOL bShowExtras) 
#line 2553 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2555 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CAnyProjection3D  apr ;
#line 2556 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CEntity  * penViewer ;
#line 2557 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlacement3D plViewer ;
#line 2558 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
COLOR colBlend ;
#line 2561 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
for(INDEX iEye  = STEREO_LEFT ;iEye  <= (Stereo_IsEnabled  () ? STEREO_RIGHT  : STEREO_LEFT );iEye  ++){
#line 2564 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetupView  (pdp  , apr  , penViewer  , plViewer  , colBlend  , FALSE );
#line 2567 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Stereo_SetBuffer  (iEye );
#line 2568 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Stereo_AdjustProjection  (* apr  , iEye  , 1);
#line 2571 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ASSERT  (IsValidFloat  (plViewer  . pl_OrientationAngle  (1)) && IsValidFloat  (plViewer  . pl_OrientationAngle  (2)) && IsValidFloat  (plViewer  . pl_OrientationAngle  (3)));
#line 2572 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
_ulPlayerRenderingMask  = 1 << GetMyPlayerIndex  ();
#line 2573 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
RenderView  (* en_pwoWorld  , * penViewer  , apr  , * pdp );
#line 2574 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
_ulPlayerRenderingMask  = 0;
#line 2576 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(iEye  == STEREO_LEFT ){
#line 2578 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ListenFromEntity  (this  , plViewer );
#line 2579 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2581 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
RenderScroll  (pdp );
#line 2582 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
RenderTextFX  (pdp );
#line 2583 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
RenderCredits  (pdp );
#line 2584 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
RenderHudPicFX  (pdp );
#line 2586 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(hud_bShowAll  && bShowExtras ){
#line 2588 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlacement3D plLight  (_vViewerLightDirection  , ANGLE3D (0 , 0 , 0));
#line 2589 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plLight  . AbsoluteToRelative  (plViewer );
#line 2590 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
RenderHUD  (* (CPerspectiveProjection3D  *) (CProjection3D  *) apr  , pdp  , 
#line 2591 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plLight  . pl_PositionVector  , _colViewerLight  , _colViewerAmbient  , 
#line 2592 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penViewer  == this  && (GetFlags  () & ENF_ALIVE ) , iEye );
#line 2593 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2594 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2597 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Stereo_SetBuffer  (STEREO_BOTH );
#line 2600 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PIX  pixDPWidth  = pdp  -> GetWidth  ();
#line 2601 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PIX  pixDPHeight  = pdp  -> GetHeight  ();
#line 2602 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fScale  = (FLOAT) pixDPWidth  / 640.0f;
#line 2604 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayer  * pen  = (CPlayer  *) GetPredictionTail  ();
#line 2606 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ULONG  ulR  = 255 , ulG  = 255 , ulB  = 255;
#line 2607 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ULONG  ulA  = pen  -> m_fDamageAmmount  * 5.0f;
#line 2608 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ULONG  ulA1  = pen  -> m_fDamageAmmount  * 50.0f;
#line 2609 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ULONG  ulA2  = pen  -> m_fDamageAmmount  * 20.0f;
#line 2610 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT f_Damage  = m_fDamageAmmount ;
#line 2613 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT tmSinceWounding  = _pTimer  -> CurrentTick  () - pen  -> m_tmWoundedTime ;
#line 2614 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(f_Damage  < 20.0f){
#line 2618 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ulA1  = ClampUp  (ulA1  , (ULONG ) 224);
#line 2620 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> InitTexture  (& _toBloodScreen1 );
#line 2621 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> AddTexture  (0 , 0 , pixDPWidth  , pixDPHeight  , C_WHITE  | ulA1 );
#line 2622 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> FlushRenderingQueue  ();
#line 2624 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(f_Damage  < 30.0f){
#line 2625 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(tmSinceWounding  < 4.0f){
#line 2627 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(tmSinceWounding  < 0.001f){ulA2  = (ulA2  + 64) / 2;
#line 2628 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ulA1  = (ulA2  + 64) / 2;}
#line 2629 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2632 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ulA2  = ClampUp  (ulA2  , (ULONG ) 224);
#line 2633 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ulA1  = ClampUp  (ulA1  , (ULONG ) 224);
#line 2635 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> InitTexture  (& _toBloodScreen2 );
#line 2636 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> AddTexture  (0 , 0 , pixDPWidth  , pixDPHeight  , C_WHITE  | ulA2 );
#line 2637 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> FlushRenderingQueue  ();
#line 2638 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> InitTexture  (& _toBloodScreen1 );
#line 2639 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> AddTexture  (0 , 0 , pixDPWidth  , pixDPHeight  , C_WHITE  | ulA1 );
#line 2640 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> FlushRenderingQueue  ();
#line 2642 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 2643 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(tmSinceWounding  < 4.0f){
#line 2645 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(tmSinceWounding  < 0.001f){ulA  = (ulA  + 64) / 2;
#line 2646 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ulA2  = (ulA2  + 64) / 2;
#line 2647 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ulA1  = (ulA2  + 64) / 2;}
#line 2648 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2651 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ulA  = ClampUp  (ulA  , (ULONG ) 224);
#line 2652 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ulA2  = ClampUp  (ulA2  , (ULONG ) 224);
#line 2653 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ulA1  = ClampUp  (ulA1  , (ULONG ) 224);
#line 2655 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> InitTexture  (& _toBloodScreen3 );
#line 2656 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> AddTexture  (0 , 0 , pixDPWidth  , pixDPHeight  , C_WHITE  | ulA );
#line 2657 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> FlushRenderingQueue  ();
#line 2658 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> InitTexture  (& _toBloodScreen2 );
#line 2659 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> AddTexture  (0 , 0 , pixDPWidth  , pixDPHeight  , C_WHITE  | ulA2 );
#line 2660 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> FlushRenderingQueue  ();
#line 2661 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> InitTexture  (& _toBloodScreen1 );
#line 2662 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> AddTexture  (0 , 0 , pixDPWidth  , pixDPHeight  , C_WHITE  | ulA1 );
#line 2663 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> FlushRenderingQueue  ();
#line 2665 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2667 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT tmNow  = _pTimer  -> GetLerpedCurrentTick  ();
#line 2668 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ULONG  ulAgg  = pen  -> m_tmSeriousSpeed  * 5.0f;
#line 2669 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ULONG  ulAgg1  = pen  -> m_tmInvulnerability  * 5.0f;
#line 2670 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ULONG  ulAgg2  = (ulAgg  + ulAgg1 ) * 5.0f;
#line 2672 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_tmSeriousSpeed  > tmNow  && m_tmInvulnerability  > tmNow ){
#line 2673 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ulAgg2  = ClampUp  (ulAgg2  , (ULONG ) 224);
#line 2676 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> InitTexture  (& _toPowerUpAll );
#line 2677 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> AddTexture  (0 , 0 , pixDPWidth  , pixDPHeight  , C_WHITE  | ulAgg2 );
#line 2678 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> FlushRenderingQueue  ();
#line 2679 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(m_tmInvulnerability  > tmNow )
#line 2680 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2681 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ulAgg1  = ClampUp  (ulAgg1  , (ULONG ) 224);
#line 2684 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> InitTexture  (& _toInvulnerabilityB );
#line 2685 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> AddTexture  (0 , 0 , pixDPWidth  , pixDPHeight  , C_WHITE  | ulAgg1 );
#line 2686 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> FlushRenderingQueue  ();
#line 2687 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2688 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
else if(m_tmSeriousSpeed  > tmNow )
#line 2689 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2690 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ulAgg  = ClampUp  (ulAgg  , (ULONG ) 224);
#line 2693 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> InitTexture  (& _toUltraDamage );
#line 2694 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> AddTexture  (0 , 0 , pixDPWidth  , pixDPHeight  , C_WHITE  | ulAgg );
#line 2695 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> FlushRenderingQueue  ();
#line 2696 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2703 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fDistance  = 100.0f;
#line 2704 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
TIME  tmDelta  = GetPlayerWeapons  () -> m_tmLastTarget  - _pTimer  -> CurrentTick  ();
#line 2705 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D vOnScreen ;
#line 2706 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
static FLOAT hud_fCrosshairOpacity  = 1.0f;
#line 2707 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
static FLOAT hud_fCrosshairScale  = 0.5f;
#line 2708 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
static FLOAT hud_fCrosshairRatio  = 1.0f;
#line 2709 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const ULONG  ulAlpha  = NormFloatToByte  (hud_fCrosshairOpacity );
#line 2710 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ULONG  ulArm  = (FLOAT) ulAlpha  * Clamp  (2 * tmDelta  , 0.0f , 1.0f);
#line 2713 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetPlayerWeapons  () -> m_strLastTarget  == TRANS  ("Use") && tmDelta  > 0)
#line 2714 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2716 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vOnScreen  (1) = (FLOAT) pdp  -> GetWidth  () * 0.5f;
#line 2717 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vOnScreen  (2) = (FLOAT) pdp  -> GetHeight  () * 0.5f;
#line 2718 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const FLOAT fMinD  = 30.0f;
#line 2719 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const FLOAT fMaxD  = 30.0f;
#line 2720 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fDistance  = Clamp  (fDistance  , fMinD  , fMaxD );
#line 2721 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const FLOAT fRatio  = ((fDistance  - fMinD ) / (fMaxD  - fMinD ));
#line 2722 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const FLOAT fMaxSize  = (FLOAT) pdp  -> GetWidth  () / 640.0f;
#line 2723 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const FLOAT fMinSize  = fMaxSize  * hud_fCrosshairRatio ;
#line 2724 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const FLOAT fSize  = 16 * Lerp  (fMaxSize  , fMinSize  , fRatio ) * hud_fCrosshairScale ;
#line 2725 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const FLOAT fI0  = + (PIX ) vOnScreen  (1) - fSize ;
#line 2726 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const FLOAT fI1  = + (PIX ) vOnScreen  (1) + fSize ;
#line 2727 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const FLOAT fJ0  = - (PIX ) vOnScreen  (2) - fSize  + pdp  -> GetHeight  ();
#line 2728 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const FLOAT fJ1  = - (PIX ) vOnScreen  (2) + fSize  + pdp  -> GetHeight  ();
#line 2729 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> InitTexture  (& _toSwitchArm );
#line 2730 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> AddTexture  (fI0  , fI1  , fJ0  * 2.0f , fJ1  * 1.9f , C_WHITE  | ulArm );
#line 2731 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> FlushRenderingQueue  ();
#line 2732 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2736 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(_pTimer  -> CurrentTick  () < m_tmCenterMessageEnd ){
#line 2737 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> SetFont  (_pfdDisplayFont );
#line 2738 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> SetTextScaling  (fScale );
#line 2739 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> SetTextAspect  (1.0f);
#line 2740 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> PutTextCXY  (m_strCenterMessage  , pixDPWidth  * 0.5f , pixDPHeight  * 0.85f , C_WHITE  | 0xDD);
#line 2742 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(_pTimer  -> CurrentTick  () < m_tmLastPicked  + PICKEDREPORT_TIME ){
#line 2743 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> SetFont  (_pfdDisplayFont );
#line 2744 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> SetTextScaling  (fScale );
#line 2745 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> SetTextAspect  (1.0f);
#line 2746 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString strPicked ;
#line 2747 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_fPickedAmmount  == 0){
#line 2748 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strPicked  = m_strPickedName ;
#line 2749 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 2750 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strPicked  . PrintF  ("%s +%d" , m_strPickedName  , int  (m_fPickedAmmount ));
#line 2751 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2752 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> PutTextCXY  (strPicked  , pixDPWidth  * 0.5f , pixDPHeight  * 0.82f , C_WHITE  | 0xDD);
#line 2753 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! GetSP  () -> sp_bCooperative  && ! GetSP  () -> sp_bUseFrags  && m_fPickedMana  >= 1){
#line 2754 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString strValue ;
#line 2755 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strValue  . PrintF  ("%s +%d" , TRANS  ("Value") , INDEX (m_fPickedMana ));
#line 2756 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> PutTextCXY  (strValue  , pixDPWidth  * 0.5f , pixDPHeight  * 0.85f , C_WHITE  | 0xDD);
#line 2757 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2758 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2760 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(_pTimer  -> CurrentTick  () < m_tmAnalyseEnd ){
#line 2761 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> SetFont  (_pfdDisplayFont );
#line 2762 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> SetTextScaling  (fScale );
#line 2763 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> SetTextAspect  (1.0f);
#line 2764 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
UBYTE  ubA  = int  (sin  (_pTimer  -> CurrentTick  () * 10.0f) * 127 + 128);
#line 2765 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> PutTextCXY  (TRANS  ("Analyzing...") , pixDPWidth  * 0.5f , pixDPHeight  * 0.2f , SE_COL_PURPLE_NEUTRAL_LT  | ubA );
#line 2766 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2767 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2770 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::RenderCameraView(CDrawPort * pdp,BOOL bListen) 
#line 2771 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2772 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CDrawPort  dpCamera ;
#line 2773 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CDrawPort  * pdpCamera  = pdp ;
#line 2774 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_penCamera  != NULL  && ((CCamera  &) * m_penCamera ) . m_bWideScreen ){
#line 2775 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> MakeWideScreen  (& dpCamera );
#line 2776 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdpCamera  = & dpCamera ;
#line 2777 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2779 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> Unlock  ();
#line 2780 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdpCamera  -> Lock  ();
#line 2782 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CAnyProjection3D  apr ;
#line 2783 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CEntity  * penViewer ;
#line 2784 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlacement3D plViewer ;
#line 2785 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
COLOR colBlend ;
#line 2788 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
for(INDEX iEye  = STEREO_LEFT ;iEye  <= (Stereo_IsEnabled  () ? STEREO_RIGHT  : STEREO_LEFT );iEye  ++){
#line 2791 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetupView  (pdpCamera  , apr  , penViewer  , plViewer  , colBlend  , TRUE );
#line 2794 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Stereo_SetBuffer  (iEye );
#line 2795 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Stereo_AdjustProjection  (* apr  , iEye  , 1);
#line 2798 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ASSERT  (IsValidFloat  (plViewer  . pl_OrientationAngle  (1)) && IsValidFloat  (plViewer  . pl_OrientationAngle  (2)) && IsValidFloat  (plViewer  . pl_OrientationAngle  (3)));
#line 2799 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
_ulPlayerRenderingMask  = 1 << GetMyPlayerIndex  ();
#line 2800 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
RenderView  (* en_pwoWorld  , * penViewer  , apr  , * pdpCamera );
#line 2801 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
_ulPlayerRenderingMask  = 0;
#line 2804 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(bListen  && iEye  == STEREO_LEFT ){
#line 2805 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ListenFromEntity  (penViewer  , plViewer );
#line 2806 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2807 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2808 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Stereo_SetBuffer  (STEREO_BOTH );
#line 2810 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
RenderScroll  (pdpCamera );
#line 2811 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
RenderTextFX  (pdpCamera );
#line 2812 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
RenderCredits  (pdpCamera );
#line 2813 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
RenderHudPicFX  (pdpCamera );
#line 2816 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2817 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
COLOR colGlare  = GetWorldGlaring  ();
#line 2818 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
UBYTE  ubR  , ubG  , ubB  , ubA ;
#line 2819 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ColorToRGBA  (colGlare  , ubR  , ubG  , ubB  , ubA );
#line 2820 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ubA  != 0){
#line 2821 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdpCamera  -> dp_ulBlendingRA  += ULONG  (ubR ) * ULONG  (ubA );
#line 2822 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdpCamera  -> dp_ulBlendingGA  += ULONG  (ubG ) * ULONG  (ubA );
#line 2823 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdpCamera  -> dp_ulBlendingBA  += ULONG  (ubB ) * ULONG  (ubA );
#line 2824 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdpCamera  -> dp_ulBlendingA  += ULONG  (ubA );
#line 2825 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2827 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdpCamera  -> BlendScreen  ();
#line 2828 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2830 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdpCamera  -> Unlock  ();
#line 2831 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> Lock  ();
#line 2834 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if((colBlend  & CT_AMASK ) != 0){
#line 2835 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> Fill  (colBlend );
#line 2836 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2839 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(_pTimer  -> CurrentTick  () < m_tmCenterMessageEnd ){
#line 2840 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PIX  pixDPWidth  = pdp  -> GetWidth  ();
#line 2841 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PIX  pixDPHeight  = pdp  -> GetHeight  ();
#line 2842 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fScale  = (FLOAT) pixDPWidth  / 640.0f;
#line 2843 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> SetFont  (_pfdDisplayFont );
#line 2844 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> SetTextScaling  (fScale );
#line 2845 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> SetTextAspect  (1.0f);
#line 2846 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> PutTextCXY  (m_strCenterMessage  , pixDPWidth  * 0.5f , pixDPHeight  * 0.85f , C_WHITE  | 0xDD);
#line 2847 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2848 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2851 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::RenderGameView(CDrawPort * pdp,void * pvUserData) 
#line 2852 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2853 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL bShowExtras  = (ULONG  (pvUserData ) & GRV_SHOWEXTRAS );
#line 2854 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> Unlock  ();
#line 2857 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! (m_ulFlags  & PLF_INITIALIZED ) || (m_ulFlags  & PLF_DONTRENDER )){
#line 2859 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CDrawPort  dpView  (pdp  , TRUE );
#line 2860 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(dpView  . Lock  ()){
#line 2861 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
RenderDummyView  (& dpView );
#line 2862 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
dpView  . Unlock  ();
#line 2863 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2864 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> Lock  ();
#line 2865 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ;
#line 2866 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2869 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pvUserData  != 0){
#line 2871 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTimerValue  tvNow  = _pTimer  -> GetHighPrecisionTimer  ();
#line 2872 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if((tvNow  - _tvProbingLast ) . GetSeconds  () < 0.1){
#line 2874 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
_pGfx  -> gl_bAllowProbing  = TRUE ;
#line 2875 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2876 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
_tvProbingLast  = tvNow ;
#line 2877 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2882 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL bDualHead  = 
#line 2883 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> IsDualHead  () && 
#line 2884 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetSP  () -> sp_gmGameMode  != CSessionProperties  :: GM_FLYOVER  && 
#line 2885 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penActionMarker  == NULL ;
#line 2888 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(bDualHead  || m_penCamera  == NULL ){
#line 2890 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CDrawPort  dpView  (pdp  , TRUE );
#line 2891 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(dpView  . Lock  ()){
#line 2893 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
RenderPlayerView  (& dpView  , bShowExtras );
#line 2894 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
dpView  . Unlock  ();
#line 2895 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2896 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2899 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_penCamera  != NULL ){
#line 2901 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CDrawPort  dpView  (pdp  , m_penActionMarker  != NULL );
#line 2902 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(dpView  . Lock  ()){
#line 2904 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
RenderCameraView  (& dpView  , ! bDualHead );
#line 2905 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
dpView  . Unlock  ();
#line 2906 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2908 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 2910 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(bDualHead ){
#line 2912 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
cmp_ppenDHPlayer  = this ;
#line 2913 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2914 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2916 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> Lock  ();
#line 2917 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2927 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::PreMoving(void) {
#line 2934 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerAnimator  &) * m_penAnimator ) . StoreLast  ();
#line 2935 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerEntity  :: PreMoving  ();
#line 2936 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2939 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::DoMoving(void) {
#line 2940 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerEntity  :: DoMoving  ();
#line 2941 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerAnimator  &) * m_penAnimator ) . AnimateBanking  ();
#line 2943 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_penView  != NULL ){
#line 2944 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerView  &) * m_penView ) . DoMoving  ();
#line 2945 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2946 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_pen3rdPersonView  != NULL ){
#line 2947 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerView  &) * m_pen3rdPersonView ) . DoMoving  ();
#line 2948 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2949 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 2953 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::PostMoving(void) 
#line 2954 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2955 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerEntity  :: PostMoving  ();
#line 2957 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_ulFlags  &= ~ ENF_INRENDERING ;
#line 2959 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerAnimator  &) * m_penAnimator ) . AnimateSoftEyes  ();
#line 2963 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetFlags  () & ENF_ALIVE )
#line 2964 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 2965 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fManaFraction  += 
#line 2966 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ClampDn  (1.0f - en_vCurrentTranslationAbsolute  . Length  () / 20.0f , 0.0f) * 20.0f 
#line 2967 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
* _pTimer  -> TickQuantum ;
#line 2968 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iNewMana  = m_fManaFraction ;
#line 2969 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iMana  += iNewMana ;
#line 2970 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fManaFraction  -= iNewMana ;
#line 2971 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2974 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_gdGameDifficulty  == CSessionProperties  :: GD_TOURIST  && GetFlags  () & ENF_ALIVE ){
#line 2976 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fHealth  = GetHealth  ();
#line 2977 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fTopHealth  = TopHealth  ();
#line 2981 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2984 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetPlayerWeapons  () -> UpdateTargetingInfo  ();
#line 2986 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_pen3rdPersonView  != NULL ){
#line 2987 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerView  &) * m_pen3rdPersonView ) . PostMoving  ();
#line 2988 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2989 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_penView  != NULL ){
#line 2990 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerView  &) * m_penView ) . PostMoving  ();
#line 2991 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 2994 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! (m_ulFlags  & PLF_APPLIEDACTION )){
#line 2996 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetUnconnected  ();
#line 2997 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3000 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  &= ~ PLF_APPLIEDACTION ;
#line 3001 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 3004 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::SetUnconnected(void) 
#line 3005 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3006 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_ulFlags  & PLF_NOTCONNECTED ){
#line 3007 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ;
#line 3008 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3009 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  |= PLF_NOTCONNECTED ;
#line 3012 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ForceFullStop  ();
#line 3013 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetPhysicsFlags  (GetPhysicsFlags  () & ~ (EPF_TRANSLATEDBYGRAVITY  | EPF_ORIENTEDBYGRAVITY ));
#line 3014 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetCollisionFlags  (GetCollisionFlags  () & ~ ((ECBI_BRUSH  | ECBI_MODEL ) << ECB_TEST ));
#line 3015 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_plLastViewpoint  . pl_OrientationAngle  = en_plViewpoint  . pl_OrientationAngle  = ANGLE3D (0 , 0 , 0);
#line 3017 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
StartModelAnim  (PLAYER_ANIM_STAND  , 0);
#line 3018 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetPlayerAnimator  () -> BodyAnimationTemplate  (
#line 3019 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BODY_ANIM_NORMALWALK  , BODY_ANIM_COLT_STAND  , BODY_ANIM_SHOTGUN_STAND  , BODY_ANIM_MINIGUN_STAND  , 
#line 3020 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
AOF_LOOPING  | AOF_NORESTART );
#line 3021 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 3024 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::SetConnected(void) 
#line 3025 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3026 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! (m_ulFlags  & PLF_NOTCONNECTED )){
#line 3027 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ;
#line 3028 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3029 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  &= ~ PLF_NOTCONNECTED ;
#line 3031 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetPhysicsFlags  (GetPhysicsFlags  () | (EPF_TRANSLATEDBYGRAVITY  | EPF_ORIENTEDBYGRAVITY ));
#line 3032 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetCollisionFlags  (GetCollisionFlags  () | ((ECBI_BRUSH  | ECBI_MODEL ) << ECB_TEST ));
#line 3033 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 3036 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL CPlayer::IsConnected(void)const 
#line 3037 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3038 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ! (m_ulFlags  & PLF_NOTCONNECTED );
#line 3039 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 3042 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::ChecksumForSync(ULONG & ulCRC,INDEX iExtensiveSyncCheck) 
#line 3043 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3044 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerEntity  :: ChecksumForSync  (ulCRC  , iExtensiveSyncCheck );
#line 3045 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CRC_AddLONG  (ulCRC  , m_psLevelStats  . ps_iScore );
#line 3046 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CRC_AddLONG  (ulCRC  , m_iMana );
#line 3047 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(iExtensiveSyncCheck  > 0){
#line 3048 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CRC_AddFLOAT  (ulCRC  , m_fManaFraction );
#line 3049 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3050 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CRC_AddFLOAT  (ulCRC  , m_fArmor );
#line 3051 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 3055 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::DumpSync_t(CTStream & strm,INDEX iExtensiveSyncCheck) 
#line 3056 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3057 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerEntity  :: DumpSync_t  (strm  , iExtensiveSyncCheck );
#line 3058 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strm  . FPrintF_t  ("Score: %d\n" , m_psLevelStats  . ps_iScore );
#line 3059 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strm  . FPrintF_t  ("m_iMana:  %d\n" , m_iMana );
#line 3060 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strm  . FPrintF_t  ("m_fManaFraction: %g(%08x)\n" , m_fManaFraction  , (ULONG  &) m_fManaFraction );
#line 3061 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strm  . FPrintF_t  ("m_fArmor: %g(%08x)\n" , m_fArmor  , (ULONG  &) m_fArmor );
#line 3062 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  void CPlayer::LeaveStain(BOOL bGrow) 
#line 3071 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3072 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ESpawnEffect  ese ;
#line 3073 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D vPoint ;
#line 3074 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOATplane3D vPlaneNormal ;
#line 3075 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fDistanceToEdge ;
#line 3077 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOATaabbox3D box ;
#line 3078 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetBoundingBox  (box );
#line 3081 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetNearestPolygon  (vPoint  , vPlaneNormal  , fDistanceToEdge )){
#line 3083 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if((vPoint  - GetPlacement  () . pl_PositionVector ) . Length  () < 0.5f 
#line 3084 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
&& (m_vLastStain  - vPoint ) . Length  () > 1.0f){
#line 3085 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_vLastStain  = vPoint ;
#line 3086 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fStretch  = box  . Size  () . Length  ();
#line 3087 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ese  . colMuliplier  = C_WHITE  | CT_OPAQUE ;
#line 3089 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(bGrow ){
#line 3090 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ese  . betType  = BET_BLOODSTAINGROW ;
#line 3091 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ese  . vStretch  = FLOAT3D (fStretch  * 1.5f , fStretch  * 1.5f , 1.0f);
#line 3092 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 3093 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ese  . betType  = BET_BLOODSTAIN ;
#line 3094 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ese  . vStretch  = FLOAT3D (fStretch  * 0.75f , fStretch  * 0.75f , 1.0f);
#line 3095 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3096 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ese  . vNormal  = FLOAT3D (vPlaneNormal );
#line 3097 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ese  . vDirection  = FLOAT3D (0 , 0 , 0);
#line 3098 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D vPos  = vPoint  + ese  . vNormal  / 50.0f * (FRnd  () + 0.5f);
#line 3099 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CEntityPointer penEffect  = CreateEntity  (CPlacement3D (vPos  , ANGLE3D (0 , 0 , 0)) , CLASS_BASIC_EFFECT );
#line 3100 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penEffect  -> Initialize  (ese );
#line 3101 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3102 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3103 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 3106 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::DamageImpact(enum DamageType dmtType,
#line 3107 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fDamageAmmount,const FLOAT3D & vHitPoint,const FLOAT3D & vDirection) 
#line 3108 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3110 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetRenderType  () != RT_MODEL ){
#line 3112 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ;
#line 3113 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3115 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(dmtType  == DMT_ABYSS  || dmtType  == DMT_SPIKESTAB ){
#line 3116 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ;
#line 3117 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3119 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fDamageAmmount  = Clamp  (fDamageAmmount  , 0.0f , 5000.0f);
#line 3121 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fKickDamage  = fDamageAmmount ;
#line 3122 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if((dmtType  == DMT_EXPLOSION ) || (dmtType  == DMT_IMPACT ) || (dmtType  == DMT_CANNONBALL_EXPLOSION ))
#line 3123 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3124 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fKickDamage  *= 1.5;
#line 3125 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3126 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(dmtType  == DMT_DROWNING  || dmtType  == DMT_CLOSERANGE ){
#line 3127 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fKickDamage  /= 10;
#line 3128 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3129 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(dmtType  == DMT_CHAINSAW )
#line 3130 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3131 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fKickDamage  /= 10;
#line 3132 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3135 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
TIME  tmNow  = _pTimer  -> CurrentTick  ();
#line 3136 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
TIME  tmDelta  = tmNow  - m_tmLastDamage ;
#line 3137 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmLastDamage  = tmNow ;
#line 3140 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(tmDelta  >= _pTimer  -> TickQuantum  * 3){
#line 3141 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_vDamage  = FLOAT3D (0 , 0 , 0);
#line 3142 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3144 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D vDirectionFixed ;
#line 3145 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(vDirection  . ManhattanNorm  () > 0.5f){
#line 3146 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vDirectionFixed  = vDirection ;
#line 3147 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 3148 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vDirectionFixed  = - en_vGravityDir ;
#line 3149 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3150 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D vDamageOld  = m_vDamage ;
#line 3151 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_vDamage  += (vDirectionFixed ) * fKickDamage ;
#line 3153 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fOldLen  = vDamageOld  . Length  ();
#line 3154 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fNewLen  = m_vDamage  . Length  ();
#line 3155 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fOldRootLen  = Sqrt  (fOldLen );
#line 3156 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fNewRootLen  = Sqrt  (fNewLen );
#line 3158 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fMassFactor  = 200.0f / ((EntityInfo  *) GetEntityInfo  ()) -> fMass ;
#line 3160 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! (en_ulFlags  & ENF_ALIVE ))
#line 3161 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3162 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fMassFactor  /= 3;
#line 3163 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3165 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
switch(dmtType )
#line 3166 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3167 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case DMT_CLOSERANGE : 
#line 3168 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case DMT_CHAINSAW : 
#line 3169 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case DMT_DROWNING : 
#line 3170 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case DMT_IMPACT : 
#line 3171 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case DMT_BRUSH : 
#line 3172 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case DMT_BURNING : 
#line 3174 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
break ;
#line 3175 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
default  :
#line 3176 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3177 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(fOldLen  != 0.0f)
#line 3178 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3180 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GiveImpulseTranslationAbsolute  (- vDamageOld  / fOldRootLen  * fMassFactor );
#line 3181 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3189 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GiveImpulseTranslationAbsolute  (m_vDamage  / fNewRootLen  * fMassFactor );
#line 3190 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3191 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3193 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_fMaxDamageAmmount  < fDamageAmmount )
#line 3194 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3195 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fMaxDamageAmmount  = fDamageAmmount ;
#line 3196 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3198 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if((m_tmSpraySpawned  <= _pTimer  -> CurrentTick  () - _pTimer  -> TickQuantum  * 8 || 
#line 3199 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fSprayDamage  + fDamageAmmount  > 50.0f)){
#line 3202 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlacement3D plSpray  = CPlacement3D (vHitPoint  , ANGLE3D (0 , 0 , 0));
#line 3203 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penSpray  = CreateEntity  (plSpray  , CLASS_BLOOD_SPRAY );
#line 3204 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penSpray  -> SetParent  (this );
#line 3205 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ESpawnSpray  eSpawnSpray ;
#line 3206 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eSpawnSpray  . colBurnColor  = C_WHITE  | CT_OPAQUE ;
#line 3208 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_fMaxDamageAmmount  > 10.0f)
#line 3209 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3210 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eSpawnSpray  . fDamagePower  = 3.0f;
#line 3211 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3212 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
else if(m_fSprayDamage  + fDamageAmmount  > 50.0f)
#line 3213 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3214 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eSpawnSpray  . fDamagePower  = 2.0f;
#line 3215 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3216 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
else 
#line 3217 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3218 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eSpawnSpray  . fDamagePower  = 1.0f;
#line 3219 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3221 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eSpawnSpray  . sptType  = SPT_BLOOD ;
#line 3222 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eSpawnSpray  . fSizeMultiplier  = 1.0f;
#line 3225 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D vHitPointRelative  = vHitPoint  - GetPlacement  () . pl_PositionVector ;
#line 3226 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D vReflectingNormal ;
#line 3227 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetNormalComponent  (vHitPointRelative  , en_vGravityDir  , vReflectingNormal );
#line 3228 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vReflectingNormal  . Normalize  ();
#line 3230 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vReflectingNormal  (1) /= 5.0f;
#line 3232 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D vProjectedComponent  = vReflectingNormal  * (vDirection  % vReflectingNormal );
#line 3233 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D vSpilDirection  = vDirection  - vProjectedComponent  * 2.0f - en_vGravityDir  * 0.5f;
#line 3235 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eSpawnSpray  . vDirection  = vSpilDirection ;
#line 3236 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eSpawnSpray  . penOwner  = this ;
#line 3239 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penSpray  -> Initialize  (eSpawnSpray );
#line 3240 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmSpraySpawned  = _pTimer  -> CurrentTick  ();
#line 3241 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fSprayDamage  = 0.0f;
#line 3242 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fMaxDamageAmmount  = 0.0f;
#line 3243 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3244 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fSprayDamage  += fDamageAmmount ;
#line 3245 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 3249 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::ReceiveDamage(CEntity * penInflictor,enum DamageType dmtType,
#line 3250 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fDamageAmmount,const FLOAT3D & vHitPoint,const FLOAT3D & vDirection) 
#line 3251 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3253 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(penInflictor  == this  && (dmtType  == DMT_CLOSERANGE  || dmtType  == DMT_CHAINSAW  || 
#line 3254 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((dmtType  == DMT_EXPLOSION  || dmtType  == DMT_CANNONBALL_EXPLOSION  || dmtType  == DMT_PROJECTILE ) && 
#line 3255 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetSP  () -> sp_gdGameDifficulty  <= CSessionProperties  :: GD_EASY ))){
#line 3256 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ;
#line 3257 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3260 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_ulFlags  & PLF_NOTCONNECTED ){
#line 3262 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ;
#line 3263 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3266 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(cht_bGod  && CheatsEnabled  ()){return ;}
#line 3269 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const TIME  tmDelta  = m_tmInvulnerability  - _pTimer  -> CurrentTick  ();
#line 3270 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(tmDelta  > 0 && dmtType  != DMT_ABYSS  && dmtType  != DMT_TELEPORT ){return ;}
#line 3273 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT tmSpawnInvulnerability  = GetSP  () -> sp_tmSpawnInvulnerability ;
#line 3274 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(tmSpawnInvulnerability  > 0 && _pTimer  -> CurrentTick  () - m_tmSpawned  < tmSpawnInvulnerability ){
#line 3276 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ;
#line 3277 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3280 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! GetSP  () -> sp_bFriendlyFire  && GetSP  () -> sp_bCooperative ){
#line 3281 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(IsOfClass  (penInflictor  , "Player") && penInflictor  != this ){
#line 3282 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ;
#line 3283 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3284 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3287 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(dmtType  == DMT_HEAT  && ! (GetFlags  () & ENF_ALIVE )){
#line 3288 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ;
#line 3289 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3292 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fDifficultyDamage  = GetSP  () -> sp_fDamageStrength ;
#line 3293 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(fDifficultyDamage  <= 1.0f || penInflictor  != this ){
#line 3294 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fDamageAmmount  *= fDifficultyDamage ;
#line 3295 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3298 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(fDamageAmmount  <= 0){
#line 3299 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ;
#line 3300 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3302 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fSubHealth  , fSubArmor ;
#line 3303 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(dmtType  == DMT_DROWNING ){
#line 3305 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fSubHealth  = fDamageAmmount ;
#line 3306 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3307 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
else {
#line 3309 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fSubArmor  = fDamageAmmount  * 2.0f / 3.0f;
#line 3310 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fSubHealth  = fDamageAmmount  - fSubArmor ;
#line 3311 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fArmor  -= fSubArmor ;
#line 3312 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_fArmor  < 0){
#line 3313 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fSubHealth  -= m_fArmor ;
#line 3314 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fArmor  = 0.0f;
#line 3315 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3316 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3319 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(fSubHealth  > 0){
#line 3321 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_penCamera  != NULL ){
#line 3323 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CEntity  * penOnBreak  = ((CCamera  &) * m_penCamera ) . m_penOnBreak ;
#line 3324 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(penOnBreak  != NULL ){
#line 3326 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SendToTarget  (penOnBreak  , EET_TRIGGER  , this );
#line 3328 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 3330 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penCamera  = NULL ;
#line 3331 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3332 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3334 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3337 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_penActionMarker  != NULL ){
#line 3339 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ;
#line 3340 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3342 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
DamageImpact  (dmtType  , fSubHealth  , vHitPoint  , vDirection );
#line 3345 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerEntity  :: ReceiveDamage  (penInflictor  , dmtType  , fSubHealth  , vHitPoint  , vDirection );
#line 3348 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(fDamageAmmount  > 1.0f){
#line 3350 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(dmtType  == DMT_EXPLOSION  || dmtType  == DMT_PROJECTILE  || dmtType  == DMT_BULLET  
#line 3351 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
|| dmtType  == DMT_IMPACT  || dmtType  == DMT_CANNONBALL  || dmtType  == DMT_CANNONBALL_EXPLOSION ){
#line 3354 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3355 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetFlags  () & ENF_ALIVE ){
#line 3356 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fDamageAmmount  += fDamageAmmount ;
#line 3357 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmWoundedTime  = _pTimer  -> CurrentTick  ();
#line 3358 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3359 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3362 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ESound  eSound ;
#line 3363 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eSound  . EsndtSound  = SNDT_PLAYER ;
#line 3364 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eSound  . penTarget  = this ;
#line 3365 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SendEventInRange  (eSound  , FLOATaabbox3D (GetPlacement  () . pl_PositionVector  , 10.0f));
#line 3368 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(dmtType  == DMT_DROWNING ){
#line 3369 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetRandomMouthPitch  (0.9f , 1.1f);
#line 3370 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soMouth  , GenderSound  (SOUND_DROWN ) , SOF_3D );
#line 3371 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(_pNetwork  -> IsPlayerLocal  (this )){IFeel_PlayEffect  ("WoundWater");}
#line 3372 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmMouthSoundLast  = _pTimer  -> CurrentTick  ();
#line 3373 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soLocalAmbientOnce  , SOUND_WATERBUBBLES  , SOF_3D  | SOF_VOLUMETRIC  | SOF_LOCAL );
#line 3374 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_soLocalAmbientOnce  . Set3DParameters  (25.0f , 5.0f , 2.0f , Lerp  (0.5f , 1.5f , FRnd  ()));
#line 3375 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SpawnBubbles  (10 + INDEX (FRnd  () * 10));
#line 3376 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(m_fDamageAmmount  > 1.0f){
#line 3378 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetFlags  () & ENF_ALIVE ){
#line 3380 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iSound ;
#line 3381 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
char  * strIFeel  = NULL ;
#line 3382 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_fDamageAmmount  < 5.0f){
#line 3383 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iSound  = GenderSound  (SOUND_WOUNDWEAK );
#line 3384 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strIFeel  = "WoundWeak";
#line 3385 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3386 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
else if(m_fDamageAmmount  < 25.0f){
#line 3387 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iSound  = GenderSound  (SOUND_WOUNDMEDIUM );
#line 3388 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strIFeel  = "WoundMedium";
#line 3389 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3390 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
else {
#line 3391 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iSound  = GenderSound  (SOUND_WOUNDSTRONG );
#line 3392 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strIFeel  = "WoundStrong";
#line 3393 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3394 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_pstState  == PST_DIVE ){
#line 3395 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iSound  = GenderSound  (SOUND_WOUNDWATER );
#line 3396 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strIFeel  = "WoundWater";
#line 3397 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3398 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetRandomMouthPitch  (0.9f , 1.1f);
#line 3400 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
TIME  tmNow  = _pTimer  -> CurrentTick  ();
#line 3401 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if((tmNow  - m_tmScreamTime ) > 1.0f){
#line 3402 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmScreamTime  = tmNow ;
#line 3403 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soMouth  , iSound  , SOF_3D );
#line 3404 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(_pNetwork  -> IsPlayerLocal  (this )){IFeel_PlayEffect  (strIFeel );}
#line 3405 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3406 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3407 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3408 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 3411 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL CPlayer::ShouldBlowUp(void) 
#line 3412 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3414 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return 
#line 3416 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetSP  () -> sp_bGibs  && 
#line 3418 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
(GetHealth  () <= 0) && 
#line 3420 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
(m_vDamage  . Length  () > _fBlowUpAmmount ) && 
#line 3422 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetRenderType  () == RT_MODEL ;
#line 3423 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 3426 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::BlowUp(void) 
#line 3427 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3428 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D vNormalizedDamage  = m_vDamage  - m_vDamage  * (_fBlowUpAmmount  / m_vDamage  . Length  ());
#line 3429 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vNormalizedDamage  /= Sqrt  (vNormalizedDamage  . Length  ());
#line 3430 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vNormalizedDamage  *= 0.75f;
#line 3432 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D vBodySpeed  = en_vCurrentTranslationAbsolute  - en_vGravityDir  * (en_vGravityDir  % en_vCurrentTranslationAbsolute );
#line 3433 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const FLOAT fBlowUpSize  = 2.0f;
#line 3436 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const INDEX iBloodType  = GetSP  () -> sp_iBlood ;
#line 3438 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ULONG  ulFleshTexture  = TEXTURE_FLESH_GREEN ;
#line 3439 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ULONG  ulFleshModel  = MODEL_FLESH ;
#line 3440 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(iBloodType  == 2){ulFleshTexture  = TEXTURE_FLESH_RED ;}
#line 3442 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Debris_Begin  (EIBT_FLESH  , DPT_BLOODTRAIL  , BET_BLOODSTAIN  , fBlowUpSize  , vNormalizedDamage  , vBodySpeed  , 1.0f , 0.0f);
#line 3443 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
for(INDEX iDebris  = 0;iDebris  < 4;iDebris  ++){
#line 3445 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(iBloodType  == 3){
#line 3446 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
switch(IRnd  () % 5){
#line 3447 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case 1: {ulFleshModel  = MODEL_FLESH_APPLE ;ulFleshTexture  = TEXTURE_FLESH_APPLE ;break ;}
#line 3448 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case 2: {ulFleshModel  = MODEL_FLESH_BANANA ;ulFleshTexture  = TEXTURE_FLESH_BANANA ;break ;}
#line 3449 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case 3: {ulFleshModel  = MODEL_FLESH_BURGER ;ulFleshTexture  = TEXTURE_FLESH_BURGER ;break ;}
#line 3450 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case 4: {ulFleshModel  = MODEL_FLESH_LOLLY ;ulFleshTexture  = TEXTURE_FLESH_LOLLY ;break ;}
#line 3451 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
default  :{ulFleshModel  = MODEL_FLESH_ORANGE ;ulFleshTexture  = TEXTURE_FLESH_ORANGE ;break ;}
#line 3452 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3453 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3454 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Debris_Spawn  (this  , this  , ulFleshModel  , ulFleshTexture  , 0 , 0 , 0 , IRnd  () % 4 , 0.5f , 
#line 3455 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D (FRnd  () * 0.6f + 0.2f , FRnd  () * 0.6f + 0.2f , FRnd  () * 0.6f + 0.2f));
#line 3456 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3459 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
LeaveStain  (FALSE );
#line 3461 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soBody  , SOUND_BLOWUP  , SOF_3D );
#line 3464 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SwitchToEditorModel  ();
#line 3466 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fSpeedOrg  = en_vCurrentTranslationAbsolute  . Length  ();
#line 3467 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const FLOAT fSpeedMax  = 30.0f;
#line 3468 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(fSpeedOrg  > fSpeedMax ){
#line 3469 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_vCurrentTranslationAbsolute  *= fSpeedMax  / fSpeedOrg ;
#line 3470 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3474 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 3480 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void * CPlayer::GetEntityInfo(void) 
#line 3481 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3482 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
switch(m_pstState ){
#line 3483 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case PST_STAND : case PST_FALL : 
#line 3484 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return & eiPlayerGround ;
#line 3485 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
break ;
#line 3486 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case PST_CROUCH : 
#line 3487 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return & eiPlayerCrouch ;
#line 3488 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
break ;
#line 3489 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case PST_SWIM : case PST_DIVE : 
#line 3490 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return & eiPlayerSwim ;
#line 3491 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
break ;
#line 3492 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3493 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return & eiPlayerGround ;
#line 3494 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 3498 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL CPlayer::ReceiveItem(const CEntityEvent & ee) 
#line 3499 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3501 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ee  . ee_slEvent  == EVENTCODE_EHealth )
#line 3502 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3504 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fHealthOld  = GetHealth  ();
#line 3505 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fHealthNew  = fHealthOld  + ((EHealth  &) ee ) . fHealth ;
#line 3506 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(((EHealth  &) ee ) . bOverTopHealth ){
#line 3507 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fHealthNew  = ClampUp  (fHealthNew  , MaxHealth  ());
#line 3508 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 3509 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fHealthNew  = ClampUp  (fHealthNew  , TopHealth  ());
#line 3510 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3513 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ceil  (fHealthNew ) > ceil  (fHealthOld )){
#line 3515 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetHealth  (fHealthNew );
#line 3516 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ItemPicked  (TRANS  ("Health") , ((EHealth  &) ee ) . fHealth );
#line 3517 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iMana  += (INDEX) (((EHealth  &) ee ) . fHealth );
#line 3518 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fPickedMana  += ((EHealth  &) ee ) . fHealth ;
#line 3519 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE ;
#line 3520 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3521 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3524 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
else if(ee  . ee_slEvent  == EVENTCODE_EArmor )
#line 3525 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3527 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fArmorOld  = m_fArmor ;
#line 3528 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fArmorNew  = fArmorOld  + ((EArmor  &) ee ) . fArmor ;
#line 3529 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(((EArmor  &) ee ) . bOverTopArmor ){
#line 3530 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fArmorNew  = ClampUp  (fArmorNew  , MaxArmor  ());
#line 3531 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 3532 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fArmorNew  = ClampUp  (fArmorNew  , TopArmor  ());
#line 3533 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3535 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ceil  (fArmorNew ) > ceil  (fArmorOld )){
#line 3537 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fArmor  = fArmorNew ;
#line 3538 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ItemPicked  (TRANS  ("Armor") , ((EArmor  &) ee ) . fArmor );
#line 3539 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iMana  += (INDEX) (((EArmor  &) ee ) . fArmor );
#line 3540 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fPickedMana  += ((EArmor  &) ee ) . fArmor ;
#line 3541 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE ;
#line 3542 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3543 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3546 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
else if(ee  . ee_slEvent  == EVENTCODE_EMessageItem ){
#line 3547 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
EMessageItem  & eMI  = (EMessageItem  &) ee ;
#line 3548 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ReceiveComputerMessage  (eMI  . fnmMessage  , CMF_ANALYZE );
#line 3549 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ItemPicked  (TRANS  ("Ancient papyrus") , 0);
#line 3550 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE ;
#line 3551 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3554 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
else if(ee  . ee_slEvent  == EVENTCODE_EWeaponItem ){
#line 3555 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ((CPlayerWeapons  &) * m_penWeapons ) . ReceiveWeapon  (ee );
#line 3556 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3559 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
else if(ee  . ee_slEvent  == EVENTCODE_EAmmoItem ){
#line 3560 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ((CPlayerWeapons  &) * m_penWeapons ) . ReceiveAmmo  (ee );
#line 3561 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3563 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
else if(ee  . ee_slEvent  == EVENTCODE_EAmmoPackItem ){
#line 3564 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ((CPlayerWeapons  &) * m_penWeapons ) . ReceivePackAmmo  (ee );
#line 3565 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3568 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
else if(ee  . ee_slEvent  == EVENTCODE_EKey ){
#line 3570 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_penActionMarker  != NULL ){
#line 3571 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return FALSE ;
#line 3572 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3574 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ULONG  ulKey  = 1 << INDEX (((EKey  &) ee ) . kitType );
#line 3575 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
EKey  & eKey  = (EKey  &) ee ;
#line 3576 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(eKey  . kitType  == KIT_HAWKWINGS01DUMMY  || eKey  . kitType  == KIT_HAWKWINGS02DUMMY  
#line 3577 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
|| eKey  . kitType  == KIT_TABLESDUMMY  || eKey  . kitType  == KIT_JAGUARGOLDDUMMY )
#line 3578 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3579 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ulKey  = 0;
#line 3580 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3582 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_ulKeys  & ulKey ){
#line 3584 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return FALSE ;
#line 3586 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 3588 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulKeys  |= ulKey ;
#line 3589 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString strKey  = GetKeyName  (((EKey  &) ee ) . kitType );
#line 3590 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ItemPicked  (strKey  , 0);
#line 3592 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_bCooperative  && ! GetSP  () -> sp_bSinglePlayer ){
#line 3593 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPrintF  (TRANS  ("^cFFFFFF%s - %s^r\n") , GetPlayerName  () , strKey );
#line 3594 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3595 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE ;
#line 3596 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3597 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3600 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
else if(ee  . ee_slEvent  == EVENTCODE_EPowerUp ){
#line 3601 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const FLOAT tmNow  = _pTimer  -> CurrentTick  ();
#line 3602 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
switch(((EPowerUp  &) ee ) . puitType ){
#line 3603 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case PUIT_INVISIB : m_tmInvisibility  = tmNow  + m_tmInvisibilityMax ;
#line 3604 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ItemPicked  (TRANS  ("^cABE3FFInvisibility") , 0);
#line 3605 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE ;
#line 3606 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case PUIT_INVULNER : m_tmInvulnerability  = tmNow  + m_tmInvulnerabilityMax ;
#line 3607 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ItemPicked  (TRANS  ("^c00B440Invulnerability") , 0);
#line 3608 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE ;
#line 3609 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case PUIT_DAMAGE : 
#line 3610 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iSeriousBombCount  ++;
#line 3612 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ItemPicked  (TRANS  ("^cFF0000Serious Damage!") , 0);
#line 3613 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE ;
#line 3614 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case PUIT_SPEED : 
#line 3615 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ItemPicked  (TRANS  ("^cFF9400Serious Speed") , 0);
#line 3616 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE ;
#line 3617 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case PUIT_BOMB : 
#line 3619 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ItemPicked  (TRANS  ("^cFF0000Serious Bomb!") , 0);
#line 3622 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_bCooperative ){
#line 3623 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
EComputerMessage  eMsg ;
#line 3624 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eMsg  . fnmMessage  = CTFILENAME  ("DataMP\\Messages\\Weapons\\seriousbomb.txt");
#line 3625 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
this  -> SendEvent  (eMsg );
#line 3626 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3627 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE ;
#line 3628 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3629 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3632 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return FALSE ;
#line 3633 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 3638 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::ChangePlayerView() 
#line 3639 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3641 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_iViewState  == PVT_PLAYEREYES ){
#line 3643 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ASSERT  (m_pen3rdPersonView  == NULL );
#line 3644 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_pen3rdPersonView  == NULL ){
#line 3645 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_pen3rdPersonView  = CreateEntity  (GetPlacement  () , CLASS_PLAYER_VIEW );
#line 3646 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
EViewInit  eInit ;
#line 3647 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eInit  . penOwner  = this ;
#line 3648 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eInit  . penCamera  = NULL ;
#line 3649 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eInit  . vtView  = VT_3RDPERSONVIEW ;
#line 3650 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eInit  . bDeathFixed  = FALSE ;
#line 3651 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_pen3rdPersonView  -> Initialize  (eInit );
#line 3652 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3654 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iViewState  = PVT_3RDPERSONVIEW ;
#line 3657 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(m_iViewState  == PVT_3RDPERSONVIEW ){
#line 3658 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iViewState  = PVT_PLAYEREYES ;
#line 3661 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_pen3rdPersonView  != NULL ){
#line 3662 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerView  &) * m_pen3rdPersonView ) . SendEvent  (EEnd  ());
#line 3663 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_pen3rdPersonView  = NULL ;
#line 3664 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3665 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3666 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 3669 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::ComputerPressed(void) 
#line 3670 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3673 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(cmp_ppenPlayer  == NULL  && _pNetwork  -> IsPlayerLocal  (this )){
#line 3674 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
cmp_ppenPlayer  = this ;
#line 3675 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3676 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_bComputerInvoked  = TRUE ;
#line 3678 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmAnalyseEnd  = 0;
#line 3679 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_bPendingMessage  = FALSE ;
#line 3680 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmMessagePlay  = 0;
#line 3682 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 3686 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::UsePressed(BOOL bOrComputer) 
#line 3687 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3689 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerWeapons  * penWeapons  = GetPlayerWeapons  ();
#line 3690 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CEntity  * pen  = penWeapons  -> m_penRayHit ;
#line 3691 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL bSomethingToUse  = FALSE ;
#line 3694 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pen  != NULL ){
#line 3696 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(IsOfClass  (pen  , "Moving Brush")){
#line 3697 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(((CMovingBrush  &) * pen ) . m_penSwitch  != NULL ){
#line 3698 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pen  = ((CMovingBrush  &) * pen ) . m_penSwitch ;
#line 3699 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3700 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3703 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(IsOfClass  (pen  , "Switch") && penWeapons  -> m_fRayHitDistance  < 2.0f){
#line 3704 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CSwitch  & enSwitch  = (CSwitch  &) * pen ;
#line 3706 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(enSwitch  . m_bUseable ){
#line 3708 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SendToTarget  (pen  , EET_TRIGGER  , this );
#line 3709 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bSomethingToUse  = TRUE ;
#line 3710 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3711 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3714 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(IsOfClass  (pen  , "MessageHolder") 
#line 3715 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
&& penWeapons  -> m_fRayHitDistance  < ((CMessageHolder  *) & * pen ) -> m_fDistance  
#line 3716 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
&& ((CMessageHolder  *) & * pen ) -> m_bActive ){
#line 3717 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const CTFileName & fnmMessage  = ((CMessageHolder  *) & * pen ) -> m_fnmMessage ;
#line 3719 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! HasMessage  (fnmMessage )){
#line 3721 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ReceiveComputerMessage  (fnmMessage  , CMF_ANALYZE );
#line 3722 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bSomethingToUse  = TRUE ;
#line 3723 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3724 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3725 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3727 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! bSomethingToUse  && bOrComputer ){
#line 3729 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ComputerPressed  ();
#line 3730 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3731 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
else if(! bSomethingToUse )
#line 3732 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3733 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerWeapons  * penWeapon  = GetPlayerWeapons  ();
#line 3737 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if((penWeapon  -> m_iCurrentWeapon  == WEAPON_SNIPER  && 
#line 3738 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penWeapon  -> m_iWantedWeapon  == WEAPON_SNIPER ) || (penWeapon  -> m_iCurrentWeapon  == WEAPON_TOMMYGUN  && 
#line 3739 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penWeapon  -> m_iWantedWeapon  == WEAPON_TOMMYGUN ) || (penWeapon  -> m_iCurrentWeapon  == WEAPON_ROCKETLAUNCHER  && 
#line 3740 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penWeapon  -> m_iWantedWeapon  == WEAPON_ROCKETLAUNCHER ) || (penWeapon  -> m_iCurrentWeapon  == WEAPON_IRONCANNON  && 
#line 3741 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penWeapon  -> m_iWantedWeapon  == WEAPON_IRONCANNON )){
#line 3742 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_ulFlags  & PLF_ISZOOMING ){
#line 3743 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  &= ~ PLF_ISZOOMING ;
#line 3744 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penWeapon  -> m_bSniping  = FALSE ;
#line 3745 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penWeapon  -> m_fSniperFOVlast  = penWeapon  -> m_fSniperFOV  = penWeapon  -> m_fSniperMaxFOV ;
#line 3746 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soSniperZoom  , SOUND_SILENCE  , SOF_3D );
#line 3747 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(_pNetwork  -> IsPlayerLocal  (this )){IFeel_StopEffect  ("SniperZoom");}
#line 3748 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3749 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
else {
#line 3750 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penWeapon  -> m_bSniping  = TRUE ;
#line 3751 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  |= PLF_ISZOOMING ;
#line 3752 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penWeapon  -> m_fSniperFOVlast  = penWeapon  -> m_fSniperFOV  = penWeapon  -> m_fMinimumZoomFOV ;
#line 3753 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soSniperZoom  , SOUND_SNIPER_ZOOM  , SOF_3D  | SOF_LOOP );
#line 3754 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(_pNetwork  -> IsPlayerLocal  (this )){IFeel_PlayEffect  ("SniperZoom");}
#line 3755 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3756 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3757 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3758 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 3764 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::SetGameEnd(void) 
#line 3765 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3766 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
_pNetwork  -> SetGameFinished  ();
#line 3768 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
for(INDEX iPlayer  = 0;iPlayer  < GetMaxPlayers  ();iPlayer  ++){
#line 3769 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CEntity  * pen  = GetPlayerEntity  (iPlayer );
#line 3770 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pen  != NULL ){
#line 3771 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(cmp_ppenPlayer  == NULL  && _pNetwork  -> IsPlayerLocal  (pen )){
#line 3772 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
cmp_ppenPlayer  = (CPlayer  *) pen ;
#line 3773 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3774 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3775 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3776 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 3778 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::CheckGameEnd(void) 
#line 3779 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3780 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL bFinished  = FALSE ;
#line 3782 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iTimeLimit  = GetSP  () -> sp_iTimeLimit ;
#line 3783 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(iTimeLimit  > 0 && _pTimer  -> CurrentTick  () >= iTimeLimit  * 60.0f){
#line 3784 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bFinished  = TRUE ;
#line 3785 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3787 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iFragLimit  = GetSP  () -> sp_iFragLimit ;
#line 3788 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(iFragLimit  > 0 && m_psLevelStats  . ps_iKills  >= iFragLimit ){
#line 3789 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bFinished  = TRUE ;
#line 3790 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3792 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iScoreLimit  = GetSP  () -> sp_iScoreLimit ;
#line 3793 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(iScoreLimit  > 0 && m_psLevelStats  . ps_iScore  >= iScoreLimit ){
#line 3794 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bFinished  = TRUE ;
#line 3795 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3797 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(bFinished ){
#line 3798 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetGameEnd  ();
#line 3799 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3800 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 3803 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::PreapplyAction(const CPlayerAction & paAction) 
#line 3804 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3805 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 3808 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::ApplyAction(const CPlayerAction & paOriginal,FLOAT tmLatency) 
#line 3809 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3810 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! (m_ulFlags  & PLF_INITIALIZED )){return ;}
#line 3814 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_ulFlags  & PLF_NOTCONNECTED ){
#line 3816 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetConnected  ();
#line 3817 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3819 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  |= PLF_APPLIEDACTION ;
#line 3822 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerAction  paAction  = paOriginal ;
#line 3827 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ANGLE3D aDeltaRotation  = paAction  . pa_aRotation  - m_aLastRotation ;
#line 3828 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ANGLE3D aDeltaViewRotation  = paAction  . pa_aViewRotation  - m_aLastViewRotation ;
#line 3830 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_ulFlags  & PLF_ISZOOMING ){
#line 3831 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fRotationDamping  = ((CPlayerWeapons  &) * m_penWeapons ) . m_fSniperFOV  / ((CPlayerWeapons  &) * m_penWeapons ) . m_fSniperMaxFOV ;
#line 3832 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
aDeltaRotation  *= fRotationDamping ;
#line 3833 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
aDeltaViewRotation  *= fRotationDamping ;
#line 3834 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3836 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_aLastRotation  = paAction  . pa_aRotation ;
#line 3837 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_aLastViewRotation  = paAction  . pa_aViewRotation ;
#line 3839 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
paAction  . pa_aRotation  = aDeltaRotation ;
#line 3840 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
paAction  . pa_aViewRotation  = aDeltaViewRotation ;
#line 3844 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
paAction  . pa_aRotation  /= _pTimer  -> TickQuantum ;
#line 3845 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
paAction  . pa_aViewRotation  /= _pTimer  -> TickQuantum ;
#line 3848 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CEntity  * penMe  = this ;
#line 3849 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(IsPredictor  ()){
#line 3850 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penMe  = penMe  -> GetPredicted  ();
#line 3851 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3852 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetPredictable  (! _pNetwork  -> IsPlayerLocal  (penMe ));
#line 3855 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! IsPredictor  ()){
#line 3856 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CheckGameEnd  ();
#line 3857 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3860 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
paAction  . pa_vTranslation  (1) = Clamp  (paAction  . pa_vTranslation  (1) , - plr_fSpeedSide  , plr_fSpeedSide );
#line 3861 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
paAction  . pa_vTranslation  (2) = Clamp  (paAction  . pa_vTranslation  (2) , - plr_fSpeedUp  , plr_fSpeedUp );
#line 3862 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
paAction  . pa_vTranslation  (3) = Clamp  (paAction  . pa_vTranslation  (3) , - plr_fSpeedForward  , plr_fSpeedBackward );
#line 3865 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(Abs  (paAction  . pa_vTranslation  (3)) < plr_fSpeedForward  / 1.99f 
#line 3866 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
&& Abs  (paAction  . pa_vTranslation  (1)) < plr_fSpeedSide  / 1.99f){
#line 3868 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_fStepDnHeight  = 1.5f;
#line 3871 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 3873 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_fStepDnHeight  = - 1;
#line 3874 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3877 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D & v  = paAction  . pa_vTranslation ;
#line 3878 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fDiag  = Sqrt  (v  (1) * v  (1) + v  (3) * v  (3));
#line 3879 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(fDiag  > 0.01f){
#line 3880 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fDiagLimited  = Min  (fDiag  , plr_fSpeedForward );
#line 3881 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fFactor  = fDiagLimited  / fDiag ;
#line 3882 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
v  (1) *= fFactor ;
#line 3883 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
v  (3) *= fFactor ;
#line 3884 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3886 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ulButtonsNow  = paAction  . pa_ulButtons ;
#line 3887 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ulButtonsBefore  = m_ulLastButtons ;
#line 3888 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ulNewButtons  = ulButtonsNow  & ~ ulButtonsBefore ;
#line 3889 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ulReleasedButtons  = (~ ulButtonsNow ) & (ulButtonsBefore );
#line 3891 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulLastButtons  = ulButtonsNow ;
#line 3892 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_plLastViewpoint  = en_plViewpoint ;
#line 3895 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerWeapons  * penWeapon  = GetPlayerWeapons  ();
#line 3896 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if((penWeapon  -> m_iCurrentWeapon  == WEAPON_SNIPER ) || (penWeapon  -> m_iCurrentWeapon  == WEAPON_TOMMYGUN ) || (penWeapon  -> m_iCurrentWeapon  == WEAPON_ROCKETLAUNCHER ) || (penWeapon  -> m_iCurrentWeapon  == WEAPON_IRONCANNON ))
#line 3897 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3898 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(bUseButtonHeld  && m_ulFlags  & PLF_ISZOOMING )
#line 3899 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3900 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penWeapon  -> m_fSniperFOVlast  = penWeapon  -> m_fSniperFOV ;
#line 3901 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penWeapon  -> m_fSniperFOV  -= penWeapon  -> m_fSnipingZoomSpeed ;
#line 3902 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(penWeapon  -> m_fSniperFOV  < penWeapon  -> m_fSniperMinFOV )
#line 3903 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3904 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penWeapon  -> m_fSniperFOVlast  = penWeapon  -> m_fSniperFOV  = penWeapon  -> m_fSniperMinFOV ;
#line 3905 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soSniperZoom  , SOUND_SILENCE  , SOF_3D );
#line 3906 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(_pNetwork  -> IsPlayerLocal  (this )){IFeel_StopEffect  ("SniperZoom");}
#line 3907 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3908 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3909 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ulReleasedButtons  & PLACT_USE_HELD )
#line 3910 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3911 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penWeapon  -> m_fSniperFOVlast  = penWeapon  -> m_fSniperFOV ;
#line 3912 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soSniperZoom  , SOUND_SILENCE  , SOF_3D );
#line 3913 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(_pNetwork  -> IsPlayerLocal  (this )){IFeel_StopEffect  ("SniperZoom");}
#line 3914 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3915 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3918 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetFlags  () & ENF_ALIVE ){
#line 3920 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_penActionMarker  == NULL ){
#line 3922 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
AliveActions  (paAction );
#line 3924 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 3926 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
AutoActions  (paAction );
#line 3927 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3929 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 3930 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
DeathActions  (paAction );
#line 3931 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3933 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(Abs  (_pTimer  -> CurrentTick  () - m_tmAnalyseEnd ) < _pTimer  -> TickQuantum  * 2){
#line 3934 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmAnalyseEnd  = 0;
#line 3935 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_bPendingMessage  = TRUE ;
#line 3936 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmMessagePlay  = 0;
#line 3937 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3938 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_bPendingMessage  && ! IsFuss  ()){
#line 3939 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_bPendingMessage  = FALSE ;
#line 3940 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmMessagePlay  = _pTimer  -> CurrentTick  () + 1.0f;
#line 3941 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmAnimateInbox  = _pTimer  -> CurrentTick  ();
#line 3942 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3943 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(Abs  (_pTimer  -> CurrentTick  () - m_tmMessagePlay ) < _pTimer  -> TickQuantum  * 2){
#line 3944 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_bPendingMessage  = FALSE ;
#line 3945 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmAnalyseEnd  = 0;
#line 3947 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! m_bComputerInvoked  && GetSP  () -> sp_bSinglePlayer ){
#line 3948 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PrintCenterMessage  (this  , this  , 
#line 3949 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
TRANS  ("Press USE to read the message!") , 5.0f , MSS_NONE );
#line 3950 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3951 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3954 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(CheatsEnabled  ()){
#line 3955 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Cheats  ();
#line 3956 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3959 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(cht_iGoToMarker  > 0 && (GetFlags  () & ENF_ALIVE )){
#line 3961 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iLastViewState  = m_iViewState ;
#line 3962 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SendEvent  (ERebirth  ());
#line 3963 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 3966 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
UpdateLatency  (tmLatency );
#line 3969 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CheckHighScore  ();
#line 3970 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 3974 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::Disconnect(void) 
#line 3975 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3977 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_strName  = GetPlayerName  ();
#line 3979 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_pcCharacter  = CPlayerCharacter  ();
#line 3981 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SendEvent  (EDisconnected  ());
#line 3982 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 3985 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::CharacterChanged(const CPlayerCharacter & pcNew) 
#line 3986 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 3988 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerCharacter  pcOrg  = en_pcCharacter ;
#line 3991 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_pcCharacter  = pcNew ;
#line 3992 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ValidateCharacter  ();
#line 3995 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pcOrg  . GetName  () != pcNew  . GetName  ()){
#line 3997 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPrintF  (TRANS  ("%s is now known as %s\n") , 
#line 3998 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pcOrg  . GetNameForPrinting  () , pcNew  . GetNameForPrinting  ());
#line 3999 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4002 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pcOrg  . GetTeam  () != pcNew  . GetTeam  ()){
#line 4004 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPrintF  (TRANS  ("%s switched to team %s\n") , 
#line 4005 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pcNew  . GetNameForPrinting  () , pcNew  . GetTeamForPrinting  ());
#line 4006 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4009 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerSettings  * ppsOrg  = (CPlayerSettings  *) pcOrg  . pc_aubAppearance ;
#line 4010 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerSettings  * ppsNew  = (CPlayerSettings  *) pcNew  . pc_aubAppearance ;
#line 4011 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(memcmp  (ppsOrg  -> ps_achModelFile  , ppsNew  -> ps_achModelFile  , sizeof  (ppsOrg  -> ps_achModelFile )) != 0){
#line 4013 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString strNewLook ;
#line 4014 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL bSuccess  = SetPlayerAppearance  (& m_moRender  , & en_pcCharacter  , strNewLook  , FALSE );
#line 4016 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(bSuccess ){
#line 4017 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ParseGender  (strNewLook );
#line 4019 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPrintF  (TRANS  ("%s now appears as %s\n") , 
#line 4020 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pcNew  . GetNameForPrinting  () , strNewLook );
#line 4022 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 4024 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPrintF  (TRANS  ("Cannot change appearance for %s: setting '%s' is unavailable\n") , 
#line 4025 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pcNew  . GetNameForPrinting  () , (const char  *) ppsNew  -> GetModelFilename  ());
#line 4026 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4028 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetPlayerAnimator  () -> SyncWeapon  ();
#line 4029 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4031 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL b3RDPersonOld  = ppsOrg  -> ps_ulFlags  & PSF_PREFER3RDPERSON ;
#line 4032 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL b3RDPersonNew  = ppsNew  -> ps_ulFlags  & PSF_PREFER3RDPERSON ;
#line 4033 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if((b3RDPersonOld  && ! b3RDPersonNew  && m_iViewState  == PVT_3RDPERSONVIEW ) 
#line 4034 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
|| (b3RDPersonNew  && ! b3RDPersonOld  && m_iViewState  == PVT_PLAYEREYES )){
#line 4035 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ChangePlayerView  ();
#line 4036 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4037 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 4041 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::AliveActions(const CPlayerAction & pa) 
#line 4042 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 4043 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerAction  paAction  = pa ;
#line 4046 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_penCamera  != NULL ){
#line 4048 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
paAction  . pa_vTranslation  = FLOAT3D (0 , 0 , 0);
#line 4049 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
paAction  . pa_aRotation  = ANGLE3D (0 , 0 , 0);
#line 4050 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
paAction  . pa_aViewRotation  = ANGLE3D (0 , 0 , 0);
#line 4052 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ulNewButtons  & (PLACT_FIRE  | PLACT_USE )){
#line 4054 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penCamera  = NULL ;
#line 4055 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4056 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 4057 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ButtonsActions  (paAction );
#line 4058 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4061 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ActiveActions  (paAction );
#line 4064 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT tmSinceWounding  = _pTimer  -> CurrentTick  () - m_tmWoundedTime ;
#line 4065 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(tmSinceWounding  < 4.0f){
#line 4067 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fDamageAmmount  *= 1.0f - tmSinceWounding  / 4.0f;
#line 4068 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 4070 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fDamageAmmount  = 0.0f;
#line 4071 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4072 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 4075 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::AutoActions(const CPlayerAction & pa) 
#line 4076 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 4078 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ulNewButtons  & (PLACT_FIRE  | PLACT_ALTFIRE  | PLACT_USE  | PLACT_COMPUTER )){
#line 4079 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_penCamera  != NULL ){
#line 4080 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CEntity  * penOnBreak  = ((CCamera  &) * m_penCamera ) . m_penOnBreak ;
#line 4081 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(penOnBreak  != NULL ){
#line 4082 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SendToTarget  (penOnBreak  , EET_TRIGGER  , this );
#line 4083 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4084 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4085 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4087 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerAction  paAction  = pa ;
#line 4089 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
paAction  . pa_vTranslation  = FLOAT3D (0 , 0 , 0);
#line 4090 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
paAction  . pa_aRotation  = ANGLE3D (0 , 0 , 0);
#line 4091 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
paAction  . pa_aViewRotation  = ANGLE3D (0 , 0 , 0);
#line 4094 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_fAutoSpeed  > 0){
#line 4095 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D vDelta  = 
#line 4096 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penActionMarker  -> GetPlacement  () . pl_PositionVector  - 
#line 4097 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetPlacement  () . pl_PositionVector ;
#line 4098 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fDistance  = vDelta  . Length  ();
#line 4099 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(fDistance  > 0.1f){
#line 4100 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vDelta  /= fDistance ;
#line 4101 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ANGLE aDH  = GetRelativeHeading  (vDelta );
#line 4104 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fSpeed  = m_fAutoSpeed ;
#line 4105 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetActionMarker  () -> m_paaAction  == PAA_RUNANDSTOP ){
#line 4107 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fSpeed  = Min  (fSpeed  , fDistance  / _pTimer  -> TickQuantum );
#line 4108 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4110 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(Abs  (aDH ) > 5.0f){
#line 4111 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(fSpeed  > m_fAutoSpeed  - 0.1f){
#line 4112 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
aDH  = Clamp  (aDH  , - 30.0f , 30.0f);
#line 4113 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4114 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
paAction  . pa_aRotation  = ANGLE3D (aDH  / _pTimer  -> TickQuantum  , 0 , 0);
#line 4115 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4117 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
paAction  . pa_vTranslation  = FLOAT3D (0 , 0 , - fSpeed );
#line 4118 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4119 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 4120 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
paAction  . pa_vTranslation  = m_vAutoSpeed ;
#line 4121 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4123 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerActionMarker  * ppam  = GetActionMarker  ();
#line 4124 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ASSERT  (ppam  != NULL );
#line 4125 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ppam  -> m_paaAction  == PAA_LOGO_FIRE_MINIGUN  || ppam  -> m_paaAction  == PAA_LOGO_FIRE_INTROSE )
#line 4126 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 4127 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_tmMinigunAutoFireStart  != - 1)
#line 4128 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 4129 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT tmDelta  = _pTimer  -> CurrentTick  () - m_tmMinigunAutoFireStart ;
#line 4130 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT aDH  = 0.0f;
#line 4131 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT aDP  = 0.0f;
#line 4132 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(tmDelta  >= 0.0f && tmDelta  <= 0.75f)
#line 4133 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 4134 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
aDH  = 0.0f;
#line 4135 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4136 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
else if(tmDelta  >= 0.75f)
#line 4137 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 4138 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fDT  = tmDelta  - 0.75f;
#line 4139 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
aDH  = 1.0f * cos  (fDT  + PI  / 2.0f);
#line 4140 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
aDP  = 0.5f * cos  (fDT );
#line 4141 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4142 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ppam  -> m_paaAction  == PAA_LOGO_FIRE_INTROSE )
#line 4143 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 4144 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fRatio  = CalculateRatio  (tmDelta  , 0.25 , 5 , 0.1f , 0.1f);
#line 4145 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
aDP  = 2.0f * sin  (tmDelta  * 200.0f) * fRatio ;
#line 4146 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(tmDelta  > 2.5f)
#line 4147 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 4148 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
aDP  += (tmDelta  - 2.5f) * 4.0f;
#line 4149 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4150 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4151 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
paAction  . pa_aRotation  = ANGLE3D (aDH  / _pTimer  -> TickQuantum  , aDP  / _pTimer  -> TickQuantum  , 0);
#line 4152 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4153 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4156 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! (m_ulFlags  & PLF_AUTOMOVEMENTS )){
#line 4157 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ActiveActions  (paAction );
#line 4158 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4159 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 4161 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::GetLerpedWeaponPosition(FLOAT3D vRel,CPlacement3D & pl) 
#line 4162 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 4163 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pl  = CPlacement3D (vRel  , ANGLE3D (0 , 0 , 0));
#line 4164 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlacement3D plView ;
#line 4165 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
_bDiscard3rdView  = GetViewEntity  () != this ;
#line 4166 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetLerpedAbsoluteViewPlacement  (plView );
#line 4167 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pl  . RelativeToAbsolute  (plView );
#line 4168 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 4170 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::SpawnBubbles(INDEX ctBubbles) 
#line 4171 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 4172 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
for(INDEX iBouble  = 0;iBouble  < ctBubbles ;iBouble  ++)
#line 4173 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 4174 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D vRndRel  = FLOAT3D ((FRnd  () - 0.5f) * 0.25f , - 0.25f , - 0.5f + FRnd  () / 10.0f);
#line 4175 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ANGLE3D aDummy  = ANGLE3D (0 , 0 , 0);
#line 4176 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlacement3D plMouth  = CPlacement3D (vRndRel  , aDummy );
#line 4178 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plMouth  . RelativeToAbsolute  (en_plViewpoint );
#line 4179 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plMouth  . RelativeToAbsolute  (GetPlacement  ());
#line 4180 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D vRndSpd  = FLOAT3D ((FRnd  () - 0.5f) * 0.25f , (FRnd  () - 0.5f) * 0.25f , (FRnd  () - 0.5f) * 0.25f);
#line 4181 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
AddBouble  (plMouth  . pl_PositionVector  , vRndSpd );
#line 4182 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4183 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 4185 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::PlayPowerUpSound(void) {
#line 4186 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_soPowerUpBeep  . Set3DParameters  (50.0f , 10.0f , 4.0f , 1.0f);
#line 4187 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soPowerUpBeep  , SOUND_POWERUP_BEEP  , SOF_3D  | SOF_VOLUMETRIC  | SOF_LOCAL );
#line 4188 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 4190 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::ActiveActions(const CPlayerAction & paAction) 
#line 4191 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 4193 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D vTranslation  = paAction  . pa_vTranslation ;
#line 4195 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(cht_fTranslationMultiplier  && CheatsEnabled  ()){
#line 4196 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vTranslation  *= cht_fTranslationMultiplier ;
#line 4197 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4200 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(((CPlayerWeapons  &) * m_penWeapons ) . m_iCurrentWeapon  == WEAPON_KNIFE  && 
#line 4201 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
! GetSP  () -> sp_bCooperative ){
#line 4202 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vTranslation  *= 1.3f;
#line 4203 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4206 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const TIME  tmDelta  = m_tmSeriousSpeed  - _pTimer  -> CurrentTick  ();
#line 4207 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(tmDelta  > 0 && m_fAutoSpeed  == 0.0f){
#line 4208 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vTranslation  (1) *= 2.0f;
#line 4209 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vTranslation  (3) *= 2.0f;
#line 4210 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4212 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_fAcceleration  = plr_fAcceleration ;
#line 4213 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_fDeceleration  = plr_fDeceleration ;
#line 4214 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! GetSP  () -> sp_bCooperative )
#line 4215 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 4216 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vTranslation  (1) *= 1.35f;
#line 4217 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vTranslation  (3) *= 1.35f;
#line 4219 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4221 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CContentType  & ctUp  = GetWorld  () -> wo_actContentTypes  [ en_iUpContent  ];
#line 4222 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CContentType  & ctDn  = GetWorld  () -> wo_actContentTypes  [ en_iDnContent  ];
#line 4223 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlayerState  pstWanted  = PST_STAND ;
#line 4224 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL bUpSwimable  = (ctUp  . ct_ulFlags  & CTF_SWIMABLE ) && en_fImmersionFactor  <= 0.99f;
#line 4225 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL bDnSwimable  = (ctDn  . ct_ulFlags  & CTF_SWIMABLE ) && en_fImmersionFactor  >= 0.5f;
#line 4228 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(bUpSwimable  || bDnSwimable ){
#line 4230 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  |= PLF_JUMPALLOWED ;
#line 4233 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(en_fImmersionFactor  >= 0.99f || bUpSwimable ){
#line 4235 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pstWanted  = PST_DIVE ;
#line 4237 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 4239 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pstWanted  = PST_SWIM ;
#line 4240 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4242 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 4244 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(en_penReference  != NULL ){
#line 4246 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fFallTime  = 0.0f;
#line 4249 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 4251 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fFallTime  += _pTimer  -> TickQuantum ;
#line 4252 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4254 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(vTranslation  (2) < 0.1f){
#line 4256 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  |= PLF_JUMPALLOWED ;
#line 4257 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4260 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_fFallTime  >= 0.5f){
#line 4262 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pstWanted  = PST_FALL ;
#line 4264 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 4266 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(vTranslation  (2) < - 0.01f){
#line 4268 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pstWanted  = PST_CROUCH ;
#line 4270 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 4272 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pstWanted  = PST_STAND ;
#line 4273 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4274 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4275 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4279 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! (GetPhysicsFlags  () & EPF_TRANSLATEDBYGRAVITY )){
#line 4280 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetDesiredRotation  (paAction  . pa_aRotation );
#line 4281 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
StartModelAnim  (PLAYER_ANIM_STAND  , AOF_LOOPING  | AOF_NORESTART );
#line 4282 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetDesiredTranslation  (vTranslation );
#line 4284 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 4285 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlayerState  pstOld  = m_pstState ;
#line 4288 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pstWanted  != m_pstState ){
#line 4290 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
switch(pstWanted ){
#line 4292 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case PST_STAND : {
#line 4294 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ChangeCollisionBoxIndexNow  (PLAYER_COLLISION_BOX_STAND )){
#line 4295 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_plViewpoint  . pl_PositionVector  (2) = plr_fViewHeightStand ;
#line 4296 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_pstState  == PST_CROUCH ){
#line 4297 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerAnimator  &) * m_penAnimator ) . Rise  ();
#line 4298 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 4299 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerAnimator  &) * m_penAnimator ) . Stand  ();
#line 4300 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4301 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_pstState  = PST_STAND ;
#line 4302 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4303 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}break ;
#line 4305 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case PST_CROUCH : {
#line 4307 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ChangeCollisionBoxIndexNow  (PLAYER_COLLISION_BOX_CROUCH )){
#line 4308 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_pstState  = PST_CROUCH ;
#line 4309 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_plViewpoint  . pl_PositionVector  (2) = plr_fViewHeightCrouch ;
#line 4310 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerAnimator  &) * m_penAnimator ) . Crouch  ();
#line 4311 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4312 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}break ;
#line 4314 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case PST_SWIM : {
#line 4316 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ChangeCollisionBoxIndexNow  (PLAYER_COLLISION_BOX_SWIMSMALL )){
#line 4317 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ChangeCollisionBoxIndexWhenPossible  (PLAYER_COLLISION_BOX_SWIM );
#line 4318 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_pstState  = PST_SWIM ;
#line 4319 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_plViewpoint  . pl_PositionVector  (2) = plr_fViewHeightSwim ;
#line 4320 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerAnimator  &) * m_penAnimator ) . Swim  ();
#line 4321 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fSwimTime  = _pTimer  -> CurrentTick  ();
#line 4322 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4323 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}break ;
#line 4325 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case PST_DIVE : {
#line 4327 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ChangeCollisionBoxIndexNow  (PLAYER_COLLISION_BOX_SWIMSMALL )){
#line 4328 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ChangeCollisionBoxIndexWhenPossible  (PLAYER_COLLISION_BOX_SWIM );
#line 4329 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_pstState  = PST_DIVE ;
#line 4330 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_plViewpoint  . pl_PositionVector  (2) = plr_fViewHeightDive ;
#line 4331 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerAnimator  &) * m_penAnimator ) . Swim  ();
#line 4332 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4333 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}break ;
#line 4335 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case PST_FALL : {
#line 4337 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ChangeCollisionBoxIndexNow  (PLAYER_COLLISION_BOX_STAND )){
#line 4338 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_pstState  = PST_FALL ;
#line 4339 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_plViewpoint  . pl_PositionVector  (2) = plr_fViewHeightStand ;
#line 4340 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerAnimator  &) * m_penAnimator ) . Fall  ();
#line 4341 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4342 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}break ;
#line 4343 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4344 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4347 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_pstState  != pstOld ){
#line 4349 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL bWasInWater  = (pstOld  == PST_SWIM  || pstOld  == PST_DIVE );
#line 4350 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL bIsInWater  = (m_pstState  == PST_SWIM  || m_pstState  == PST_DIVE );
#line 4352 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(bIsInWater  && ! bWasInWater ){
#line 4353 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soBody  , GenderSound  (SOUND_WATER_ENTER ) , SOF_3D );
#line 4355 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(! bIsInWater  && bWasInWater ){
#line 4356 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soBody  , GenderSound  (SOUND_WATER_LEAVE ) , SOF_3D );
#line 4357 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmOutOfWater  = _pTimer  -> CurrentTick  ();
#line 4360 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(bIsInWater ){
#line 4362 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pstOld  == PST_SWIM  && m_pstState  == PST_DIVE ){
#line 4363 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soFootL  , GenderSound  (SOUND_DIVEIN ) , SOF_3D );
#line 4364 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(_pNetwork  -> IsPlayerLocal  (this )){IFeel_PlayEffect  ("DiveIn");}
#line 4365 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_bMoveSoundLeft  = TRUE ;
#line 4366 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmMoveSound  = _pTimer  -> CurrentTick  ();
#line 4368 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(m_pstState  == PST_SWIM  && pstOld  == PST_DIVE ){
#line 4369 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soFootL  , GenderSound  (SOUND_DIVEOUT ) , SOF_3D );
#line 4370 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_bMoveSoundLeft  = TRUE ;
#line 4371 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmMoveSound  = _pTimer  -> CurrentTick  ();
#line 4372 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4373 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4375 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pstOld  == PST_FALL  && (m_pstState  == PST_STAND  || m_pstState  == PST_CROUCH )){
#line 4376 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soFootL  , GenderSound  (SOUND_LAND ) , SOF_3D );
#line 4377 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(_pNetwork  -> IsPlayerLocal  (this )){IFeel_PlayEffect  ("Land");}
#line 4378 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4380 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_pstState  == PST_DIVE ){
#line 4381 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_soLocalAmbientLoop  . Set3DParameters  (50.0f , 10.0f , 0.25f , 1.0f);
#line 4382 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soLocalAmbientLoop  , SOUND_WATERAMBIENT  , 
#line 4383 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SOF_LOOP  | SOF_3D  | SOF_VOLUMETRIC  | SOF_LOCAL );
#line 4384 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(pstOld  == PST_DIVE ){
#line 4385 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_soLocalAmbientLoop  . Stop  ();
#line 4386 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4387 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4389 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(en_tmJumped  + _pTimer  -> TickQuantum  >= _pTimer  -> CurrentTick  () && 
#line 4390 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_tmJumped  <= _pTimer  -> CurrentTick  () && en_penReference  == NULL ){
#line 4392 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetDefaultMouthPitch  ();
#line 4393 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soMouth  , GenderSound  (SOUND_JUMP ) , SOF_3D );
#line 4394 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(_pNetwork  -> IsPlayerLocal  (this )){IFeel_PlayEffect  ("Jump");}
#line 4396 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  &= ~ PLF_JUMPALLOWED ;
#line 4397 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4400 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_pstState  == PST_SWIM  || pstWanted  == PST_SWIM  
#line 4401 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
|| (pstWanted  == PST_DIVE  && m_pstState  != pstWanted )){
#line 4402 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_fDensity  = 500.0f;
#line 4403 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 4404 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_fDensity  = 1000.0f;
#line 4405 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4407 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(_pTimer  -> CurrentTick  () >= m_tmNextAmbientOnce )
#line 4408 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 4409 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_pstState  == PST_DIVE )
#line 4410 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 4411 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soLocalAmbientOnce  , SOUND_WATERBUBBLES  , 
#line 4412 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SOF_3D  | SOF_VOLUMETRIC  | SOF_LOCAL );
#line 4413 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_soLocalAmbientOnce  . Set3DParameters  (25.0f , 5.0f , 2.0f , Lerp  (0.5f , 1.5f , FRnd  ()));
#line 4414 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SpawnBubbles  (5 + INDEX (FRnd  () * 5));
#line 4415 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4416 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmNextAmbientOnce  = _pTimer  -> CurrentTick  () + 5.0f + FRnd  ();
#line 4417 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4421 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_pstState  == PST_CROUCH ){
#line 4423 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vTranslation  /= 2.5f;
#line 4425 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vTranslation  (2) = 0.0f;
#line 4426 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4429 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_pstState  == PST_DIVE ){
#line 4431 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOATmatrix3D mPitch ;
#line 4432 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
MakeRotationMatrixFast  (mPitch  , FLOAT3D (0 , en_plViewpoint  . pl_OrientationAngle  (2) , 0));
#line 4433 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fZ  = vTranslation  (3);
#line 4434 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vTranslation  (3) = 0.0f;
#line 4435 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vTranslation  += FLOAT3D (0 , 0 , fZ ) * mPitch ;
#line 4437 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(m_pstState  == PST_SWIM ){
#line 4439 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOATmatrix3D mPitch ;
#line 4440 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fPitch  = en_plViewpoint  . pl_OrientationAngle  (2);
#line 4441 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(fPitch  > - 30.0f){
#line 4442 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fPitch  = 0;
#line 4443 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4444 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
MakeRotationMatrixFast  (mPitch  , FLOAT3D (0 , fPitch  , 0));
#line 4445 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fZ  = vTranslation  (3);
#line 4446 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vTranslation  (3) = 0.0f;
#line 4447 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vTranslation  += FLOAT3D (0 , 0 , fZ ) * mPitch ;
#line 4448 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4451 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_pstState  == PST_SWIM  || m_pstState  == PST_DIVE ){
#line 4453 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vTranslation  (2) *= 0.5f;
#line 4454 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4457 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_pstState  == PST_SWIM  && _pTimer  -> CurrentTick  () < m_fSwimTime  + 0.5f 
#line 4458 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
|| _pTimer  -> CurrentTick  () < m_tmOutOfWater  + 0.5f){
#line 4460 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vTranslation  (2) = 0;
#line 4462 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4467 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! (m_ulFlags  & PLF_JUMPALLOWED ) && vTranslation  (2) > 0){
#line 4468 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vTranslation  (2) = 0.0f;
#line 4469 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4472 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetDesiredTranslation  (vTranslation );
#line 4475 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_plViewpoint  . Rotate_HPB  (ANGLE3D (
#line 4476 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
(ANGLE) ((FLOAT) paAction  . pa_aRotation  (1) * _pTimer  -> TickQuantum ) , 
#line 4477 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
(ANGLE) ((FLOAT) paAction  . pa_aRotation  (2) * _pTimer  -> TickQuantum ) , 
#line 4478 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
(ANGLE) ((FLOAT) paAction  . pa_aRotation  (3) * _pTimer  -> TickQuantum )));
#line 4480 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
RoundViewAngle  (en_plViewpoint  . pl_OrientationAngle  (2) , PITCH_MAX );
#line 4481 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
RoundViewAngle  (en_plViewpoint  . pl_OrientationAngle  (3) , BANKING_MAX );
#line 4484 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(vTranslation  . Length  () > 0.1f){
#line 4485 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetDesiredRotation  (ANGLE3D (en_plViewpoint  . pl_OrientationAngle  (1) / _pTimer  -> TickQuantum  , 0.0f , 0.0f));
#line 4486 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_ulFlags  & PLF_VIEWROTATIONCHANGED ){
#line 4487 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  &= ~ PLF_VIEWROTATIONCHANGED ;
#line 4488 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOATmatrix3D mViewRot ;
#line 4489 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
MakeRotationMatrixFast  (mViewRot  , ANGLE3D (en_plViewpoint  . pl_OrientationAngle  (1) , 0 , 0));
#line 4490 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D vTransRel  = vTranslation  * mViewRot ;
#line 4491 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetDesiredTranslation  (vTransRel );
#line 4492 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4493 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_plViewpoint  . pl_OrientationAngle  (1) = 0.0f;
#line 4496 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 4497 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  |= PLF_VIEWROTATIONCHANGED ;
#line 4498 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetDesiredRotation  (ANGLE3D (0.0f , 0.0f , 0.0f));
#line 4499 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ANGLE aDiff  = en_plViewpoint  . pl_OrientationAngle  (1) - HEADING_MAX ;
#line 4500 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(aDiff  > 0.0f){
#line 4501 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetDesiredRotation  (ANGLE3D (aDiff  / _pTimer  -> TickQuantum  , 0.0f , 0.0f));
#line 4502 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4503 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
aDiff  = en_plViewpoint  . pl_OrientationAngle  (1) + HEADING_MAX ;
#line 4504 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(aDiff  < 0.0f){
#line 4505 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetDesiredRotation  (ANGLE3D (aDiff  / _pTimer  -> TickQuantum  , 0.0f , 0.0f));
#line 4506 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4507 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
RoundViewAngle  (en_plViewpoint  . pl_OrientationAngle  (1) , HEADING_MAX );
#line 4508 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4511 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fWantSpeed  = en_vDesiredTranslationRelative  . Length  ();
#line 4512 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fGoesSpeed  = en_vCurrentTranslationAbsolute  . Length  ();
#line 4513 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL bOnGround  = (m_pstState  == PST_STAND ) || (m_pstState  == PST_CROUCH );
#line 4514 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL bRunning  = bOnGround  && fWantSpeed  > 5.0f && fGoesSpeed  > 5.0f;
#line 4515 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL bWalking  = bOnGround  && ! bRunning  && fWantSpeed  > 2.0f && fGoesSpeed  > 2.0f;
#line 4516 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL bSwimming  = (m_pstState  == PST_SWIM ) && fWantSpeed  > 2.0f && fGoesSpeed  > 2.0f;
#line 4517 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL bDiving  = (m_pstState  == PST_DIVE ) && fWantSpeed  > 2.0f && fGoesSpeed  > 2.0f;
#line 4518 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
TIME  tmNow  = _pTimer  -> CurrentTick  ();
#line 4519 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iSoundWalkL  = SOUND_WALK_L ;
#line 4520 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iSoundWalkR  = SOUND_WALK_R ;
#line 4521 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if((ctDn  . ct_ulFlags  & CTF_SWIMABLE ) && en_fImmersionFactor  >= 0.1f){
#line 4522 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iSoundWalkL  = SOUND_WATERWALK_L ;
#line 4523 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iSoundWalkR  = SOUND_WATERWALK_R ;
#line 4524 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(en_pbpoStandOn  != NULL  && 
#line 4525 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_pbpoStandOn  -> bpo_bppProperties  . bpp_ubSurfaceType  == SURFACE_SAND ){
#line 4526 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iSoundWalkL  = SOUND_WALK_SAND_L ;
#line 4527 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iSoundWalkR  = SOUND_WALK_SAND_R ;
#line 4528 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(en_pbpoStandOn  != NULL  && 
#line 4529 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_pbpoStandOn  -> bpo_bppProperties  . bpp_ubSurfaceType  == SURFACE_RED_SAND ){
#line 4530 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iSoundWalkL  = SOUND_WALK_SAND_L ;
#line 4531 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iSoundWalkR  = SOUND_WALK_SAND_R ;
#line 4532 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(en_pbpoStandOn  != NULL  && 
#line 4533 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
(en_pbpoStandOn  -> bpo_bppProperties  . bpp_ubSurfaceType  == SURFACE_GRASS  || 
#line 4534 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_pbpoStandOn  -> bpo_bppProperties  . bpp_ubSurfaceType  == SURFACE_GRASS_SLIDING  || 
#line 4535 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_pbpoStandOn  -> bpo_bppProperties  . bpp_ubSurfaceType  == SURFACE_GRASS_NOIMPACT )){
#line 4536 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iSoundWalkL  = SOUND_WALK_GRASS_L ;
#line 4537 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iSoundWalkR  = SOUND_WALK_GRASS_R ;
#line 4538 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(en_pbpoStandOn  != NULL  && 
#line 4539 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_pbpoStandOn  -> bpo_bppProperties  . bpp_ubSurfaceType  == SURFACE_WOOD ){
#line 4540 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iSoundWalkL  = SOUND_WALK_WOOD_L ;
#line 4541 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iSoundWalkR  = SOUND_WALK_WOOD_R ;
#line 4542 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(en_pbpoStandOn  != NULL  && 
#line 4543 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_pbpoStandOn  -> bpo_bppProperties  . bpp_ubSurfaceType  == SURFACE_SNOW ){
#line 4544 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iSoundWalkL  = SOUND_WALK_SNOW_L ;
#line 4545 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iSoundWalkR  = SOUND_WALK_SNOW_R ;
#line 4546 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(en_pbpoStandOn  != NULL  && 
#line 4547 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_pbpoStandOn  -> bpo_bppProperties  . bpp_ubSurfaceType  == SURFACE_GLASS ){
#line 4548 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iSoundWalkL  = SOUND_WALK_L ;
#line 4549 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iSoundWalkR  = SOUND_WALK_R ;
#line 4550 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4551 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
else {
#line 4552 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4553 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iSoundWalkL  += m_iGender  * GENDEROFFSET ;
#line 4554 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iSoundWalkR  += m_iGender  * GENDEROFFSET ;
#line 4555 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(bRunning ){
#line 4556 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(tmNow  > m_tmMoveSound  + plr_fRunSoundDelay ){
#line 4557 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmMoveSound  = tmNow ;
#line 4558 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_bMoveSoundLeft  = ! m_bMoveSoundLeft ;
#line 4559 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_bMoveSoundLeft ){
#line 4560 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soFootL  , iSoundWalkL  , SOF_3D );
#line 4561 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 4562 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soFootR  , iSoundWalkR  , SOF_3D );
#line 4563 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4564 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4565 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(bWalking ){
#line 4566 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(tmNow  > m_tmMoveSound  + plr_fWalkSoundDelay ){
#line 4567 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmMoveSound  = tmNow ;
#line 4568 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_bMoveSoundLeft  = ! m_bMoveSoundLeft ;
#line 4569 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_bMoveSoundLeft ){
#line 4570 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soFootL  , iSoundWalkL  , SOF_3D );
#line 4571 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 4572 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soFootR  , iSoundWalkR  , SOF_3D );
#line 4573 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4574 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4575 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(bDiving ){
#line 4576 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(tmNow  > m_tmMoveSound  + plr_fDiveSoundDelay ){
#line 4577 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmMoveSound  = tmNow ;
#line 4578 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_bMoveSoundLeft  = ! m_bMoveSoundLeft ;
#line 4579 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_bMoveSoundLeft ){
#line 4580 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soFootL  , GenderSound  (SOUND_DIVE_L ) , SOF_3D );
#line 4581 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 4582 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soFootR  , GenderSound  (SOUND_DIVE_R ) , SOF_3D );
#line 4583 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4584 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4585 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(bSwimming ){
#line 4586 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(tmNow  > m_tmMoveSound  + plr_fSwimSoundDelay ){
#line 4587 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmMoveSound  = tmNow ;
#line 4588 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_bMoveSoundLeft  = ! m_bMoveSoundLeft ;
#line 4589 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_bMoveSoundLeft ){
#line 4590 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soFootL  , GenderSound  (SOUND_SWIM_L ) , SOF_3D );
#line 4591 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 4592 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soFootR  , GenderSound  (SOUND_SWIM_R ) , SOF_3D );
#line 4593 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4594 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4595 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4598 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
TIME  tmBreathDelay  = tmNow  - en_tmLastBreathed ;
#line 4599 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(en_tmMaxHoldBreath  - tmBreathDelay  < 30.0f){
#line 4601 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_tmMouthSoundLast  + 2.0f < tmNow ){
#line 4602 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmMouthSoundLast  = tmNow ;
#line 4603 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetRandomMouthPitch  (0.9f , 1.1f);
#line 4604 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soMouth  , GenderSound  (SOUND_DROWN ) , SOF_3D );
#line 4605 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4606 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4609 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerAnimator  &) * m_penAnimator ) . AnimatePlayer  ();
#line 4610 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4611 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 4614 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::RoundViewAngle(ANGLE & aViewAngle,ANGLE aRound) {
#line 4615 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(aViewAngle  > aRound ){
#line 4616 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
aViewAngle  = aRound ;
#line 4617 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4618 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(aViewAngle  < - aRound ){
#line 4619 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
aViewAngle  = - aRound ;
#line 4620 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4621 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 4624 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::DeathActions(const CPlayerAction & paAction) {
#line 4626 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_penView  != NULL ){
#line 4627 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ASSERT  (IsPredicted  () && m_penView  -> IsPredicted  () || IsPredictor  () && m_penView  -> IsPredictor  () || ! IsPredicted  () && ! m_penView  -> IsPredicted  () && ! IsPredictor  () && ! m_penView  -> IsPredictor  ());
#line 4628 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_plViewpoint  . pl_PositionVector  = FLOAT3D (0 , 1 , 0);
#line 4629 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_plViewpoint  . pl_OrientationAngle  += (ANGLE3D (
#line 4630 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
(ANGLE) ((FLOAT) paAction  . pa_aRotation  (1) * _pTimer  -> TickQuantum ) , 
#line 4631 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
(ANGLE) ((FLOAT) paAction  . pa_aRotation  (2) * _pTimer  -> TickQuantum ) , 
#line 4632 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
(ANGLE) ((FLOAT) paAction  . pa_aRotation  (3) * _pTimer  -> TickQuantum )));
#line 4633 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4636 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_iMayRespawn  == 2 && (ulReleasedButtons  & PLACT_FIRE ) && ! IsPredictor  ()){
#line 4638 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_bSinglePlayer ){
#line 4640 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
_pShell  -> Execute  ("gam_bQuickLoad=1;");
#line 4642 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(! GetSP  () -> sp_bCooperative ){
#line 4644 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SendEvent  (EEnd  ());
#line 4646 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 4648 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_ulLastButtons  & PLACT_RELOAD ){
#line 4650 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  &= ~ PLF_RESPAWNINPLACE ;
#line 4651 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4653 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_ctCredits  != 0){
#line 4655 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_ctCredits  == - 1 || GetSP  () -> sp_ctCreditsLeft  != 0){
#line 4657 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_ctCredits  != - 1){
#line 4658 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CSessionProperties  *) GetSP  ()) -> sp_ctCreditsLeft  --;
#line 4659 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4662 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPrintF  (TRANS  ("%s is riding the gun again\n") , GetPlayerName  ());
#line 4663 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SendEvent  (EEnd  ());
#line 4666 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_ctCredits  > 0){
#line 4667 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_ctCreditsLeft  == 0){
#line 4668 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPrintF  (TRANS  ("  no more credits left!\n"));
#line 4669 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 4670 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPrintF  (TRANS  ("  %d credits left\n") , GetSP  () -> sp_ctCreditsLeft );
#line 4671 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4672 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4674 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 4676 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPrintF  (TRANS  ("%s rests in peace - out of credits\n") , GetPlayerName  ());
#line 4677 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4678 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4679 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4680 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4682 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_iMayRespawn  == 1 && ! (ulButtonsNow  & PLACT_FIRE )){
#line 4683 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iMayRespawn  = 2;
#line 4684 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4685 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 4689 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::ButtonsActions(CPlayerAction & paAction) 
#line 4690 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 4692 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if((ulNewButtons  & PLACT_SELECT_WEAPON_MASK ) != 0){
#line 4693 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ESelectWeapon  eSelect ;
#line 4694 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eSelect  . iWeapon  = (ulNewButtons  & PLACT_SELECT_WEAPON_MASK ) >> PLACT_SELECT_WEAPON_SHIFT ;
#line 4695 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . SendEvent  (eSelect );
#line 4696 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4699 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ulNewButtons  & PLACT_WEAPON_NEXT ){
#line 4700 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(((CPlayerWeapons  &) * m_penWeapons ) . m_bSniping ){
#line 4701 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ApplySniperZoom  (0);
#line 4702 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(TRUE ){
#line 4703 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ESelectWeapon  eSelect ;
#line 4704 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eSelect  . iWeapon  = - 1;
#line 4705 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . SendEvent  (eSelect );
#line 4706 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4707 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4710 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ulNewButtons  & PLACT_WEAPON_PREV ){
#line 4711 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(((CPlayerWeapons  &) * m_penWeapons ) . m_bSniping ){
#line 4712 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ApplySniperZoom  (1);
#line 4713 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(TRUE ){
#line 4714 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ESelectWeapon  eSelect ;
#line 4715 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eSelect  . iWeapon  = - 2;
#line 4716 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . SendEvent  (eSelect );
#line 4717 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4718 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4719 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ulNewButtons  & PLACT_WEAPON_FLIP ){
#line 4720 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ESelectWeapon  eSelect ;
#line 4721 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eSelect  . iWeapon  = - 3;
#line 4722 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . SendEvent  (eSelect );
#line 4723 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4726 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ulNewButtons  & PLACT_FIRE ){
#line 4727 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . SendEvent  (EFireWeapon  ());
#line 4728 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4730 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ulReleasedButtons  & PLACT_FIRE ){
#line 4731 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . SendEvent  (EReleaseWeapon  ());
#line 4732 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4734 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ulReleasedButtons  & PLACT_RELOAD ){
#line 4735 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . SendEvent  (EReloadWeapon  ());
#line 4736 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4738 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ulNewButtons  & PLACT_ALTFIRE ){
#line 4739 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . SendEvent  (EAltFireWeapon  ());
#line 4740 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4742 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ulReleasedButtons  & PLACT_ALTFIRE ){
#line 4743 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . SendEvent  (EReleaseWeaponAlt  ());
#line 4744 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4746 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ulNewButtons  & PLACT_FIREBOMB ){
#line 4747 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_iSeriousBombCount  > 0 && m_tmSeriousBombFired  + 4.0f < _pTimer  -> CurrentTick  ()){
#line 4748 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const FLOAT tmNow  = _pTimer  -> CurrentTick  ();
#line 4749 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iLastSeriousBombCount  = m_iSeriousBombCount ;
#line 4750 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Glare  (1.0f , 2.8f , 0.3f , 0.3f);
#line 4751 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iSeriousBombCount  --;
#line 4752 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmSeriousBombFired  = _pTimer  -> CurrentTick  ();
#line 4754 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmSeriousDamage  = tmNow  + m_tmSeriousDamageMax ;
#line 4755 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmSeriousSpeed  = tmNow  + m_tmSeriousSpeedMax ;
#line 4756 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPrintF  ("m_tmSeriousDamage = %i\n" , m_tmSeriousDamage );
#line 4761 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4762 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4767 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ulNewButtons  & PLACT_USE ){
#line 4768 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if((((CPlayerWeapons  &) * m_penWeapons ) . m_iCurrentWeapon  == WEAPON_SNIPER ) || (((CPlayerWeapons  &) * m_penWeapons ) . m_iCurrentWeapon  == WEAPON_TOMMYGUN ) || (((CPlayerWeapons  &) * m_penWeapons ) . m_iCurrentWeapon  == WEAPON_ROCKETLAUNCHER ) || (((CPlayerWeapons  &) * m_penWeapons ) . m_iCurrentWeapon  == WEAPON_IRONCANNON )){
#line 4769 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
UsePressed  (FALSE );
#line 4770 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 4771 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
UsePressed  (ulNewButtons  & PLACT_COMPUTER );
#line 4772 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4774 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if((ulNewButtons  & PLACT_SNIPER_USE  && ((CPlayerWeapons  &) * m_penWeapons ) . m_iCurrentWeapon  == WEAPON_SNIPER ) || (ulNewButtons  & PLACT_SNIPER_USE  && ((CPlayerWeapons  &) * m_penWeapons ) . m_iCurrentWeapon  == WEAPON_TOMMYGUN ) || (ulNewButtons  & PLACT_SNIPER_USE  && ((CPlayerWeapons  &) * m_penWeapons ) . m_iCurrentWeapon  == WEAPON_ROCKETLAUNCHER ) || (ulNewButtons  & PLACT_SNIPER_USE  && ((CPlayerWeapons  &) * m_penWeapons ) . m_iCurrentWeapon  == WEAPON_IRONCANNON )){
#line 4775 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
UsePressed  (FALSE );
#line 4777 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(ulNewButtons  & PLACT_COMPUTER ){
#line 4778 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ComputerPressed  ();
#line 4779 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4782 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ulNewButtons  & PLACT_USE_HELD ){
#line 4783 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bUseButtonHeld  = TRUE ;
#line 4784 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4787 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ulReleasedButtons  & PLACT_USE_HELD ){
#line 4788 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bUseButtonHeld  = FALSE ;
#line 4789 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4792 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ulNewButtons  & PLACT_SNIPER_ZOOMIN ){
#line 4793 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ApplySniperZoom  (1);
#line 4794 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4797 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ulNewButtons  & PLACT_SNIPER_ZOOMOUT ){
#line 4798 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ApplySniperZoom  (0);
#line 4799 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4802 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ulNewButtons  & PLACT_3RD_PERSON_VIEW ){
#line 4803 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ChangePlayerView  ();
#line 4804 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4807 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ulButtonsNow  & PLACT_CENTER_VIEW ){
#line 4809 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
paAction  . pa_aRotation  (2) += Clamp  (- en_plViewpoint  . pl_OrientationAngle  (2) / _pTimer  -> TickQuantum  , - 900.0f , + 900.0f);
#line 4810 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4811 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 4813 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::ApplySniperZoom(BOOL bZoomIn) 
#line 4814 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 4816 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(((CPlayerWeapons  &) * m_penWeapons ) . m_iCurrentWeapon  != WEAPON_SNIPER  || 
#line 4817 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . m_bSniping  == FALSE  || ((CPlayerWeapons  &) * m_penWeapons ) . m_iCurrentWeapon  != WEAPON_TOMMYGUN  
#line 4818 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
|| ((CPlayerWeapons  &) * m_penWeapons ) . m_iCurrentWeapon  != WEAPON_ROCKETLAUNCHER  || ((CPlayerWeapons  &) * m_penWeapons ) . m_iCurrentWeapon  != WEAPON_IRONCANNON ){
#line 4819 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ;
#line 4820 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4821 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL bZoomChanged ;
#line 4822 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if((((CPlayerWeapons  &) * m_penWeapons ) . SniperZoomDiscrete  (bZoomIn  , bZoomChanged )) || (((CPlayerWeapons  &) * m_penWeapons ) . AGZoomDiscrete  (bZoomIn  , bZoomChanged ))){
#line 4823 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(bZoomChanged ){
#line 4824 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soSniperZoom  , SOUND_SNIPER_QZOOM  , SOF_3D );
#line 4825 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4826 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  |= PLF_ISZOOMING ;
#line 4827 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4828 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
else 
#line 4829 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 4830 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  &= ~ PLF_ISZOOMING ;
#line 4831 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soSniperZoom  , SOUND_SILENCE  , SOF_3D );
#line 4832 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(_pNetwork  -> IsPlayerLocal  (this )){IFeel_StopEffect  ("SniperZoom");}
#line 4833 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4834 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 4837 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL CPlayer::CheatsEnabled(void) 
#line 4838 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 4839 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return (GetSP  () -> sp_ctMaxPlayers  == 1 || GetSP  () -> sp_bQuickTest ) && m_penActionMarker  == NULL  && ! _SE_DEMO ;
#line 4840 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 4843 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::Cheats(void) 
#line 4844 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 4845 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL bFlyOn  = cht_bFly  || cht_bGhost ;
#line 4847 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL bIsFlying  = ! (GetPhysicsFlags  () & EPF_TRANSLATEDBYGRAVITY );
#line 4848 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(bFlyOn  && ! bIsFlying ){
#line 4849 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetPhysicsFlags  (GetPhysicsFlags  () & ~ (EPF_TRANSLATEDBYGRAVITY  | EPF_ORIENTEDBYGRAVITY ));
#line 4850 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_plViewpoint  . pl_OrientationAngle  = ANGLE3D (0 , 0 , 0);
#line 4851 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(! bFlyOn  && bIsFlying ){
#line 4852 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetPhysicsFlags  (GetPhysicsFlags  () | EPF_TRANSLATEDBYGRAVITY  | EPF_ORIENTEDBYGRAVITY );
#line 4853 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_plViewpoint  . pl_OrientationAngle  = ANGLE3D (0 , 0 , 0);
#line 4854 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4857 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL bIsGhost  = ! (GetCollisionFlags  () & ((ECBI_BRUSH  | ECBI_MODEL ) << ECB_TEST ));
#line 4858 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(cht_bGhost  && ! bIsGhost ){
#line 4859 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetCollisionFlags  (GetCollisionFlags  () & ~ ((ECBI_BRUSH  | ECBI_MODEL ) << ECB_TEST ));
#line 4860 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(! cht_bGhost  && bIsGhost ){
#line 4861 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetCollisionFlags  (GetCollisionFlags  () | ((ECBI_BRUSH  | ECBI_MODEL ) << ECB_TEST ));
#line 4862 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4865 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const TIME  tmDelta  = m_tmInvisibility  - _pTimer  -> CurrentTick  ();
#line 4866 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(cht_bInvisible  || tmDelta  > 0){
#line 4867 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetFlags  (GetFlags  () | ENF_INVISIBLE );
#line 4868 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 4869 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetFlags  (GetFlags  () & ~ ENF_INVISIBLE );
#line 4870 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4873 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(cht_bGiveAll ){
#line 4874 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
cht_bGiveAll  = FALSE ;
#line 4875 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . CheatGiveAll  ();
#line 4876 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4878 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(cht_bKillAll ){
#line 4879 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
cht_bKillAll  = FALSE ;
#line 4880 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
KillAllEnemies  (this );
#line 4881 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4883 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(cht_bOpen ){
#line 4884 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
cht_bOpen  = FALSE ;
#line 4885 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . CheatOpen  ();
#line 4886 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4888 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(cht_bAllMessages ){
#line 4889 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
cht_bAllMessages  = FALSE ;
#line 4890 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CheatAllMessages  ();
#line 4891 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4893 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(cht_bRefresh ){
#line 4894 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
cht_bRefresh  = FALSE ;
#line 4895 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetHealth  (TopHealth  ());
#line 4896 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4897 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 4906 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::GetLerpedAbsoluteViewPlacement(CPlacement3D & plView) {
#line 4907 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! (m_ulFlags  & PLF_INITIALIZED )){
#line 4908 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plView  = GetPlacement  ();
#line 4909 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
_bDiscard3rdView  = FALSE ;
#line 4910 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ;
#line 4911 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4913 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL bSharpTurning  = 
#line 4914 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
(GetSettings  () -> ps_ulFlags  & PSF_SHARPTURNING ) && 
#line 4915 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
_pNetwork  -> IsPlayerLocal  ((CPlayer  *) GetPredictionTail  ());
#line 4918 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fLerpFactor  = _pTimer  -> GetLerpFactor  ();
#line 4919 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plView  . Lerp  (en_plLastViewpoint  , en_plViewpoint  , fLerpFactor );
#line 4922 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerAnimator  &) * m_penAnimator ) . ChangeView  (plView );
#line 4924 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerAnimator  &) * m_penAnimator ) . BodyAndHeadOrientation  (plView );
#line 4927 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_iViewState  == PVT_PLAYEREYES  || _bDiscard3rdView ){
#line 4928 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlacement3D plPosLerped  = GetLerpedPlacement  ();
#line 4929 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(bSharpTurning ){
#line 4931 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayer  * pen  = (CPlayer  *) GetPredictionTail  ();
#line 4933 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_ulFlags  & PLF_ISZOOMING ){
#line 4934 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fRotationDamping  = ((CPlayerWeapons  &) * m_penWeapons ) . m_fSniperFOV  / ((CPlayerWeapons  &) * m_penWeapons ) . m_fSniperMaxFOV ;
#line 4935 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plView  . pl_OrientationAngle  = pen  -> en_plViewpoint  . pl_OrientationAngle  + (pen  -> m_aLocalRotation  - pen  -> m_aLastRotation ) * fRotationDamping ;
#line 4936 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 4937 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plView  . pl_OrientationAngle  = pen  -> en_plViewpoint  . pl_OrientationAngle  + (pen  -> m_aLocalRotation  - pen  -> m_aLastRotation );
#line 4938 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4940 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
RoundViewAngle  (plView  . pl_OrientationAngle  (2) , PITCH_MAX );
#line 4941 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
RoundViewAngle  (plView  . pl_OrientationAngle  (3) , BANKING_MAX );
#line 4946 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ANGLE3D aCurr  = pen  -> GetPlacement  () . pl_OrientationAngle ;
#line 4947 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ANGLE3D aLast  = pen  -> en_plLastPlacement  . pl_OrientationAngle ;
#line 4948 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ANGLE3D aDesired  = pen  -> en_aDesiredRotationRelative  * _pTimer  -> TickQuantum ;
#line 4949 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOATmatrix3D mCurr ;MakeRotationMatrixFast  (mCurr  , aCurr );
#line 4950 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOATmatrix3D mLast ;MakeRotationMatrixFast  (mLast  , aLast );
#line 4951 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOATmatrix3D mDesired ;MakeRotationMatrixFast  (mDesired  , aDesired );
#line 4952 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
mDesired  = en_mRotation  * (mDesired  * ! en_mRotation );
#line 4953 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOATmatrix3D mForced  = ! mDesired  * mCurr  * ! mLast ;
#line 4954 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ANGLE3D aForced ;DecomposeRotationMatrixNoSnap  (aForced  , mForced );
#line 4955 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(aForced  . MaxNorm  () < 1E-2){
#line 4956 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
aForced  = ANGLE3D (0 , 0 , 0);
#line 4957 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4958 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOATquat3D qForced ;qForced  . FromEuler  (aForced );
#line 4959 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOATquat3D qZero ;qZero  . FromEuler  (ANGLE3D (0 , 0 , 0));
#line 4960 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOATquat3D qLerped  = Slerp  (fLerpFactor  , qZero  , qForced );
#line 4961 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOATmatrix3D m ;
#line 4962 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
qLerped  . ToMatrix  (m );
#line 4963 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m  = m  * mDesired  * mLast ;
#line 4964 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
DecomposeRotationMatrixNoSnap  (plPosLerped  . pl_OrientationAngle  , m );
#line 4965 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4966 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plView  . RelativeToAbsoluteSmooth  (plPosLerped );
#line 4968 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(m_iViewState  == PVT_3RDPERSONVIEW ){
#line 4969 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plView  = m_pen3rdPersonView  -> GetLerpedPlacement  ();
#line 4971 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(m_iViewState  == PVT_PLAYERAUTOVIEW ){
#line 4972 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plView  = m_penView  -> GetLerpedPlacement  ();
#line 4974 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 4975 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ASSERTALWAYS  ("Unknown player view");
#line 4976 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4977 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
_bDiscard3rdView  = FALSE ;
#line 4978 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 4981 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CEntity * CPlayer::GetViewEntity(void) {
#line 4983 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_iViewState  == PVT_PLAYEREYES ){
#line 4984 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return this ;
#line 4986 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(m_iViewState  == PVT_3RDPERSONVIEW ){
#line 4987 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_ulFlags  & PLF_ISZOOMING ){
#line 4988 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return this ;
#line 4989 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4990 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(((CPlayerView  &) * m_pen3rdPersonView ) . m_fDistance  > 2.0f){
#line 4991 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return m_pen3rdPersonView ;
#line 4992 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 4993 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return this ;
#line 4994 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 4996 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(m_iViewState  == PVT_PLAYERAUTOVIEW ){
#line 4997 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(((CPlayerView  &) * m_penView ) . m_fDistance  > 2.0f){
#line 4998 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return m_penView ;
#line 4999 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 5000 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return this ;
#line 5001 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5003 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 5004 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ASSERTALWAYS  ("Unknown player view");
#line 5005 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return NULL ;
#line 5006 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5007 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 5009 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::RenderChainsawParticles(BOOL bThird) 
#line 5010 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 5011 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fStretch  = 1.0f;
#line 5012 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(bThird )
#line 5013 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 5014 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fStretch  = 0.4f;
#line 5015 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5017 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT tmNow  = _pTimer  -> GetLerpedCurrentTick  ();
#line 5018 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
for(INDEX iSpray  = 0;iSpray  < MAX_BULLET_SPRAYS ;iSpray  ++)
#line 5019 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 5020 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BulletSprayLaunchData  & bsld  = m_absldData  [ iSpray  ];
#line 5021 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fLife  = 1.25f;
#line 5022 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(tmNow  > (bsld  . bsld_tmLaunch  + fLife )){continue ;}
#line 5023 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Particles_BulletSpray  (bsld  . bsld_iRndBase  , bsld  . bsld_vPos  , bsld  . bsld_vG  , 
#line 5024 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bsld  . bsld_eptType  , bsld  . bsld_tmLaunch  , bsld  . bsld_vStretch  * fStretch  , 1.0f);
#line 5025 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5028 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
for(INDEX iGore  = 0;iGore  < MAX_GORE_SPRAYS ;iGore  ++)
#line 5029 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 5030 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GoreSprayLaunchData  & gsld  = m_agsldData  [ iGore  ];
#line 5031 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fLife  = 2.0f;
#line 5032 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(tmNow  > (gsld  . gsld_tmLaunch  + fLife )){continue ;}
#line 5033 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D vPos  = gsld  . gsld_vPos ;
#line 5034 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(bThird )
#line 5035 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 5036 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vPos  = gsld  . gsld_v3rdPos ;
#line 5037 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5038 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Particles_BloodSpray  (gsld  . gsld_sptType  , vPos  , gsld  . gsld_vG  , gsld  . gsld_fGA  , 
#line 5039 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
gsld  . gsld_boxHitted  , gsld  . gsld_vSpilDirection  , 
#line 5040 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
gsld  . gsld_tmLaunch  , gsld  . gsld_fDamagePower  * fStretch  , gsld  . gsld_colParticles );
#line 5041 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5042 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 5045 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::RenderHUD(CPerspectiveProjection3D & prProjection,CDrawPort * pdp,
#line 5046 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D vViewerLightDirection,COLOR colViewerLight,COLOR colViewerAmbient,
#line 5047 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL bRenderWeapon,INDEX iEye) 
#line 5048 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 5049 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlacement3D plViewOld  = prProjection  . ViewerPlacementR  ();
#line 5050 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL bSniping  = ((CPlayerWeapons  &) * m_penWeapons ) . m_bSniping ;
#line 5053 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL bRenderModels  = _pShell  -> GetINDEX  ("gfx_bRenderModels");
#line 5054 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(hud_bShowWeapon  && bRenderModels  && ! bSniping ){
#line 5056 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . RenderWeaponModel  (prProjection  , pdp  , 
#line 5057 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vViewerLightDirection  , colViewerLight  , colViewerAmbient  , bRenderWeapon  , iEye );
#line 5058 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5061 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_iViewState  == PVT_PLAYEREYES )
#line 5062 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 5063 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
prProjection  . ViewerPlacementL  () = plViewOld ;
#line 5064 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
prProjection  . Prepare  ();
#line 5065 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CAnyProjection3D  apr ;
#line 5066 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
apr  = prProjection ;
#line 5067 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Stereo_AdjustProjection  (* apr  , iEye  , 1);
#line 5068 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Particle_PrepareSystem  (pdp  , apr );
#line 5069 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Particle_PrepareEntity  (2.0f , FALSE  , FALSE  , this );
#line 5070 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
RenderChainsawParticles  (FALSE );
#line 5071 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Particle_EndSystem  ();
#line 5072 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5075 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlacement3D plView ;
#line 5076 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_iViewState  == PVT_PLAYEREYES ){
#line 5078 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plView  = en_plViewpoint ;
#line 5079 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plView  . RelativeToAbsolute  (GetPlacement  ());
#line 5080 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(m_iViewState  == PVT_3RDPERSONVIEW ){
#line 5082 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plView  = ((CPlayerView  &) * m_pen3rdPersonView ) . GetPlacement  ();
#line 5083 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5084 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! bSniping ){
#line 5085 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . RenderCrosshair  (prProjection  , pdp  , plView );
#line 5086 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5089 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayer  * pen  = (CPlayer  *) GetPredictionTail  ();
#line 5091 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ULONG  ulR  = 255 , ulG  = 0 , ulB  = 0;
#line 5092 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ULONG  ulA  = pen  -> m_fDamageAmmount  * 5.0f;
#line 5095 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT tmSinceWounding  = _pTimer  -> CurrentTick  () - pen  -> m_tmWoundedTime ;
#line 5096 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(tmSinceWounding  < 4.0f){
#line 5098 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(tmSinceWounding  < 0.001f){ulA  = (ulA  + 64) / 2;}
#line 5099 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5111 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 5112 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
COLOR colGlare  = GetWorldGlaring  ();
#line 5113 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
UBYTE  ubR  , ubG  , ubB  , ubA ;
#line 5114 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ColorToRGBA  (colGlare  , ubR  , ubG  , ubB  , ubA );
#line 5115 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ubA  != 0){
#line 5116 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> dp_ulBlendingRA  += ULONG  (ubR ) * ULONG  (ubA );
#line 5117 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> dp_ulBlendingGA  += ULONG  (ubG ) * ULONG  (ubA );
#line 5118 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> dp_ulBlendingBA  += ULONG  (ubB ) * ULONG  (ubA );
#line 5119 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> dp_ulBlendingA  += ULONG  (ubA );
#line 5120 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5121 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5124 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pdp  -> BlendScreen  ();
#line 5127 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(hud_bShowInfo ){
#line 5129 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL bSnooping  = FALSE ;
#line 5130 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayer  * penHUDPlayer  = this ;
#line 5131 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayer  * penHUDOwner  = this ;
#line 5133 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(penHUDPlayer  -> IsPredicted  ()){
#line 5134 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penHUDPlayer  = (CPlayer  *) penHUDPlayer  -> GetPredictor  ();
#line 5135 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5138 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerWeapons  * pen  = (CPlayerWeapons  *) & * penHUDPlayer  -> m_penWeapons ;
#line 5139 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
TIME  tmDelta  = _pTimer  -> CurrentTick  () - pen  -> m_tmSnoopingStarted ;
#line 5140 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(tmDelta  < plr_tmSnoopingTime ){
#line 5141 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ASSERT  (pen  -> m_penTargeting  != NULL );
#line 5142 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penHUDPlayer  = (CPlayer  *) & * pen  -> m_penTargeting ;
#line 5143 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bSnooping  = TRUE ;
#line 5144 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5145 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
DrawHUD  (penHUDPlayer  , pdp  , bSnooping  , penHUDOwner );
#line 5146 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5147 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 5154 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CEntity * CPlayer::GetDeathmatchStartMarker(void) 
#line 5155 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 5157 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString strPlayerStart  = "Player Start - ";
#line 5158 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX ctMarkers  = _pNetwork  -> GetNumberOfEntitiesWithName  (strPlayerStart );
#line 5160 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ctMarkers  == 0){
#line 5162 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return NULL ;
#line 5163 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5165 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ctMarkers  == 1){
#line 5167 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return _pNetwork  -> GetEntityWithName  (strPlayerStart  , 0);
#line 5168 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5172 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CStaticArray  < MarkerDistance  > amdMarkers ;
#line 5173 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
amdMarkers  . New  (ctMarkers );
#line 5175 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{for(INDEX iMarker  = 0;iMarker  < ctMarkers ;iMarker  ++){
#line 5176 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
amdMarkers  [ iMarker  ] . md_ppm  = (CPlayerMarker  *) _pNetwork  -> GetEntityWithName  (strPlayerStart  , iMarker );
#line 5177 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(amdMarkers  [ iMarker  ] . md_ppm  == NULL ){
#line 5178 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return NULL ;
#line 5179 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5181 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fMinD  = UpperLimit  (0.0f);
#line 5182 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
for(INDEX iPlayer  = 0;iPlayer  < GetMaxPlayers  ();iPlayer  ++){
#line 5183 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayer  * ppl  = (CPlayer  *) & * GetPlayerEntity  (iPlayer );
#line 5184 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ppl  == NULL ){
#line 5185 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
continue ;
#line 5186 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5187 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fD  = 
#line 5188 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
(amdMarkers  [ iMarker  ] . md_ppm  -> GetPlacement  () . pl_PositionVector  - 
#line 5189 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ppl  -> GetPlacement  () . pl_PositionVector ) . Length  ();
#line 5190 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(fD  < fMinD ){
#line 5191 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
fMinD  = fD ;
#line 5192 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5193 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5194 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
amdMarkers  [ iMarker  ] . md_fMinD  = fMinD ;
#line 5195 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}}
#line 5198 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
qsort  (& amdMarkers  [ 0 ] , ctMarkers  , sizeof  (amdMarkers  [ 0 ]) , & qsort_CompareMarkerDistance );
#line 5199 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ASSERT  (amdMarkers  [ 0 ] . md_fMinD  >= amdMarkers  [ ctMarkers  - 1 ] . md_fMinD );
#line 5201 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX ctFarMarkers  = ctMarkers  / 2;
#line 5202 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ASSERT  (ctFarMarkers  > 0);
#line 5203 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iStartMarker  = IRnd  () % ctFarMarkers ;
#line 5205 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iMarker  = iStartMarker ;
#line 5206 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FOREVER {
#line 5207 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(_pTimer  -> CurrentTick  () > amdMarkers  [ iMarker  ] . md_ppm  -> m_tmLastSpawned  + 1.0f){
#line 5208 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
break ;
#line 5209 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5210 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iMarker  = (iMarker  + 1) % ctMarkers ;
#line 5211 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(iMarker  == iStartMarker ){
#line 5212 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
break ;
#line 5213 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5214 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5216 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return amdMarkers  [ iMarker  ] . md_ppm ;
#line 5217 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 5223 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::InitializePlayer() 
#line 5224 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 5226 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_plViewpoint  . pl_OrientationAngle  = ANGLE3D (0 , 0 , 0);
#line 5227 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_plViewpoint  . pl_PositionVector  = FLOAT3D (0.0f , plr_fViewHeightStand  , 0.0f);
#line 5228 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_plLastViewpoint  = en_plViewpoint ;
#line 5231 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  &= PLF_INITIALIZED  | PLF_LEVELSTARTED  | PLF_RESPAWNINPLACE ;
#line 5232 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fFallTime  = 0.0f;
#line 5233 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_pstState  = PST_STAND ;
#line 5234 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fDamageAmmount  = 0.0f;
#line 5235 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmWoundedTime  = 0.0f;
#line 5236 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmInvisibility  = 0.0f , 
#line 5237 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmInvulnerability  = 0.0f , 
#line 5238 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmSeriousDamage  = 0.0f , 
#line 5239 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmSeriousSpeed  = 0.0f , 
#line 5242 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerAnimator  &) * m_penAnimator ) . Initialize  ();
#line 5244 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetPlayerWeapons  () -> SendEvent  (EStart  ());
#line 5247 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Particles_AfterBurner_Prepare  (this );
#line 5250 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetPhysicsFlags  (EPF_MODEL_WALKING  | EPF_HASLUNGS );
#line 5251 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetCollisionFlags  (ECF_MODEL  | ((ECBI_PLAYER ) << ECB_IS ));
#line 5252 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetFlags  (GetFlags  () | ENF_ALIVE );
#line 5254 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
StartModelAnim  (PLAYER_ANIM_STAND  , AOF_LOOPING );
#line 5255 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
TeleportPlayer  (WLT_FIXED );
#line 5256 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 5259 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D CPlayer::GetTeleportingOffset(void) 
#line 5260 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 5262 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iPlayer  = GetMyPlayerIndex  ();
#line 5265 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const FLOAT fOffsetY  = 0.1f;
#line 5266 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D vOffsetRel  = FLOAT3D (0 , fOffsetY  , 0);
#line 5267 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_bCooperative  && ! GetSP  () -> sp_bSinglePlayer ){
#line 5268 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iRow  = iPlayer  / 4;
#line 5269 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iCol  = iPlayer  % 4;
#line 5270 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vOffsetRel  = FLOAT3D (- 3.0f + iCol  * 2.0f , fOffsetY  , - 3.0f + iRow  * 2.0f);
#line 5271 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5273 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return vOffsetRel ;
#line 5274 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 5277 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::RemapLevelNames(INDEX & iLevel) 
#line 5278 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 5279 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
switch(iLevel ){
#line 5280 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case 10: 
#line 5281 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iLevel  = 1;
#line 5282 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
break ;
#line 5283 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case 11: 
#line 5284 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iLevel  = 2;
#line 5285 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
break ;
#line 5286 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case 12: 
#line 5287 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iLevel  = 3;
#line 5288 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
break ;
#line 5289 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case 13: 
#line 5290 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iLevel  = 4;
#line 5291 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
break ;
#line 5292 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case 14: 
#line 5293 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iLevel  = 5;
#line 5294 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
break ;
#line 5295 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case 15: 
#line 5296 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iLevel  = 6;
#line 5297 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
break ;
#line 5298 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case 21: 
#line 5299 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iLevel  = 7;
#line 5300 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
break ;
#line 5301 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case 22: 
#line 5302 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iLevel  = 8;
#line 5303 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
break ;
#line 5304 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case 23: 
#line 5305 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iLevel  = 9;
#line 5306 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
break ;
#line 5307 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case 24: 
#line 5308 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iLevel  = 10;
#line 5309 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
break ;
#line 5310 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case 31: 
#line 5311 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iLevel  = 11;
#line 5312 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
break ;
#line 5313 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case 32: 
#line 5314 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iLevel  = 12;
#line 5315 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
break ;
#line 5316 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
case 33: 
#line 5317 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iLevel  = 13;
#line 5318 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
break ;
#line 5319 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
default  : 
#line 5320 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iLevel  = - 1;
#line 5321 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
break ;
#line 5322 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5323 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 5326 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::TeleportPlayer(enum WorldLinkType EwltType) 
#line 5327 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 5328 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iLevel  = - 1;
#line 5329 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString strLevelName  = GetWorld  () -> wo_fnmFileName  . FileName  ();
#line 5332 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX u  , v ;
#line 5333 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
u  = v  = - 1;
#line 5334 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strLevelName  . ScanF  ("%01d_%01d_" , & u  , & v );
#line 5335 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iLevel  = u  * 10 + v ;
#line 5337 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
RemapLevelNames  (iLevel );
#line 5339 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(iLevel  > 0){
#line 5340 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CSessionProperties  *) GetSP  ()) -> sp_ulLevelsMask  |= 1 << (iLevel  - 1);
#line 5341 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5344 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iPlayer  = GetMyPlayerIndex  ();
#line 5346 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlacement3D plSet  = GetPlacement  ();
#line 5348 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Teleport  (CPlacement3D (FLOAT3D (32000.0f + 100.0f * iPlayer  , 32000.0f , 0) , ANGLE3D (0 , 0 , 0)));
#line 5350 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ForceCollisionBoxIndexChange  (PLAYER_COLLISION_BOX_STAND );
#line 5351 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_plViewpoint  . pl_PositionVector  (2) = plr_fViewHeightStand ;
#line 5352 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerAnimator  &) * m_penAnimator ) . m_bDisableAnimating  = FALSE ;
#line 5353 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerAnimator  &) * m_penAnimator ) . Stand  ();
#line 5354 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_pstState  = PST_STAND ;
#line 5357 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D vOffsetRel  = GetTeleportingOffset  ();
#line 5360 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL bSetHealth  = FALSE ;
#line 5361 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BOOL bAdjustHealth  = FALSE ;
#line 5362 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CEntity  * pen  = NULL ;
#line 5363 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_bCooperative ){
#line 5364 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(cht_iGoToMarker  >= 0){
#line 5366 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString strPlayerStart ;
#line 5367 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strPlayerStart  . PrintF  ("Player Start - %d" , (INDEX) cht_iGoToMarker );
#line 5368 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pen  = _pNetwork  -> GetEntityWithName  (strPlayerStart  , 0);
#line 5369 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pen  -> SendEvent  (ETrigger  ());
#line 5370 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
cht_iGoToMarker  = - 1;
#line 5371 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bSetHealth  = TRUE ;
#line 5372 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bAdjustHealth  = FALSE ;
#line 5374 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(m_penMainMusicHolder  != NULL  && ! (m_ulFlags  & PLF_CHANGINGLEVEL )){
#line 5375 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CMusicHolder  * pmh  = (CMusicHolder  *) & * m_penMainMusicHolder ;
#line 5376 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pmh  -> m_penRespawnMarker  != NULL ){
#line 5378 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pen  = pmh  -> m_penRespawnMarker ;
#line 5379 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bSetHealth  = TRUE ;
#line 5380 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bAdjustHealth  = FALSE ;
#line 5381 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5382 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5385 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pen  == NULL  && GetSP  () -> sp_bQuickTest  && m_strGroup  == ""){
#line 5387 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString strPlayerStart ;
#line 5388 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strPlayerStart  . PrintF  ("Player Quick Start");
#line 5389 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pen  = _pNetwork  -> GetEntityWithName  (strPlayerStart  , 0);
#line 5390 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bSetHealth  = TRUE ;
#line 5391 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bAdjustHealth  = FALSE ;
#line 5392 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5394 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pen  == NULL ){
#line 5396 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString strPlayerStart ;
#line 5397 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strPlayerStart  . PrintF  ("Player Start - %s" , m_strGroup );
#line 5398 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pen  = _pNetwork  -> GetEntityWithName  (strPlayerStart  , 0);
#line 5399 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_strGroup  == ""){
#line 5400 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bSetHealth  = TRUE ;
#line 5401 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bAdjustHealth  = FALSE ;
#line 5402 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 5403 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(EwltType  == WLT_FIXED ){
#line 5404 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bSetHealth  = FALSE ;
#line 5405 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bAdjustHealth  = TRUE ;
#line 5406 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 5407 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bSetHealth  = FALSE ;
#line 5408 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bAdjustHealth  = FALSE ;
#line 5409 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5410 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5411 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5413 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pen  == NULL ){
#line 5415 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString strPlayerStart ;
#line 5416 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strPlayerStart  . PrintF  ("Player Start - ");
#line 5417 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pen  = _pNetwork  -> GetEntityWithName  (strPlayerStart  , 0);
#line 5418 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bSetHealth  = TRUE ;
#line 5419 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bAdjustHealth  = FALSE ;
#line 5420 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5421 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 5422 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bSetHealth  = TRUE ;
#line 5423 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bAdjustHealth  = FALSE ;
#line 5425 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pen  = GetDeathmatchStartMarker  ();
#line 5426 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pen  != NULL ){
#line 5427 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerMarker  &) * pen ) . m_tmLastSpawned  = _pTimer  -> CurrentTick  ();
#line 5428 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5429 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5432 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if((m_ulFlags  & PLF_RESPAWNINPLACE ) && pen  != NULL  && ! ((CPlayerMarker  *) & * pen ) -> m_bNoRespawnInPlace ){
#line 5433 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  &= ~ PLF_RESPAWNINPLACE ;
#line 5435 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetHealth  (TopHealth  ());
#line 5436 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iMana  = GetSP  () -> sp_iInitialMana ;
#line 5437 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fArmor  = 0.0f;
#line 5439 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Teleport  (CPlacement3D (m_vDied  , m_aDied ));
#line 5442 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(pen  != NULL ){
#line 5444 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_penMainMusicHolder  != NULL ){
#line 5445 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CMusicHolder  * pmh  = (CMusicHolder  *) & * m_penMainMusicHolder ;
#line 5446 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pmh  -> m_penRespawnMarker  == NULL ){
#line 5448 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pmh  -> m_penRespawnMarker  = pen ;
#line 5449 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5450 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5452 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerMarker  & CpmStart  = (CPlayerMarker  &) * pen ;
#line 5454 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(bSetHealth ){
#line 5455 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetHealth  (CpmStart  . m_fHealth  / 100.0f * TopHealth  ());
#line 5456 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iMana  = GetSP  () -> sp_iInitialMana ;
#line 5457 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fArmor  = CpmStart  . m_fShield ;
#line 5458 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(bAdjustHealth ){
#line 5459 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fHealth  = GetHealth  ();
#line 5460 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fTopHealth  = TopHealth  ();
#line 5461 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(fHealth  < fTopHealth ){
#line 5462 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetHealth  (ClampUp  (fHealth  + fTopHealth  / 2.0f , fTopHealth ));
#line 5463 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5464 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5467 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(CpmStart  . m_bStartInComputer  && GetSP  () -> sp_bSinglePlayer ){
#line 5469 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(_pNetwork  -> IsPlayerLocal  (this )){
#line 5470 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
cmp_ppenPlayer  = this ;
#line 5471 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5472 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
cmp_bInitialStart  = TRUE ;
#line 5473 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5476 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CMessageHolder  * penMessage  = (CMessageHolder  *) & * CpmStart  . m_penMessage ;
#line 5478 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
while(penMessage  != NULL  && IsOfClass  (penMessage  , "MessageHolder")){
#line 5479 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
const CTFileName & fnmMessage  = penMessage  -> m_fnmMessage ;
#line 5481 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! HasMessage  (fnmMessage )){
#line 5483 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ReceiveComputerMessage  (fnmMessage  , 0);
#line 5484 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5486 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penMessage  = (CMessageHolder  *) & * penMessage  -> m_penNext ;
#line 5487 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5490 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! GetSP  () -> sp_bCooperative ){
#line 5491 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . InitializeWeapons  (CpmStart  . m_iGiveWeapons  , 0 , 0 , 
#line 5492 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CpmStart  . m_fMaxAmmoRatio );
#line 5493 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 5494 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . InitializeWeapons  (CpmStart  . m_iGiveWeapons  , CpmStart  . m_iTakeWeapons  , 
#line 5495 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetSP  () -> sp_bInfiniteAmmo  ? 0 : CpmStart  . m_iTakeAmmo  , CpmStart  . m_fMaxAmmoRatio );
#line 5496 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5498 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(EwltType  == WLT_RELATIVE ){
#line 5499 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plSet  . AbsoluteToRelative  (_SwcWorldChange  . plLink );
#line 5500 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plSet  . RelativeToAbsolute  (CpmStart  . GetPlacement  ());
#line 5501 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Teleport  (plSet );
#line 5503 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(EwltType  == WLT_FIXED ){
#line 5504 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlacement3D plNew  = CpmStart  . GetPlacement  ();
#line 5505 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
vOffsetRel  *= CpmStart  . en_mRotation ;
#line 5506 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plNew  . pl_PositionVector  += vOffsetRel ;
#line 5507 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Teleport  (plNew );
#line 5509 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 5510 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ASSERTALWAYS  ("Unknown world link type");
#line 5511 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Teleport  (CPlacement3D (FLOAT3D (0 , 0 , 0) + vOffsetRel  , ANGLE3D (0 , 0 , 0)));
#line 5512 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5514 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(CpmStart  . m_penTarget  != NULL ){
#line 5515 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SendToTarget  (CpmStart  . m_penTarget  , EET_TRIGGER  , this );
#line 5516 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5519 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 5521 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetHealth  (TopHealth  ());
#line 5522 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iMana  = GetSP  () -> sp_iInitialMana ;
#line 5523 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fArmor  = 0.0f;
#line 5525 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . InitializeWeapons  (0 , 0 , 0 , 0);
#line 5527 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Teleport  (CPlacement3D (FLOAT3D (0 , 0 , 0) + vOffsetRel  , ANGLE3D (0 , 0 , 0)));
#line 5528 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5530 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SendEventInRange  (ETeleport  () , FLOATaabbox3D (GetPlacement  () . pl_PositionVector  , 200.0f));
#line 5532 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ForceFullStop  ();
#line 5535 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fMaxHealth  = TopHealth  ();
#line 5538 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_bSinglePlayer  && GetSP  () -> sp_gmGameMode  != CSessionProperties  :: GM_FLYOVER ){
#line 5539 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CWorldSettingsController  * pwsc  = GetWSC  (this );
#line 5540 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pwsc  != NULL  && pwsc  -> m_bNoSaveGame ){
#line 5541 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
NOTHING ;
#line 5542 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 5544 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
_pShell  -> Execute  ("gam_bQuickSave=1;");
#line 5545 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5546 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5548 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! (m_ulFlags  & PLF_LEVELSTARTED )){
#line 5549 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  |= PLF_LEVELSTARTED ;
#line 5550 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmLevelStarted  = _pNetwork  -> GetGameTime  ();
#line 5551 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5553 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString strDummy ;
#line 5554 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetPlayerAppearance  (GetModelObject  () , NULL  , strDummy  , FALSE );
#line 5555 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ValidateCharacter  ();
#line 5556 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetPlayerAppearance  (& m_moRender  , & en_pcCharacter  , strDummy  , FALSE );
#line 5557 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ParseGender  (strDummy );
#line 5558 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetPlayerAnimator  () -> SetWeapon  ();
#line 5559 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  |= PLF_SYNCWEAPON ;
#line 5562 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SpawnTeleport  ();
#line 5564 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SwitchToModel  ();
#line 5565 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmSpawned  = _pTimer  -> CurrentTick  ();
#line 5567 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_tmLastBreathed  = _pTimer  -> CurrentTick  () + 0.1f;
#line 5568 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 5571 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::RecordEndOfLevelData(void) 
#line 5572 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 5574 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ASSERT  (! m_bEndOfLevel );
#line 5576 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmAnalyseEnd  = 0;
#line 5577 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_bPendingMessage  = FALSE ;
#line 5578 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmMessagePlay  = 0;
#line 5580 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iMayRespawn  = 0;
#line 5581 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_bEndOfLevel  = TRUE ;
#line 5583 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
time  (& m_iEndTime );
#line 5585 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
TIME  tmLevelTime  = _pTimer  -> CurrentTick  () - m_tmLevelStarted ;
#line 5586 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psLevelStats  . ps_tmTime  = tmLevelTime ;
#line 5587 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psGameStats  . ps_tmTime  += tmLevelTime ;
#line 5588 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fTimeDelta  = ClampDn  (floor  (m_tmEstTime ) - floor  (tmLevelTime ) , 0.0);
#line 5589 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iTimeScore  = floor  (fTimeDelta  * 100.0f);
#line 5590 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psLevelStats  . ps_iScore  += m_iTimeScore ;
#line 5591 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psGameStats  . ps_iScore  += m_iTimeScore ;
#line 5594 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString strStats ;
#line 5595 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
strStats  . PrintF  (TRANS  ("%s\n  Time:   %s\n  Score: %9d\n  Kills:   %03d/%03d\n  Secrets:   %02d/%02d\n") , 
#line 5596 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
TranslateConst  (en_pwoWorld  -> GetName  () , 0) , TimeToString  (tmLevelTime ) , 
#line 5597 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psLevelStats  . ps_iScore  , 
#line 5598 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psLevelStats  . ps_iKills  , m_psLevelTotal  . ps_iKills  , 
#line 5599 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psLevelStats  . ps_iSecrets  , m_psLevelTotal  . ps_iSecrets );
#line 5600 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_strLevelStats  += strStats ;
#line 5601 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 5604 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::SpawnTeleport(void) 
#line 5605 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 5607 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_bSinglePlayer ){
#line 5609 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ;
#line 5610 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5611 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ESpawnEffect  ese ;
#line 5612 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ese  . colMuliplier  = C_WHITE  | CT_OPAQUE ;
#line 5613 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ese  . betType  = BET_TELEPORT ;
#line 5614 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ese  . vNormal  = FLOAT3D (0 , 1 , 0);
#line 5615 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOATaabbox3D box ;
#line 5616 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetBoundingBox  (box );
#line 5617 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fEntitySize  = box  . Size  () . MaxNorm  () * 2;
#line 5618 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ese  . vStretch  = FLOAT3D (fEntitySize  , fEntitySize  , fEntitySize );
#line 5619 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CEntityPointer penEffect  = CreateEntity  (GetPlacement  () , CLASS_BASIC_EFFECT );
#line 5620 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penEffect  -> Initialize  (ese );
#line 5621 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 5626 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::RenderParticles(void) 
#line 5627 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 5628 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT tmNow  = _pTimer  -> GetLerpedCurrentTick  ();
#line 5631 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Particles_EmptyShells  (this  , m_asldData );
#line 5633 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(Particle_GetViewer  () == this ){
#line 5634 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Particles_ViewerLocal  (this );
#line 5635 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5636 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
else 
#line 5637 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 5639 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
RenderChainsawParticles  (TRUE );
#line 5641 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetFlags  () & ENF_ALIVE ){
#line 5642 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_tmSeriousDamage  > tmNow  && m_tmInvulnerability  > tmNow ){
#line 5643 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Particles_ModelGlow  (this  , Max  (m_tmSeriousDamage  , m_tmInvulnerability ) , PT_STAR08  , 0.15f , 2 , 0.03f , 0xff00ff00);
#line 5644 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(m_tmInvulnerability  > tmNow ){
#line 5645 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Particles_ModelGlow  (this  , m_tmInvulnerability  , PT_STAR05  , 0.15f , 2 , 0.03f , 0x3333ff00);
#line 5646 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(m_tmSeriousDamage  > tmNow ){
#line 5647 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Particles_ModelGlow  (this  , m_tmSeriousDamage  , PT_STAR08  , 0.15f , 2 , 0.03f , 0xff777700);
#line 5648 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5649 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_tmSeriousSpeed  > tmNow ){
#line 5650 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Particles_RunAfterBurner  (this  , m_tmSeriousSpeed  , 0.3f , 0);
#line 5651 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5652 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! GetSP  () -> sp_bCooperative ){
#line 5653 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerWeapons  * wpn  = GetPlayerWeapons  ();
#line 5654 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(wpn  -> m_tmLastSniperFire  == _pTimer  -> CurrentTick  ())
#line 5655 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 5656 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CAttachmentModelObject  & amoBody  = * GetModelObject  () -> GetAttachmentModel  (PLAYER_ATTACHMENT_TORSO );
#line 5657 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOATmatrix3D m ;
#line 5658 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
MakeRotationMatrix  (m  , amoBody  . amo_plRelative  . pl_OrientationAngle );
#line 5659 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D vSource  = wpn  -> m_vBulletSource  + FLOAT3D (0.0f , 0.1f , - 0.4f) * GetRotationMatrix  () * m ;
#line 5660 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Particles_SniperResidue  (this  , vSource  , wpn  -> m_vBulletTarget );
#line 5661 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5662 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5663 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5664 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5667 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_tmSpiritStart  != 0.0f)
#line 5668 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 5669 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Particles_Appearing  (this  , m_tmSpiritStart );
#line 5670 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5671 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 5673 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::TeleportToAutoMarker(CPlayerActionMarker * ppam) 
#line 5674 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 5676 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_bCooperative  && ! GetSP  () -> sp_bSinglePlayer ){
#line 5678 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
for(INDEX iPlayer  = 0;iPlayer  < GetMaxPlayers  ();iPlayer  ++){
#line 5679 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayer  * ppl  = (CPlayer  *) GetPlayerEntity  (iPlayer );
#line 5680 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ppl  != NULL ){
#line 5682 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlacement3D pl  = ppam  -> GetPlacement  ();
#line 5683 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D vOffsetRel  = ppl  -> GetTeleportingOffset  ();
#line 5684 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pl  . pl_PositionVector  += vOffsetRel  * ppam  -> en_mRotation ;
#line 5685 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ppl  -> Teleport  (pl  , FALSE );
#line 5687 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ppl  -> m_vDied  = pl  . pl_PositionVector ;
#line 5688 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ppl  -> m_aDied  = pl  . pl_OrientationAngle ;
#line 5689 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5690 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5693 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 5695 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlacement3D pl  = ppam  -> GetPlacement  ();
#line 5696 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D vOffsetRel  = GetTeleportingOffset  ();
#line 5697 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pl  . pl_PositionVector  += vOffsetRel  * ppam  -> en_mRotation ;
#line 5698 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Teleport  (pl  , FALSE );
#line 5699 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5700 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
  
#line 5703 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
void CPlayer::CheckDeathForRespawnInPlace(EDeath eDeath) 
#line 5704 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 5706 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! GetSP  () -> sp_bRespawnInPlace ){
#line 5708 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return ;
#line 5709 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5711 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CEntity  * penKiller  = eDeath  . eLastDamage  . penInflictor ;
#line 5712 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(IsOfClass  (penKiller  , "Player") || IsDerivedFromClass  (penKiller  , "Enemy Base")){
#line 5714 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  |= PLF_RESPAWNINPLACE ;
#line 5715 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_vDied  = GetPlacement  () . pl_PositionVector ;
#line 5716 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_aDied  = GetPlacement  () . pl_OrientationAngle ;
#line 5717 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5718 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
BOOL CPlayer::
#line 5724 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Wounded(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CPlayer_Wounded
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EDamage, "CPlayer::Wounded expects 'EDamage' as input!");  const EDamage &eDamage = (const EDamage &)__eeInput;
#line 5725 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Return(STATE_CURRENT,EVoid());
#line 5725 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CPlayer::
#line 5732 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
WorldChange(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CPlayer_WorldChange
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CPlayer::WorldChange expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 5734 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_bSinglePlayer ){
#line 5736 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString strDummy  ("1");
#line 5737 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SaveStringVar  (GetWorld  () -> wo_fnmFileName  . NoExt  () + ".vis" , strDummy );
#line 5738 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5740 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FindMusicHolder  ();
#line 5742 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_strGroup  = _SwcWorldChange  . strGroup ;
#line 5743 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
TeleportPlayer  ((WorldLinkType ) _SwcWorldChange  . iType );
#line 5745 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetupLightSource  ();
#line 5748 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerWeapons  * penWeapon  = GetPlayerWeapons  ();
#line 5749 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penWeapon  -> m_fSniperFOVlast  = penWeapon  -> m_fSniperFOV  = penWeapon  -> m_fSniperMaxFOV ;
#line 5750 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penWeapon  -> m_bSniping  = FALSE ;
#line 5751 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  &= ~ PLF_ISZOOMING ;
#line 5754 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soWeaponAmbient  , SOUND_SILENCE  , SOF_3D );
#line 5757 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
UpdateLevelStats  ();
#line 5758 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  |= PLF_INITIALIZED ;
#line 5759 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  &= ~ PLF_CHANGINGLEVEL ;
#line 5760 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Return(STATE_CURRENT,EVoid());
#line 5760 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CPlayer::
#line 5763 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
WorldChangeDead(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CPlayer_WorldChangeDead
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CPlayer::WorldChangeDead expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 5766 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  &= ~ PLF_RESPAWNINPLACE ;
#line 5769 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_bSinglePlayer ){
#line 5771 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString strDummy  ("1");
#line 5772 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SaveStringVar  (GetWorld  () -> wo_fnmFileName  . NoExt  () + ".vis" , strDummy );
#line 5773 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5775 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FindMusicHolder  ();
#line 5778 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
STATE_CPlayer_Rebirth, TRUE;
Jump(STATE_CURRENT, 0x01910008, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x01910008_WorldChangeDead_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910008
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: Call(STATE_CURRENT, STATE_CPlayer_Rebirth, TRUE, EVoid());return TRUE;case EVENTCODE_EReturn: Jump(STATE_CURRENT,0x01910009, FALSE, __eeInput); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x01910009_WorldChangeDead_02(const CEntityEvent &__eeInput){
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910009
const EReturn&__e= (EReturn&)__eeInput;
;
#line 5781 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetupLightSource  ();
#line 5784 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
UpdateLevelStats  ();
#line 5785 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  |= PLF_INITIALIZED ;
#line 5786 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  &= ~ PLF_CHANGINGLEVEL ;
#line 5787 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Return(STATE_CURRENT,EVoid());
#line 5787 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CPlayer::
#line 5794 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Death(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CPlayer_Death
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EDeath, "CPlayer::Death expects 'EDeath' as input!");  const EDeath &eDeath = (const EDeath &)__eeInput;
#line 5797 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . SendEvent  (EReleaseWeapon  ());
#line 5799 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(_pNetwork  -> IsPlayerLocal  (this ))
#line 5800 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 5801 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
IFeel_StopEffect  ("ChainsawFire");
#line 5802 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
IFeel_StopEffect  ("FlamethrowerFire");
#line 5803 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
IFeel_StopEffect  ("ChainsawIdle");
#line 5804 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
IFeel_StopEffect  ("SniperZoom");
#line 5805 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
IFeel_StopEffect  ("Minigun_rotate");
#line 5806 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5809 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerWeapons  * penWeapon  = GetPlayerWeapons  ();
#line 5810 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  &= ~ PLF_ISZOOMING ;
#line 5811 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penWeapon  -> m_bSniping  = FALSE ;
#line 5812 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penWeapon  -> m_fSniperFOVlast  = penWeapon  -> m_fSniperFOV  = penWeapon  -> m_fSniperMaxFOV ;
#line 5815 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soSniperZoom  , SOUND_SILENCE  , SOF_3D );
#line 5816 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soWeaponAmbient  , SOUND_SILENCE  , SOF_3D );
#line 5819 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penWeapon  -> m_aMiniGunLast  = penWeapon  -> m_aMiniGun ;
#line 5822 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_bSinglePlayer  || IsPredictor  ()){
#line 5824 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
NOTHING ;
#line 5826 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(GetSP  () -> sp_bCooperative ){
#line 5828 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PrintPlayerDeathMessage  (this  , eDeath );
#line 5830 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CheckDeathForRespawnInPlace  (eDeath );
#line 5832 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psLevelStats  . ps_iDeaths  += 1;
#line 5833 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psGameStats  . ps_iDeaths  += 1;
#line 5835 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 5837 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PrintPlayerDeathMessage  (this  , eDeath );
#line 5839 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CEntity  * penKiller  = eDeath  . eLastDamage  . penInflictor ;
#line 5841 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayer  * pplKillerPlayer  = NULL ;
#line 5844 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(penKiller  != NULL ){
#line 5846 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(IsOfClass  (penKiller  , "Player")){
#line 5848 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(penKiller  != this ){
#line 5849 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pplKillerPlayer  = (CPlayer  *) penKiller ;
#line 5850 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
EReceiveScore  eScore ;
#line 5851 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eScore  . iPoints  = m_iMana ;
#line 5852 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eDeath  . eLastDamage  . penInflictor  -> SendEvent  (eScore );
#line 5853 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eDeath  . eLastDamage  . penInflictor  -> SendEvent  (EKilledEnemy  ());
#line 5855 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 5856 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psLevelStats  . ps_iScore  -= m_iMana ;
#line 5857 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psGameStats  . ps_iScore  -= m_iMana ;
#line 5858 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psLevelStats  . ps_iKills  -= 1;
#line 5859 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psGameStats  . ps_iKills  -= 1;
#line 5860 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5862 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 5863 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psLevelStats  . ps_iScore  -= m_iMana ;
#line 5864 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psGameStats  . ps_iScore  -= m_iMana ;
#line 5865 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psLevelStats  . ps_iKills  -= 1;
#line 5866 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psGameStats  . ps_iKills  -= 1;
#line 5867 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5869 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 5870 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psLevelStats  . ps_iScore  -= m_iMana ;
#line 5871 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psGameStats  . ps_iScore  -= m_iMana ;
#line 5872 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psLevelStats  . ps_iKills  -= 1;
#line 5873 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psGameStats  . ps_iKills  -= 1;
#line 5874 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5877 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! GetSP  () -> sp_bUseFrags ){
#line 5879 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pplKillerPlayer  != NULL ){
#line 5881 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPrintF  (TRANS  ("  %s: +%d points\n") , pplKillerPlayer  -> GetPlayerName  () , m_iMana );
#line 5883 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 5885 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPrintF  (TRANS  ("  %s: -%d points\n") , GetPlayerName  () , m_iMana );
#line 5886 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5887 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5890 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psLevelStats  . ps_iDeaths  += 1;
#line 5891 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psGameStats  . ps_iDeaths  += 1;
#line 5892 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5895 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iLastViewState  = m_iViewState ;
#line 5898 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetFlags  (GetFlags  () & ~ ENF_ALIVE );
#line 5900 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetDesiredTranslation  (FLOAT3D (0.0f , 0.0f , 0.0f));
#line 5901 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetDesiredRotation  (ANGLE3D (0.0f , 0.0f , 0.0f));
#line 5904 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerAnimator  &) * m_penAnimator ) . RemoveWeapon  ();
#line 5906 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetPlayerWeapons  () -> SendEvent  (EStop  ());
#line 5909 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! GetSP  () -> sp_bCooperative ){
#line 5911 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetPlayerWeapons  () -> DropWeapon  ();
#line 5912 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5916 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iAnim1 ;
#line 5917 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iAnim2 ;
#line 5918 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_pstState  == PST_SWIM  || m_pstState  == PST_DIVE ){
#line 5919 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iAnim1  = PLAYER_ANIM_DEATH_UNDERWATER ;
#line 5920 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iAnim2  = BODY_ANIM_DEATH_UNDERWATER ;
#line 5921 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(eDeath  . eLastDamage  . dmtType  == DMT_SPIKESTAB ){
#line 5922 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iAnim1  = PLAYER_ANIM_DEATH_SPIKES ;
#line 5923 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iAnim2  = BODY_ANIM_DEATH_SPIKES ;
#line 5924 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(eDeath  . eLastDamage  . dmtType  == DMT_ABYSS ){
#line 5925 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iAnim1  = PLAYER_ANIM_ABYSSFALL ;
#line 5926 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iAnim2  = BODY_ANIM_ABYSSFALL ;
#line 5927 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 5928 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT3D vFront ;
#line 5929 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetHeadingDirection  (0 , vFront );
#line 5930 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FLOAT fDamageDir  = m_vDamage  % vFront ;
#line 5931 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(fDamageDir  < 0){
#line 5932 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(Abs  (fDamageDir ) < 10.0f){
#line 5933 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iAnim1  = PLAYER_ANIM_DEATH_EASYFALLBACK ;
#line 5934 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iAnim2  = BODY_ANIM_DEATH_EASYFALLBACK ;
#line 5935 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 5936 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iAnim1  = PLAYER_ANIM_DEATH_BACK ;
#line 5937 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iAnim2  = BODY_ANIM_DEATH_BACK ;
#line 5938 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5939 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 5940 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(Abs  (fDamageDir ) < 10.0f){
#line 5941 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iAnim1  = PLAYER_ANIM_DEATH_EASYFALLFORWARD ;
#line 5942 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iAnim2  = BODY_ANIM_DEATH_EASYFALLFORWARD ;
#line 5943 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 5944 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iAnim1  = PLAYER_ANIM_DEATH_FORWARD ;
#line 5945 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
iAnim2  = BODY_ANIM_DEATH_FORWARD ;
#line 5946 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5947 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5948 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5949 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_plViewpoint  . pl_OrientationAngle  = ANGLE3D (0 , 0 , 0);
#line 5950 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
StartModelAnim  (iAnim1  , 0);
#line 5951 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CModelObject & moBody  = GetModelObject  () -> GetAttachmentModel  (PLAYER_ATTACHMENT_TORSO ) -> amo_moModelObject ;
#line 5952 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
moBody  . PlayAnim  (iAnim2  , 0);
#line 5955 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetPhysicsFlags  (EPF_MODEL_CORPSE );
#line 5956 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetCollisionFlags  (ECF_CORPSE );
#line 5959 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_fDensity  = 400.0f;
#line 5962 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_pstState  == PST_DIVE ){
#line 5963 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetDefaultMouthPitch  ();
#line 5964 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soMouth  , GenderSound  (SOUND_DEATHWATER ) , SOF_3D );
#line 5965 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(_pNetwork  -> IsPlayerLocal  (this )){IFeel_PlayEffect  ("DeathWater");}
#line 5966 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 5967 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetDefaultMouthPitch  ();
#line 5968 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soMouth  , GenderSound  (SOUND_DEATH ) , SOF_3D );
#line 5969 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(_pNetwork  -> IsPlayerLocal  (this )){IFeel_PlayEffect  ("Death");}
#line 5970 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5973 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ASSERT  (m_penView  == NULL );
#line 5974 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_penView  == NULL ){
#line 5975 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penView  = CreateEntity  (GetPlacement  () , CLASS_PLAYER_VIEW );
#line 5976 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
EViewInit  eInit ;
#line 5977 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eInit  . penOwner  = this ;
#line 5978 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eInit  . penCamera  = NULL ;
#line 5979 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eInit  . vtView  = VT_PLAYERDEATH ;
#line 5980 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eInit  . bDeathFixed  = eDeath  . eLastDamage  . dmtType  == DMT_ABYSS ;
#line 5981 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penView  -> Initialize  (eInit );
#line 5982 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5984 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ShouldBlowUp  ()){
#line 5985 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BlowUp  ();
#line 5986 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 5988 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
LeaveStain  (TRUE );
#line 5989 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 5991 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iMayRespawn  = 0;
#line 5993 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(1.2f);
Jump(STATE_CURRENT, 0x0191000b, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x0191000b_Death_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191000b
switch(__eeInput.ee_slEvent){case(EVENTCODE_EBegin):{const EBegin&e= (EBegin&)__eeInput;

#line 5996 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iViewState  = PVT_PLAYERAUTOVIEW ;
#line 5997 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE;
#line 5998 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}ASSERT(FALSE);break;case(EVENTCODE_ETimer):{const ETimer&e= (ETimer&)__eeInput;

#line 6002 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iMayRespawn  = 1;
#line 6003 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE;
#line 6004 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}ASSERT(FALSE);break;case(EVENTCODE_EDamage):{const EDamage&eDamage= (EDamage&)__eeInput;

#line 6007 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(eDamage  . dmtType  == DMT_ABYSS ){
#line 6008 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_penView  != NULL ){
#line 6009 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerView  *) & * m_penView ) -> m_bFixed  = TRUE ;
#line 6010 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6011 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6013 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(ShouldBlowUp  ()){
#line 6015 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BlowUp  ();
#line 6016 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6017 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE;
#line 6018 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}ASSERT(FALSE);break;case(EVENTCODE_EDeath):{const EDeath&e= (EDeath&)__eeInput;
return TRUE;}ASSERT(FALSE);break;case(EVENTCODE_EEnd):{const EEnd&e= (EEnd&)__eeInput;

#line 6024 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! IsPredictor  ()){
#line 6026 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
UnsetTimer();Jump(STATE_CURRENT,0x0191000c, FALSE, EInternal());return TRUE;
#line 6027 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6028 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}ASSERT(FALSE);break;case(EVENTCODE_EAutoAction):{const EAutoAction&eAutoAction= (EAutoAction&)__eeInput;

#line 6032 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_bCooperative  && ! GetSP  () -> sp_bSinglePlayer ){
#line 6034 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(eAutoAction  . penFirstMarker  != NULL  && 
#line 6035 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerActionMarker  *) & * eAutoAction  . penFirstMarker ) -> m_paaAction  == PAA_TELEPORT ){
#line 6037 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
TeleportToAutoMarker  ((CPlayerActionMarker  *) & * eAutoAction  . penFirstMarker );
#line 6038 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6039 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6041 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE;
#line 6042 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}ASSERT(FALSE);break;case(EVENTCODE_EDisconnected):{const EDisconnected&e= (EDisconnected&)__eeInput;
return FALSE;}ASSERT(FALSE);break;case(EVENTCODE_EReceiveScore):{const EReceiveScore&e= (EReceiveScore&)__eeInput;
return FALSE;}ASSERT(FALSE);break;case(EVENTCODE_EKilledEnemy):{const EKilledEnemy&e= (EKilledEnemy&)__eeInput;
return FALSE;}ASSERT(FALSE);break;case(EVENTCODE_EPreLevelChange):{const EPreLevelChange&e= (EPreLevelChange&)__eeInput;
return FALSE;}ASSERT(FALSE);break;case(EVENTCODE_EPostLevelChange):{const EPostLevelChange&e= (EPostLevelChange&)__eeInput;
return FALSE;}ASSERT(FALSE);break;default:{return TRUE;}ASSERT(FALSE);break;
#line 6049 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}return TRUE;}BOOL CPlayer::H0x0191000c_Death_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191000c

#line 6051 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Return(STATE_CURRENT,ERebirth  ());
#line 6051 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CPlayer::
#line 6054 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
TheEnd(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CPlayer_TheEnd
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CPlayer::TheEnd expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 6056 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! _pNetwork  -> IsPlayingDemo  ()){
#line 6058 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_bSinglePlayer ){
#line 6059 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
_pShell  -> Execute  ("gam_iRecordHighScore=0;");
#line 6060 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6061 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6063 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_gdGameDifficulty  == CSessionProperties  :: GD_EXTREME ){
#line 6065 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
_pShell  -> Execute  ("sam_bMentalActivated=1;");
#line 6066 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6069 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . SendEvent  (EReleaseWeapon  ());
#line 6072 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetFlags  (GetFlags  () & ~ ENF_ALIVE );
#line 6074 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetDesiredTranslation  (FLOAT3D (0.0f , 0.0f , 0.0f));
#line 6075 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetDesiredRotation  (ANGLE3D (0.0f , 0.0f , 0.0f));
#line 6078 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
StartModelAnim  (PLAYER_ANIM_STAND  , 0);
#line 6079 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerAnimator  &) * m_penAnimator ) . BodyAnimationTemplate  (
#line 6080 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BODY_ANIM_NORMALWALK  , BODY_ANIM_COLT_STAND  , BODY_ANIM_SHOTGUN_STAND  , BODY_ANIM_MINIGUN_STAND  , 
#line 6081 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
AOF_LOOPING  | AOF_NORESTART );
#line 6083 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_plViewpoint  . pl_OrientationAngle  = ANGLE3D (0 , 0 , 0);
#line 6086 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_bEndOfGame  = TRUE ;
#line 6087 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetGameEnd  ();
#line 6089 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAt(THINKTIME_NEVER);
Jump(STATE_CURRENT, 0x0191000e, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x0191000e_TheEnd_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191000e
switch(__eeInput.ee_slEvent){case(EVENTCODE_EBegin):{const EBegin&e= (EBegin&)__eeInput;
return TRUE;}ASSERT(FALSE);break;case(EVENTCODE_EReceiveScore):{const EReceiveScore&e= (EReceiveScore&)__eeInput;
return FALSE;}ASSERT(FALSE);break;case(EVENTCODE_EKilledEnemy):{const EKilledEnemy&e= (EKilledEnemy&)__eeInput;
return FALSE;}ASSERT(FALSE);break;case(EVENTCODE_ECenterMessage):{const ECenterMessage&e= (ECenterMessage&)__eeInput;
return FALSE;}ASSERT(FALSE);break;default:{return TRUE;}ASSERT(FALSE);break;
#line 6095 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}return TRUE;}BOOL CPlayer::H0x0191000f_TheEnd_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191000f
 ASSERT(FALSE); return TRUE;};BOOL CPlayer::
#line 6101 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FirstInit(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CPlayer_FirstInit
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CPlayer::FirstInit expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 6103 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bUseButtonHeld  = FALSE ;
#line 6106 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iViewState  = m_iLastViewState ;
#line 6109 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_penView  != NULL ){
#line 6110 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerView  &) * m_penView ) . SendEvent  (EEnd  ());
#line 6111 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penView  = NULL ;
#line 6112 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6114 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FindMusicHolder  ();
#line 6117 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
UpdateLevelStats  ();
#line 6120 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
InitializePlayer  ();
#line 6123 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ReceiveComputerMessage  (CTFILENAME  ("Data\\Messages\\Statistics\\Statistics.txt") , CMF_READ );
#line 6125 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSettings  () -> ps_ulFlags  & PSF_PREFER3RDPERSON ){
#line 6126 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ChangePlayerView  ();
#line 6127 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6129 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Return(STATE_CURRENT,EVoid());
#line 6129 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CPlayer::
#line 6132 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Rebirth(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CPlayer_Rebirth
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CPlayer::Rebirth expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 6134 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
bUseButtonHeld  = FALSE ;
#line 6137 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iViewState  = m_iLastViewState ;
#line 6139 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! (m_ulFlags  & PLF_RESPAWNINPLACE )){
#line 6140 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetPlayerWeapons  () -> ClearWeapons  ();
#line 6141 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6144 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_penView  != NULL ){
#line 6145 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerView  &) * m_penView ) . SendEvent  (EEnd  ());
#line 6146 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penView  = NULL ;
#line 6147 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6150 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CEntityPointer penFlame  = GetChildOfClass  ("Flame");
#line 6151 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(penFlame  != NULL )
#line 6152 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 6154 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
EStopFlaming  esf ;
#line 6155 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
esf  . m_bNow  = TRUE ;
#line 6156 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penFlame  -> SendEvent  (esf );
#line 6157 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6159 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_penView  != NULL ){
#line 6160 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerView  &) * m_penView ) . SendEvent  (EEnd  ());
#line 6161 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penView  = NULL ;
#line 6162 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6164 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
FindMusicHolder  ();
#line 6167 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
InitializePlayer  ();
#line 6169 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Return(STATE_CURRENT,EReturn  ());
#line 6169 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CPlayer::
#line 6174 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
AutoGoToMarker(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CPlayer_AutoGoToMarker
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CPlayer::AutoGoToMarker expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 6176 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ULONG  ulFlags  = AOF_LOOPING  | AOF_NORESTART ;
#line 6178 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iAnim  = GetModelObject  () -> GetAnim  ();
#line 6179 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(iAnim  != PLAYER_ANIM_STAND )
#line 6180 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 6181 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ulFlags  |= AOF_SMOOTHCHANGE ;
#line 6182 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6184 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerAnimator  & plan  = (CPlayerAnimator  &) * m_penAnimator ;
#line 6185 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plan  . m_bAttacking  = FALSE ;
#line 6186 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plan  . BodyWalkAnimation  ();
#line 6187 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_fAutoSpeed  > plr_fSpeedForward  / 2){
#line 6188 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
StartModelAnim  (PLAYER_ANIM_RUN  , ulFlags );
#line 6189 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 6190 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
StartModelAnim  (PLAYER_ANIM_NORMALWALK  , ulFlags );
#line 6191 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6194 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Jump(STATE_CURRENT,0x01910015, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x01910015_AutoGoToMarker_03(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910015
if(!(
#line 6195 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
(m_penActionMarker  -> GetPlacement  () . pl_PositionVector  - 
#line 6196 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetPlacement  () . pl_PositionVector ) . Length  () > 1.0f)){ Jump(STATE_CURRENT,0x01910016, FALSE, EInternal());return TRUE;}
#line 6198 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(_pTimer  -> TickQuantum );
Jump(STATE_CURRENT, 0x01910013, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x01910013_AutoGoToMarker_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910013
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x01910014, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x01910014_AutoGoToMarker_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910014
;Jump(STATE_CURRENT,0x01910015, FALSE, EInternal());return TRUE;
#line 6199 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}BOOL CPlayer::H0x01910016_AutoGoToMarker_04(const CEntityEvent &__eeInput) {
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910016

#line 6202 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Return(STATE_CURRENT,EReturn  ());
#line 6202 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CPlayer::
#line 6206 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
AutoGoToMarkerAndStop(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CPlayer_AutoGoToMarkerAndStop
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CPlayer::AutoGoToMarkerAndStop expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 6208 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ULONG  ulFlags  = AOF_LOOPING  | AOF_NORESTART ;
#line 6210 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
INDEX iAnim  = GetModelObject  () -> GetAnim  ();
#line 6211 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(iAnim  != PLAYER_ANIM_STAND )
#line 6212 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 6213 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ulFlags  |= AOF_SMOOTHCHANGE ;
#line 6214 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6216 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerAnimator  & plan  = (CPlayerAnimator  &) * m_penAnimator ;
#line 6217 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plan  . BodyWalkAnimation  ();
#line 6218 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_fAutoSpeed  > plr_fSpeedForward  / 2){
#line 6219 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
StartModelAnim  (PLAYER_ANIM_RUN  , ulFlags );
#line 6220 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 6221 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
StartModelAnim  (PLAYER_ANIM_NORMALWALK  , ulFlags );
#line 6222 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6225 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Jump(STATE_CURRENT,0x0191001a, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x0191001a_AutoGoToMarkerAndStop_03(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191001a
if(!(
#line 6226 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
(m_penActionMarker  -> GetPlacement  () . pl_PositionVector  - 
#line 6227 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetPlacement  () . pl_PositionVector ) . Length  () > m_fAutoSpeed  * _pTimer  -> TickQuantum  * 2.00f)){ Jump(STATE_CURRENT,0x0191001b, FALSE, EInternal());return TRUE;}
#line 6229 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(_pTimer  -> TickQuantum );
Jump(STATE_CURRENT, 0x01910018, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x01910018_AutoGoToMarkerAndStop_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910018
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x01910019, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x01910019_AutoGoToMarkerAndStop_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910019
;Jump(STATE_CURRENT,0x0191001a, FALSE, EInternal());return TRUE;
#line 6230 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}BOOL CPlayer::H0x0191001b_AutoGoToMarkerAndStop_04(const CEntityEvent &__eeInput) {
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191001b

#line 6232 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fAutoSpeed  = 0.0f;
#line 6234 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerAnimator  & plan  = (CPlayerAnimator  &) * m_penAnimator ;
#line 6235 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plan  . BodyStillAnimation  ();
#line 6236 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
StartModelAnim  (PLAYER_ANIM_STAND  , AOF_LOOPING  | AOF_NORESTART );
#line 6239 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ForceFullStop  ();
#line 6242 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Return(STATE_CURRENT,EReturn  ());
#line 6242 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CPlayer::
#line 6246 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
AutoUseItem(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CPlayer_AutoUseItem
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CPlayer::AutoUseItem expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 6250 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerAnimator  & plan  = (CPlayerAnimator  &) * m_penAnimator ;
#line 6251 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plan  . BodyPullItemAnimation  ();
#line 6254 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(0.2f);
Jump(STATE_CURRENT, 0x0191001d, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x0191001d_AutoUseItem_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191001d
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x0191001e, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x0191001e_AutoUseItem_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191001e
;
#line 6257 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerActionMarker  * ppam  = GetActionMarker  ();
#line 6258 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(IsOfClass  (ppam  -> m_penItem  , "KeyItem")){
#line 6259 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CModelObject & moItem  = ppam  -> m_penItem  -> GetModelObject  () -> GetAttachmentModel  (0) -> amo_moModelObject ;
#line 6260 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetPlayerAnimator  () -> SetItem  (& moItem );
#line 6261 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6263 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(2.20f - 0.2f);
Jump(STATE_CURRENT, 0x0191001f, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x0191001f_AutoUseItem_03(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191001f
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x01910020, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x01910020_AutoUseItem_04(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910020
;
#line 6266 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerAnimator  & plan  = (CPlayerAnimator  &) * m_penAnimator ;
#line 6267 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plan  . BodyRemoveItem  ();
#line 6269 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetActionMarker  () -> m_penTrigger  != NULL ){
#line 6271 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SendToTarget  (GetActionMarker  () -> m_penTrigger  , EET_TRIGGER  , this );
#line 6272 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6275 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetActionMarker  () -> m_penDoorController  != NULL ){
#line 6276 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
EPass  ePass ;
#line 6277 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ePass  . penOther  = this ;
#line 6278 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetActionMarker  () -> m_penDoorController  -> SendEvent  (ePass );
#line 6279 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6281 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(3.25f - 2.20f);
Jump(STATE_CURRENT, 0x01910021, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x01910021_AutoUseItem_05(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910021
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x01910022, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x01910022_AutoUseItem_06(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910022
;
#line 6283 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerAnimator  & plan  = (CPlayerAnimator  &) * m_penAnimator ;
#line 6284 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plan  . BodyRemoveItem  ();
#line 6287 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Return(STATE_CURRENT,EReturn  ());
#line 6287 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CPlayer::
#line 6291 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
AutoPickItem(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CPlayer_AutoPickItem
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CPlayer::AutoPickItem expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 6295 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerAnimator  & plan  = (CPlayerAnimator  &) * m_penAnimator ;
#line 6296 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plan  . BodyPickItemAnimation  ();
#line 6297 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
StartModelAnim  (PLAYER_ANIM_KEYLIFT  , 0);
#line 6299 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(1.2f);
Jump(STATE_CURRENT, 0x01910024, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x01910024_AutoPickItem_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910024
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x01910025, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x01910025_AutoPickItem_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910025
;
#line 6302 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetActionMarker  () -> m_penTrigger  != NULL ){
#line 6304 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SendToTarget  (GetActionMarker  () -> m_penTrigger  , EET_TRIGGER  , this );
#line 6305 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6308 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerActionMarker  * ppam  = GetActionMarker  ();
#line 6309 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(IsOfClass  (ppam  -> m_penItem  , "KeyItem")){
#line 6310 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CModelObject & moItem  = ppam  -> m_penItem  -> GetModelObject  () -> GetAttachmentModel  (0) -> amo_moModelObject ;
#line 6311 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetPlayerAnimator  () -> SetItem  (& moItem );
#line 6312 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
EPass  ePass ;
#line 6313 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ePass  . penOther  = this ;
#line 6314 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ppam  -> m_penItem  -> SendEvent  (ePass );
#line 6315 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6317 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(3.6f - 1.2f + GetActionMarker  () -> m_tmWait );
Jump(STATE_CURRENT, 0x01910026, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x01910026_AutoPickItem_03(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910026
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x01910027, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x01910027_AutoPickItem_04(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910027
;
#line 6319 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerAnimator  & plan  = (CPlayerAnimator  &) * m_penAnimator ;
#line 6320 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plan  . BodyRemoveItem  ();
#line 6323 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Return(STATE_CURRENT,EReturn  ());
#line 6323 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CPlayer::
#line 6326 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
AutoFallDown(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CPlayer_AutoFallDown
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CPlayer::AutoFallDown expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 6328 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
StartModelAnim  (PLAYER_ANIM_BRIDGEFALLPOSE  , 0);
#line 6329 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CModelObject & moBody  = GetModelObject  () -> GetAttachmentModel  (PLAYER_ATTACHMENT_TORSO ) -> amo_moModelObject ;
#line 6330 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
moBody  . PlayAnim  (BODY_ANIM_BRIDGEFALLPOSE  , 0);
#line 6332 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(GetActionMarker  () -> m_tmWait );
Jump(STATE_CURRENT, 0x01910029, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x01910029_AutoFallDown_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910029
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x0191002a, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x0191002a_AutoFallDown_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191002a
;
#line 6335 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Return(STATE_CURRENT,EReturn  ());
#line 6335 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CPlayer::
#line 6338 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
AutoFallToAbys(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CPlayer_AutoFallToAbys
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CPlayer::AutoFallToAbys expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 6340 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
StartModelAnim  (PLAYER_ANIM_ABYSSFALL  , AOF_LOOPING );
#line 6341 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CModelObject & moBody  = GetModelObject  () -> GetAttachmentModel  (PLAYER_ATTACHMENT_TORSO ) -> amo_moModelObject ;
#line 6342 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
moBody  . PlayAnim  (BODY_ANIM_ABYSSFALL  , AOF_LOOPING );
#line 6344 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(GetActionMarker  () -> m_tmWait );
Jump(STATE_CURRENT, 0x0191002c, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x0191002c_AutoFallToAbys_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191002c
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x0191002d, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x0191002d_AutoFallToAbys_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191002d
;
#line 6347 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Return(STATE_CURRENT,EReturn  ());
#line 6347 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CPlayer::
#line 6351 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
AutoLookAround(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CPlayer_AutoLookAround
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CPlayer::AutoLookAround expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 6353 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
StartModelAnim  (PLAYER_ANIM_BACKPEDAL  , 0);
#line 6354 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_vAutoSpeed  = FLOAT3D (0 , 0 , plr_fSpeedForward  / 4 / 0.75f);
#line 6355 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CModelObject & moBody  = GetModelObject  () -> GetAttachmentModel  (PLAYER_ATTACHMENT_TORSO ) -> amo_moModelObject ;
#line 6356 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
moBody  . PlayAnim  (BODY_ANIM_NORMALWALK  , 0);
#line 6358 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(GetModelObject  () -> GetCurrentAnimLength  () / 2);
Jump(STATE_CURRENT, 0x0191002f, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x0191002f_AutoLookAround_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191002f
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x01910030, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x01910030_AutoLookAround_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910030
;
#line 6360 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_vAutoSpeed  = FLOAT3D (0 , 0 , 0);
#line 6363 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
StartModelAnim  (PLAYER_ANIM_STAND  , 0);
#line 6364 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CModelObject & moBody  = GetModelObject  () -> GetAttachmentModel  (PLAYER_ATTACHMENT_TORSO ) -> amo_moModelObject ;
#line 6365 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
moBody  . PlayAnim  (BODY_ANIM_LOOKAROUND  , 0);
#line 6366 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerAnimator  & plan  = (CPlayerAnimator  &) * m_penAnimator ;
#line 6369 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(moBody  . GetCurrentAnimLength  () + 0.1f);
Jump(STATE_CURRENT, 0x01910031, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x01910031_AutoLookAround_03(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910031
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x01910032, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x01910032_AutoLookAround_04(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910032
;
#line 6372 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Return(STATE_CURRENT,EReturn  ());
#line 6372 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CPlayer::
#line 6375 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
AutoTeleport(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CPlayer_AutoTeleport
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CPlayer::AutoTeleport expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 6378 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
TeleportToAutoMarker  (GetActionMarker  ());
#line 6381 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Return(STATE_CURRENT,EReturn  ());
#line 6381 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CPlayer::
#line 6384 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
AutoAppear(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CPlayer_AutoAppear
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CPlayer::AutoAppear expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 6387 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SwitchToEditorModel  ();
#line 6390 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Teleport  (GetActionMarker  () -> GetPlacement  ());
#line 6392 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetPhysicsFlags  (GetPhysicsFlags  () & ~ (EPF_TRANSLATEDBYGRAVITY  | EPF_ORIENTEDBYGRAVITY ));
#line 6393 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  |= PLF_AUTOMOVEMENTS ;
#line 6394 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetDesiredRotation  (ANGLE3D (60 , 0 , 0));
#line 6395 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
StartModelAnim  (PLAYER_ANIM_SPAWNPOSE  , AOF_LOOPING );
#line 6396 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CModelObject & moBody  = GetModelObject  () -> GetAttachmentModel  (PLAYER_ATTACHMENT_TORSO ) -> amo_moModelObject ;
#line 6397 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
moBody  . PlayAnim  (BODY_ANIM_SPAWNPOSE  , AOF_LOOPING );
#line 6400 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmSpiritStart  = _pTimer  -> CurrentTick  ();
#line 6402 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(5);
Jump(STATE_CURRENT, 0x01910035, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x01910035_AutoAppear_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910035
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x01910036, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x01910036_AutoAppear_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910036
;
#line 6405 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SwitchToModel  ();
#line 6406 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmFadeStart  = _pTimer  -> CurrentTick  ();
#line 6408 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(5);
Jump(STATE_CURRENT, 0x01910037, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x01910037_AutoAppear_03(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910037
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x01910038, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x01910038_AutoAppear_04(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910038
;
#line 6410 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
COLOR colAlpha  = GetModelObject  () -> mo_colBlendColor ;
#line 6411 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetModelObject  () -> mo_colBlendColor  = colAlpha  | 0xFF;
#line 6414 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetPhysicsFlags  (GetPhysicsFlags  () | EPF_TRANSLATEDBYGRAVITY  | EPF_ORIENTEDBYGRAVITY );
#line 6415 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetDesiredRotation  (ANGLE3D (0 , 0 , 0));
#line 6416 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  &= ~ PLF_AUTOMOVEMENTS ;
#line 6419 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
StartModelAnim  (PLAYER_ANIM_SPAWN_FALLDOWN  , 0);
#line 6420 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CModelObject & moBody  = GetModelObject  () -> GetAttachmentModel  (PLAYER_ATTACHMENT_TORSO ) -> amo_moModelObject ;
#line 6421 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
moBody  . PlayAnim  (BODY_ANIM_SPAWN_FALLDOWN  , 0);
#line 6423 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(GetModelObject  () -> GetCurrentAnimLength  ());
Jump(STATE_CURRENT, 0x01910039, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x01910039_AutoAppear_05(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910039
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x0191003a, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x0191003a_AutoAppear_06(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191003a
;
#line 6426 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
StartModelAnim  (PLAYER_ANIM_SPAWN_GETUP  , AOF_SMOOTHCHANGE );
#line 6427 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CModelObject & moBody  = GetModelObject  () -> GetAttachmentModel  (PLAYER_ATTACHMENT_TORSO ) -> amo_moModelObject ;
#line 6428 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
moBody  . PlayAnim  (BODY_ANIM_SPAWN_GETUP  , AOF_SMOOTHCHANGE );
#line 6430 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(GetModelObject  () -> GetCurrentAnimLength  ());
Jump(STATE_CURRENT, 0x0191003b, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x0191003b_AutoAppear_07(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191003b
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x0191003c, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x0191003c_AutoAppear_08(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191003c
;
#line 6433 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Return(STATE_CURRENT,EReturn  ());
#line 6433 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CPlayer::
#line 6436 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
TravellingInBeam(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CPlayer_TravellingInBeam
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CPlayer::TravellingInBeam expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 6439 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Teleport  (GetActionMarker  () -> GetPlacement  ());
#line 6441 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetPhysicsFlags  (GetPhysicsFlags  () & ~ (EPF_TRANSLATEDBYGRAVITY  | EPF_ORIENTEDBYGRAVITY ));
#line 6442 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  |= PLF_AUTOMOVEMENTS ;
#line 6443 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetDesiredRotation  (ANGLE3D (60 , 0 , 0));
#line 6444 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetDesiredTranslation  (ANGLE3D (0 , 20.0f , 0));
#line 6445 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
StartModelAnim  (PLAYER_ANIM_SPAWNPOSE  , AOF_LOOPING );
#line 6446 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CModelObject & moBody  = GetModelObject  () -> GetAttachmentModel  (PLAYER_ATTACHMENT_TORSO ) -> amo_moModelObject ;
#line 6447 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
moBody  . PlayAnim  (BODY_ANIM_SPAWNPOSE  , AOF_LOOPING );
#line 6449 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(8.0f);
Jump(STATE_CURRENT, 0x0191003e, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x0191003e_TravellingInBeam_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191003e
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x0191003f, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x0191003f_TravellingInBeam_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191003f
;
#line 6451 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SwitchToEditorModel  ();
#line 6453 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Return(STATE_CURRENT,EReturn  ());
#line 6453 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CPlayer::
#line 6456 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
LogoFireMinigun(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CPlayer_LogoFireMinigun
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CPlayer::LogoFireMinigun expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 6459 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlacement3D pl  = GetActionMarker  () -> GetPlacement  ();
#line 6460 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pl  . pl_PositionVector  += FLOAT3D (0 , 0.01f , 0) * GetActionMarker  () -> en_mRotation ;
#line 6461 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Teleport  (pl );
#line 6462 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_plViewpoint  . pl_OrientationAngle  (1) = 20.0f;
#line 6463 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_plLastViewpoint  . pl_OrientationAngle  = en_plViewpoint  . pl_OrientationAngle ;
#line 6466 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
StartModelAnim  (PLAYER_ANIM_INTRO  , AOF_LOOPING );
#line 6468 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmMinigunAutoFireStart  = _pTimer  -> CurrentTick  ();
#line 6471 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . SendEvent  (EFireWeapon  ());
#line 6472 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(2.5f);
Jump(STATE_CURRENT, 0x01910041, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x01910041_LogoFireMinigun_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910041
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x01910042, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x01910042_LogoFireMinigun_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910042
;
#line 6473 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . SendEvent  (EReleaseWeapon  ());
#line 6476 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CModelObject & moBody  = GetModelObject  () -> GetAttachmentModel  (PLAYER_ATTACHMENT_TORSO ) -> amo_moModelObject ;
#line 6477 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
moBody  . PlayAnim  (BODY_ANIM_MINIGUN_STAND  , 0);
#line 6479 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(0.5f);
Jump(STATE_CURRENT, 0x01910043, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x01910043_LogoFireMinigun_03(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910043
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x01910044, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x01910044_LogoFireMinigun_04(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910044
;
#line 6482 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CWorldSettingsController  * pwsc  = NULL ;
#line 6484 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CBackgroundViewer  * penBcgViewer  = (CBackgroundViewer  *) GetWorld  () -> GetBackgroundViewer  ();
#line 6485 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(penBcgViewer  != NULL )
#line 6486 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 6487 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pwsc  = (CWorldSettingsController  *) & * penBcgViewer  -> m_penWorldSettingsController ;
#line 6488 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pwsc  -> m_tmShakeStarted  = _pTimer  -> CurrentTick  ();
#line 6489 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pwsc  -> m_vShakePos  = GetPlacement  () . pl_PositionVector ;
#line 6490 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pwsc  -> m_fShakeFalloff  = 250.0f;
#line 6491 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pwsc  -> m_fShakeFade  = 3.0f;
#line 6493 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pwsc  -> m_fShakeIntensityZ  = 0.1f * 2.0f;
#line 6494 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pwsc  -> m_tmShakeFrequencyZ  = 5.0f;
#line 6495 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pwsc  -> m_fShakeIntensityY  = 0.0f;
#line 6496 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pwsc  -> m_fShakeIntensityB  = 0.0f;
#line 6498 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
pwsc  -> m_bShakeFadeIn  = FALSE ;
#line 6506 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6509 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmMinigunAutoFireStart  = - 1;
#line 6510 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(5.0f);
Jump(STATE_CURRENT, 0x01910045, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x01910045_LogoFireMinigun_05(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910045
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x01910046, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x01910046_LogoFireMinigun_06(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910046
;
#line 6511 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
IFeel_StopEffect  (NULL );
#line 6512 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(5.0f);
Jump(STATE_CURRENT, 0x01910047, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x01910047_LogoFireMinigun_07(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910047
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x01910048, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x01910048_LogoFireMinigun_08(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910048
;
#line 6514 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Return(STATE_CURRENT,EReturn  ());
#line 6514 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CPlayer::
#line 6517 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
AutoStoreWeapon(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CPlayer_AutoStoreWeapon
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CPlayer::AutoStoreWeapon expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 6520 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerAnimator  & plan  = (CPlayerAnimator  &) * m_penAnimator ;
#line 6521 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plan  . BodyAnimationTemplate  (BODY_ANIM_WAIT  , 
#line 6522 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BODY_ANIM_COLT_REDRAWSLOW  , BODY_ANIM_SHOTGUN_REDRAWSLOW  , BODY_ANIM_MINIGUN_REDRAWSLOW  , 
#line 6523 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
0);
#line 6524 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(plan  . m_fBodyAnimTime );
Jump(STATE_CURRENT, 0x0191004a, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x0191004a_AutoStoreWeapon_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191004a
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x0191004b, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x0191004b_AutoStoreWeapon_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191004b
;
#line 6526 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iAutoOrgWeapon  = ((CPlayerWeapons  &) * m_penWeapons ) . m_iCurrentWeapon ;
#line 6527 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . m_iCurrentWeapon  = WEAPON_NONE ;
#line 6528 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . m_iWantedWeapon  = WEAPON_NONE ;
#line 6529 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_soWeaponAmbient  . Stop  ();
#line 6532 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetPlayerAnimator  () -> SyncWeapon  ();
#line 6534 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerAnimator  & plan  = (CPlayerAnimator  &) * m_penAnimator ;
#line 6535 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plan  . m_iWeaponLast  = m_iAutoOrgWeapon ;
#line 6536 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plan  . RemoveWeapon  ();
#line 6537 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetPlayerAnimator  () -> SyncWeapon  ();
#line 6539 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . m_iCurrentWeapon  = (WeaponType ) m_iAutoOrgWeapon ;
#line 6540 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plan  . BodyAnimationTemplate  (BODY_ANIM_WAIT  , BODY_ANIM_COLT_DEACTIVATETOWALK  , 
#line 6541 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
BODY_ANIM_SHOTGUN_DEACTIVATETOWALK  , BODY_ANIM_MINIGUN_DEACTIVATETOWALK  , AOF_SMOOTHCHANGE );
#line 6542 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . m_iCurrentWeapon  = WEAPON_NONE ;
#line 6544 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(plan  . m_fBodyAnimTime );
Jump(STATE_CURRENT, 0x0191004c, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x0191004c_AutoStoreWeapon_03(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191004c
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x0191004d, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x0191004d_AutoStoreWeapon_04(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191004d
;
#line 6547 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Return(STATE_CURRENT,EReturn  ());
#line 6547 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CPlayer::
#line 6551 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
DoAutoActions(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CPlayer_DoAutoActions
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CPlayer::DoAutoActions expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 6554 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_plViewpoint  . pl_OrientationAngle  = ANGLE3D (0 , 0 , 0);
#line 6556 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerAnimator  & plan  = (CPlayerAnimator  &) * m_penAnimator ;
#line 6557 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plan  . m_bDisableAnimating  = TRUE ;
#line 6560 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Jump(STATE_CURRENT,0x019100a2, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x019100a2_DoAutoActions_84(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x019100a2
if(!(m_penActionMarker  != NULL  && IsOfClass  (m_penActionMarker  , "PlayerActionMarker"))){ Jump(STATE_CURRENT,0x019100a3, FALSE, EInternal());return TRUE;}
#line 6563 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(!(GetActionMarker  () -> m_paaAction  == PAA_WAIT )){ Jump(STATE_CURRENT,0x019100a1, FALSE, EInternal());return TRUE;}
#line 6565 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CModelObject & moBody  = GetModelObject  () -> GetAttachmentModel  (PLAYER_ATTACHMENT_TORSO ) -> amo_moModelObject ;
#line 6566 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
moBody  . PlayAnim  (BODY_ANIM_WAIT  , AOF_NORESTART  | AOF_LOOPING );
#line 6568 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(GetActionMarker  () -> m_tmWait );
Jump(STATE_CURRENT, 0x0191004f, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x0191004f_DoAutoActions_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191004f
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x01910050, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x01910050_DoAutoActions_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910050
;Jump(STATE_CURRENT,0x019100a0, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x019100a1_DoAutoActions_83(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x019100a1
if(!(GetActionMarker  () -> m_paaAction  == PAA_STOPANDWAIT )){ Jump(STATE_CURRENT,0x0191009f, FALSE, EInternal());return TRUE;}
#line 6571 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
StartModelAnim  (PLAYER_ANIM_STAND  , 0);
#line 6572 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CModelObject & moBody  = GetModelObject  () -> GetAttachmentModel  (PLAYER_ATTACHMENT_TORSO ) -> amo_moModelObject ;
#line 6573 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
moBody  . PlayAnim  (BODY_ANIM_WAIT  , AOF_NORESTART  | AOF_LOOPING );
#line 6575 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(GetActionMarker  () -> m_tmWait );
Jump(STATE_CURRENT, 0x01910051, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x01910051_DoAutoActions_03(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910051
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x01910052, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x01910052_DoAutoActions_04(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910052
;Jump(STATE_CURRENT,0x0191009e, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x0191009f_DoAutoActions_81(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191009f
if(!(GetActionMarker  () -> m_paaAction  == PAA_APPEARING )){ Jump(STATE_CURRENT,0x0191009d, FALSE, EInternal());return TRUE;}
#line 6579 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
STATE_CPlayer_AutoAppear, TRUE;
Jump(STATE_CURRENT, 0x01910053, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x01910053_DoAutoActions_05(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910053
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: Call(STATE_CURRENT, STATE_CPlayer_AutoAppear, TRUE, EVoid());return TRUE;case EVENTCODE_EReturn: Jump(STATE_CURRENT,0x01910054, FALSE, __eeInput); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x01910054_DoAutoActions_06(const CEntityEvent &__eeInput){
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910054
const EReturn&__e= (EReturn&)__eeInput;
;Jump(STATE_CURRENT,0x0191009c, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x0191009d_DoAutoActions_79(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191009d
if(!(GetActionMarker  () -> m_paaAction  == PAA_TRAVELING_IN_BEAM )){ Jump(STATE_CURRENT,0x0191009b, FALSE, EInternal());return TRUE;}
#line 6581 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
STATE_CPlayer_TravellingInBeam, TRUE;
Jump(STATE_CURRENT, 0x01910055, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x01910055_DoAutoActions_07(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910055
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: Call(STATE_CURRENT, STATE_CPlayer_TravellingInBeam, TRUE, EVoid());return TRUE;case EVENTCODE_EReturn: Jump(STATE_CURRENT,0x01910056, FALSE, __eeInput); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x01910056_DoAutoActions_08(const CEntityEvent &__eeInput){
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910056
const EReturn&__e= (EReturn&)__eeInput;
;Jump(STATE_CURRENT,0x0191009a, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x0191009b_DoAutoActions_77(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191009b
if(!(GetActionMarker  () -> m_paaAction  == PAA_INTROSE_SELECT_WEAPON )){ Jump(STATE_CURRENT,0x01910099, FALSE, EInternal());return TRUE;}
#line 6584 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ESelectWeapon  eSelect ;
#line 6585 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eSelect  . iWeapon  = 1;
#line 6586 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . SendEvent  (eSelect );Jump(STATE_CURRENT,0x01910098, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x01910099_DoAutoActions_75(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910099
if(!(GetActionMarker  () -> m_paaAction  == PAA_LOGO_FIRE_INTROSE )){ Jump(STATE_CURRENT,0x01910097, FALSE, EInternal());return TRUE;}
#line 6588 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
STATE_CPlayer_LogoFireMinigun, TRUE;
Jump(STATE_CURRENT, 0x01910057, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x01910057_DoAutoActions_09(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910057
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: Call(STATE_CURRENT, STATE_CPlayer_LogoFireMinigun, TRUE, EVoid());return TRUE;case EVENTCODE_EReturn: Jump(STATE_CURRENT,0x01910058, FALSE, __eeInput); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x01910058_DoAutoActions_10(const CEntityEvent &__eeInput){
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910058
const EReturn&__e= (EReturn&)__eeInput;
;Jump(STATE_CURRENT,0x01910096, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x01910097_DoAutoActions_73(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910097
if(!(GetActionMarker  () -> m_paaAction  == PAA_LOGO_FIRE_MINIGUN )){ Jump(STATE_CURRENT,0x01910095, FALSE, EInternal());return TRUE;}
#line 6590 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
STATE_CPlayer_LogoFireMinigun, TRUE;
Jump(STATE_CURRENT, 0x01910059, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x01910059_DoAutoActions_11(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910059
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: Call(STATE_CURRENT, STATE_CPlayer_LogoFireMinigun, TRUE, EVoid());return TRUE;case EVENTCODE_EReturn: Jump(STATE_CURRENT,0x0191005a, FALSE, __eeInput); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x0191005a_DoAutoActions_12(const CEntityEvent &__eeInput){
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191005a
const EReturn&__e= (EReturn&)__eeInput;
;Jump(STATE_CURRENT,0x01910094, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x01910095_DoAutoActions_71(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910095
if(!(GetActionMarker  () -> m_paaAction  == PAA_TELEPORT )){ Jump(STATE_CURRENT,0x01910093, FALSE, EInternal());return TRUE;}
#line 6593 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
STATE_CPlayer_AutoTeleport, TRUE;
Jump(STATE_CURRENT, 0x0191005b, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x0191005b_DoAutoActions_13(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191005b
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: Call(STATE_CURRENT, STATE_CPlayer_AutoTeleport, TRUE, EVoid());return TRUE;case EVENTCODE_EReturn: Jump(STATE_CURRENT,0x0191005c, FALSE, __eeInput); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x0191005c_DoAutoActions_14(const CEntityEvent &__eeInput){
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191005c
const EReturn&__e= (EReturn&)__eeInput;
;Jump(STATE_CURRENT,0x01910092, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x01910093_DoAutoActions_69(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910093
if(!(GetActionMarker  () -> m_paaAction  == PAA_WAITFOREVER )){ Jump(STATE_CURRENT,0x01910091, FALSE, EInternal());return TRUE;}
#line 6598 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAt(THINKTIME_NEVER);
Jump(STATE_CURRENT, 0x0191005d, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x0191005d_DoAutoActions_15(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191005d
switch(__eeInput.ee_slEvent){case(EVENTCODE_EBegin):{const EBegin&e= (EBegin&)__eeInput;
return TRUE;}ASSERT(FALSE);break;default:{return FALSE;}ASSERT(FALSE);break;
#line 6601 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}return TRUE;}BOOL CPlayer::H0x0191005e_DoAutoActions_16(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191005e
Jump(STATE_CURRENT,0x01910090, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x01910091_DoAutoActions_67(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910091
if(!(GetActionMarker  () -> m_paaAction  == PAA_STOREWEAPON )){ Jump(STATE_CURRENT,0x0191008f, FALSE, EInternal());return TRUE;}
#line 6604 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
STATE_CPlayer_AutoStoreWeapon, TRUE;
Jump(STATE_CURRENT, 0x0191005f, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x0191005f_DoAutoActions_17(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191005f
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: Call(STATE_CURRENT, STATE_CPlayer_AutoStoreWeapon, TRUE, EVoid());return TRUE;case EVENTCODE_EReturn: Jump(STATE_CURRENT,0x01910060, FALSE, __eeInput); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x01910060_DoAutoActions_18(const CEntityEvent &__eeInput){
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910060
const EReturn&__e= (EReturn&)__eeInput;
;Jump(STATE_CURRENT,0x0191008e, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x0191008f_DoAutoActions_65(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191008f
if(!(GetActionMarker  () -> m_paaAction  == PAA_DRAWWEAPON )){ Jump(STATE_CURRENT,0x0191008d, FALSE, EInternal());return TRUE;}
#line 6609 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ESelectWeapon  eSelect ;
#line 6610 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eSelect  . iWeapon  = - 4;
#line 6611 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . SendEvent  (eSelect );Jump(STATE_CURRENT,0x0191008c, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x0191008d_DoAutoActions_63(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191008d
if(!(GetActionMarker  () -> m_paaAction  == PAA_LOOKAROUND )){ Jump(STATE_CURRENT,0x0191008b, FALSE, EInternal());return TRUE;}
#line 6615 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
STATE_CPlayer_AutoLookAround, TRUE;
Jump(STATE_CURRENT, 0x01910061, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x01910061_DoAutoActions_19(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910061
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: Call(STATE_CURRENT, STATE_CPlayer_AutoLookAround, TRUE, EVoid());return TRUE;case EVENTCODE_EReturn: Jump(STATE_CURRENT,0x01910062, FALSE, __eeInput); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x01910062_DoAutoActions_20(const CEntityEvent &__eeInput){
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910062
const EReturn&__e= (EReturn&)__eeInput;
;Jump(STATE_CURRENT,0x0191008a, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x0191008b_DoAutoActions_61(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191008b
if(!(GetActionMarker  () -> m_paaAction  == PAA_USEITEM )){ Jump(STATE_CURRENT,0x01910089, FALSE, EInternal());return TRUE;}
#line 6620 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
STATE_CPlayer_AutoUseItem, TRUE;
Jump(STATE_CURRENT, 0x01910063, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x01910063_DoAutoActions_21(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910063
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: Call(STATE_CURRENT, STATE_CPlayer_AutoUseItem, TRUE, EVoid());return TRUE;case EVENTCODE_EReturn: Jump(STATE_CURRENT,0x01910064, FALSE, __eeInput); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x01910064_DoAutoActions_22(const CEntityEvent &__eeInput){
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910064
const EReturn&__e= (EReturn&)__eeInput;
;Jump(STATE_CURRENT,0x01910088, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x01910089_DoAutoActions_59(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910089
if(!(GetActionMarker  () -> m_paaAction  == PAA_PICKITEM )){ Jump(STATE_CURRENT,0x01910087, FALSE, EInternal());return TRUE;}
#line 6625 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
STATE_CPlayer_AutoPickItem, TRUE;
Jump(STATE_CURRENT, 0x01910065, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x01910065_DoAutoActions_23(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910065
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: Call(STATE_CURRENT, STATE_CPlayer_AutoPickItem, TRUE, EVoid());return TRUE;case EVENTCODE_EReturn: Jump(STATE_CURRENT,0x01910066, FALSE, __eeInput); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x01910066_DoAutoActions_24(const CEntityEvent &__eeInput){
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910066
const EReturn&__e= (EReturn&)__eeInput;
;Jump(STATE_CURRENT,0x01910086, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x01910087_DoAutoActions_57(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910087
if(!(GetActionMarker  () -> m_paaAction  == PAA_FALLDOWN )){ Jump(STATE_CURRENT,0x01910085, FALSE, EInternal());return TRUE;}
#line 6630 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
STATE_CPlayer_AutoFallDown, TRUE;
Jump(STATE_CURRENT, 0x01910067, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x01910067_DoAutoActions_25(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910067
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: Call(STATE_CURRENT, STATE_CPlayer_AutoFallDown, TRUE, EVoid());return TRUE;case EVENTCODE_EReturn: Jump(STATE_CURRENT,0x01910068, FALSE, __eeInput); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x01910068_DoAutoActions_26(const CEntityEvent &__eeInput){
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910068
const EReturn&__e= (EReturn&)__eeInput;
;Jump(STATE_CURRENT,0x01910084, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x01910085_DoAutoActions_55(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910085
if(!(GetActionMarker  () -> m_paaAction  == PAA_RELEASEPLAYER )){ Jump(STATE_CURRENT,0x01910083, FALSE, EInternal());return TRUE;}
#line 6634 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_penCamera  != NULL ){
#line 6635 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CCamera  *) & * m_penCamera ) -> m_bStopMoving  = TRUE ;
#line 6636 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6637 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penCamera  = NULL ;
#line 6639 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetPlayerWeapons  () -> m_iCurrentWeapon  == WEAPON_NONE ){
#line 6641 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ESelectWeapon  eSelect ;
#line 6642 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eSelect  . iWeapon  = - 4;
#line 6643 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . SendEvent  (eSelect );
#line 6644 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6646 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  |= PLF_SYNCWEAPON ;
#line 6647 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmSpiritStart  = 0;Jump(STATE_CURRENT,0x01910082, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x01910083_DoAutoActions_53(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910083
if(!(GetActionMarker  () -> m_paaAction  == PAA_STARTCOMPUTER )){ Jump(STATE_CURRENT,0x01910081, FALSE, EInternal());return TRUE;}
#line 6652 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(_pNetwork  -> IsPlayerLocal  (this ) && GetSP  () -> sp_bSinglePlayer ){
#line 6653 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
cmp_ppenPlayer  = this ;
#line 6654 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
cmp_bInitialStart  = TRUE ;
#line 6655 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}Jump(STATE_CURRENT,0x01910080, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x01910081_DoAutoActions_51(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910081
if(!(GetActionMarker  () -> m_paaAction  == PAA_STARTINTROSCROLL )){ Jump(STATE_CURRENT,0x0191007f, FALSE, EInternal());return TRUE;}
#line 6659 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
_pShell  -> Execute  ("sam_iStartCredits=1;");Jump(STATE_CURRENT,0x0191007e, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x0191007f_DoAutoActions_49(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191007f
if(!(GetActionMarker  () -> m_paaAction  == PAA_STARTCREDITS )){ Jump(STATE_CURRENT,0x0191007d, FALSE, EInternal());return TRUE;}
#line 6663 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
_pShell  -> Execute  ("sam_iStartCredits=2;");Jump(STATE_CURRENT,0x0191007c, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x0191007d_DoAutoActions_47(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191007d
if(!(GetActionMarker  () -> m_paaAction  == PAA_STOPSCROLLER )){ Jump(STATE_CURRENT,0x0191007b, FALSE, EInternal());return TRUE;}
#line 6667 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
_pShell  -> Execute  ("sam_iStartCredits=-1;");Jump(STATE_CURRENT,0x0191007a, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x0191007b_DoAutoActions_45(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191007b
if(!(GetActionMarker  () -> m_paaAction  == PAA_RUN )){ Jump(STATE_CURRENT,0x01910079, FALSE, EInternal());return TRUE;}
#line 6672 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fAutoSpeed  = plr_fSpeedForward  * GetActionMarker  () -> m_fSpeed ;
#line 6673 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
STATE_CPlayer_AutoGoToMarker, TRUE;
Jump(STATE_CURRENT, 0x01910069, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x01910069_DoAutoActions_27(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910069
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: Call(STATE_CURRENT, STATE_CPlayer_AutoGoToMarker, TRUE, EVoid());return TRUE;case EVENTCODE_EReturn: Jump(STATE_CURRENT,0x0191006a, FALSE, __eeInput); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x0191006a_DoAutoActions_28(const CEntityEvent &__eeInput){
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191006a
const EReturn&__e= (EReturn&)__eeInput;
;Jump(STATE_CURRENT,0x01910078, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x01910079_DoAutoActions_43(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910079
if(!(GetActionMarker  () -> m_paaAction  == PAA_RUNANDSTOP )){ Jump(STATE_CURRENT,0x01910077, FALSE, EInternal());return TRUE;}
#line 6678 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fAutoSpeed  = plr_fSpeedForward  * GetActionMarker  () -> m_fSpeed ;
#line 6679 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
STATE_CPlayer_AutoGoToMarkerAndStop, TRUE;
Jump(STATE_CURRENT, 0x0191006b, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x0191006b_DoAutoActions_29(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191006b
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: Call(STATE_CURRENT, STATE_CPlayer_AutoGoToMarkerAndStop, TRUE, EVoid());return TRUE;case EVENTCODE_EReturn: Jump(STATE_CURRENT,0x0191006c, FALSE, __eeInput); return TRUE;default: return FALSE; }}BOOL CPlayer::H0x0191006c_DoAutoActions_30(const CEntityEvent &__eeInput){
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191006c
const EReturn&__e= (EReturn&)__eeInput;
;Jump(STATE_CURRENT,0x01910076, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x01910077_DoAutoActions_41(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910077
if(!(GetActionMarker  () -> m_paaAction  == PAA_RECORDSTATS )){ Jump(STATE_CURRENT,0x01910075, FALSE, EInternal());return TRUE;}
#line 6684 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_bSinglePlayer  || GetSP  () -> sp_bPlayEntireGame ){
#line 6686 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmEstTime  = GetActionMarker  () -> m_tmWait ;
#line 6688 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
RecordEndOfLevelData  ();
#line 6689 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 6690 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetGameEnd  ();
#line 6691 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}Jump(STATE_CURRENT,0x01910074, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x01910075_DoAutoActions_39(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910075
if(!(GetActionMarker  () -> m_paaAction  == PAA_SHOWSTATS )){ Jump(STATE_CURRENT,0x01910073, FALSE, EInternal());return TRUE;}
#line 6696 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(!(cmp_ppenPlayer  == NULL  && _pNetwork  -> IsPlayerLocal  (this ) && GetSP  () -> sp_bSinglePlayer )){ Jump(STATE_CURRENT,0x01910071, FALSE, EInternal());return TRUE;}
#line 6697 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_bEndOfLevel  = TRUE ;
#line 6698 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
cmp_ppenPlayer  = this ;
#line 6699 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  |= PLF_DONTRENDER ;
#line 6700 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Jump(STATE_CURRENT,0x0191006f, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x0191006f_DoAutoActions_33(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191006f
if(!(m_bEndOfLevel )){ Jump(STATE_CURRENT,0x01910070, FALSE, EInternal());return TRUE;}
#line 6701 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(_pTimer  -> TickQuantum );
Jump(STATE_CURRENT, 0x0191006d, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x0191006d_DoAutoActions_31(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191006d
switch(__eeInput.ee_slEvent){case(EVENTCODE_ETimer):{const ETimer&e= (ETimer&)__eeInput;
UnsetTimer();Jump(STATE_CURRENT,0x0191006e, FALSE, EInternal());return TRUE;}ASSERT(FALSE);break;case(EVENTCODE_EReceiveScore):{const EReceiveScore&e= (EReceiveScore&)__eeInput;
return FALSE;}ASSERT(FALSE);break;case(EVENTCODE_EKilledEnemy):{const EKilledEnemy&e= (EKilledEnemy&)__eeInput;
return FALSE;}ASSERT(FALSE);break;case(EVENTCODE_ECenterMessage):{const ECenterMessage&e= (ECenterMessage&)__eeInput;
return FALSE;}ASSERT(FALSE);break;case(EVENTCODE_EPostLevelChange):{const EPostLevelChange&e= (EPostLevelChange&)__eeInput;

#line 6707 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  &= ! PLF_DONTRENDER ;
#line 6708 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_bEndOfLevel  = FALSE ;
#line 6709 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return FALSE;
#line 6710 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}ASSERT(FALSE);break;default:{return TRUE;}ASSERT(FALSE);break;
#line 6712 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}return TRUE;}BOOL CPlayer::H0x0191006e_DoAutoActions_32(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191006e
Jump(STATE_CURRENT,0x0191006f, FALSE, EInternal());return TRUE;
#line 6713 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}BOOL CPlayer::H0x01910070_DoAutoActions_34(const CEntityEvent &__eeInput) {
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910070

#line 6714 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  &= ! PLF_DONTRENDER ;Jump(STATE_CURRENT,0x01910071, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x01910071_DoAutoActions_35(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910071
Jump(STATE_CURRENT,0x01910072, FALSE, EInternal());return TRUE;}BOOL CPlayer::H0x01910073_DoAutoActions_37(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910073
if(GetActionMarker  () -> m_paaAction  == PAA_ENDOFGAME ){
#line 6720 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Jump(STATE_CURRENT, STATE_CPlayer_TheEnd, TRUE, EVoid());return TRUE;
#line 6721 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(GetActionMarker  () -> m_paaAction  == PAA_NOGRAVITY ){
#line 6722 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetPhysicsFlags  (GetPhysicsFlags  () & ~ (EPF_TRANSLATEDBYGRAVITY  | EPF_ORIENTEDBYGRAVITY ));
#line 6723 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetActionMarker  () -> GetParent  () != NULL )
#line 6724 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
{
#line 6725 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetParent  (GetActionMarker  () -> GetParent  ());
#line 6726 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6727 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(GetActionMarker  () -> m_paaAction  == PAA_TURNONGRAVITY ){
#line 6728 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetPhysicsFlags  (GetPhysicsFlags  () | EPF_TRANSLATEDBYGRAVITY  | EPF_ORIENTEDBYGRAVITY );
#line 6729 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetParent  (NULL );
#line 6730 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6731 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
else if(TRUE ){
#line 6732 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ASSERT  (FALSE );
#line 6733 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}Jump(STATE_CURRENT,0x01910072, FALSE, EInternal());return TRUE;}
BOOL CPlayer::H0x01910072_DoAutoActions_36(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910072
Jump(STATE_CURRENT,0x01910074, FALSE, EInternal());return TRUE;}
BOOL CPlayer::H0x01910074_DoAutoActions_38(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910074
Jump(STATE_CURRENT,0x01910076, FALSE, EInternal());return TRUE;}
BOOL CPlayer::H0x01910076_DoAutoActions_40(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910076
Jump(STATE_CURRENT,0x01910078, FALSE, EInternal());return TRUE;}
BOOL CPlayer::H0x01910078_DoAutoActions_42(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910078
Jump(STATE_CURRENT,0x0191007a, FALSE, EInternal());return TRUE;}
BOOL CPlayer::H0x0191007a_DoAutoActions_44(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191007a
Jump(STATE_CURRENT,0x0191007c, FALSE, EInternal());return TRUE;}
BOOL CPlayer::H0x0191007c_DoAutoActions_46(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191007c
Jump(STATE_CURRENT,0x0191007e, FALSE, EInternal());return TRUE;}
BOOL CPlayer::H0x0191007e_DoAutoActions_48(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191007e
Jump(STATE_CURRENT,0x01910080, FALSE, EInternal());return TRUE;}
BOOL CPlayer::H0x01910080_DoAutoActions_50(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910080
Jump(STATE_CURRENT,0x01910082, FALSE, EInternal());return TRUE;}
BOOL CPlayer::H0x01910082_DoAutoActions_52(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910082
Jump(STATE_CURRENT,0x01910084, FALSE, EInternal());return TRUE;}
BOOL CPlayer::H0x01910084_DoAutoActions_54(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910084
Jump(STATE_CURRENT,0x01910086, FALSE, EInternal());return TRUE;}
BOOL CPlayer::H0x01910086_DoAutoActions_56(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910086
Jump(STATE_CURRENT,0x01910088, FALSE, EInternal());return TRUE;}
BOOL CPlayer::H0x01910088_DoAutoActions_58(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910088
Jump(STATE_CURRENT,0x0191008a, FALSE, EInternal());return TRUE;}
BOOL CPlayer::H0x0191008a_DoAutoActions_60(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191008a
Jump(STATE_CURRENT,0x0191008c, FALSE, EInternal());return TRUE;}
BOOL CPlayer::H0x0191008c_DoAutoActions_62(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191008c
Jump(STATE_CURRENT,0x0191008e, FALSE, EInternal());return TRUE;}
BOOL CPlayer::H0x0191008e_DoAutoActions_64(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191008e
Jump(STATE_CURRENT,0x01910090, FALSE, EInternal());return TRUE;}
BOOL CPlayer::H0x01910090_DoAutoActions_66(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910090
Jump(STATE_CURRENT,0x01910092, FALSE, EInternal());return TRUE;}
BOOL CPlayer::H0x01910092_DoAutoActions_68(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910092
Jump(STATE_CURRENT,0x01910094, FALSE, EInternal());return TRUE;}
BOOL CPlayer::H0x01910094_DoAutoActions_70(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910094
Jump(STATE_CURRENT,0x01910096, FALSE, EInternal());return TRUE;}
BOOL CPlayer::H0x01910096_DoAutoActions_72(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910096
Jump(STATE_CURRENT,0x01910098, FALSE, EInternal());return TRUE;}
BOOL CPlayer::H0x01910098_DoAutoActions_74(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01910098
Jump(STATE_CURRENT,0x0191009a, FALSE, EInternal());return TRUE;}
BOOL CPlayer::H0x0191009a_DoAutoActions_76(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191009a
Jump(STATE_CURRENT,0x0191009c, FALSE, EInternal());return TRUE;}
BOOL CPlayer::H0x0191009c_DoAutoActions_78(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191009c
Jump(STATE_CURRENT,0x0191009e, FALSE, EInternal());return TRUE;}
BOOL CPlayer::H0x0191009e_DoAutoActions_80(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0191009e
Jump(STATE_CURRENT,0x019100a0, FALSE, EInternal());return TRUE;}
BOOL CPlayer::H0x019100a0_DoAutoActions_82(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x019100a0

#line 6736 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetActionMarker  () -> m_penTrigger  != NULL  && 
#line 6737 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
GetActionMarker  () -> m_paaAction  != PAA_PICKITEM ){
#line 6739 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SendToTarget  (GetActionMarker  () -> m_penTrigger  , EET_TRIGGER  , this );
#line 6740 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6743 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penActionMarker  = GetActionMarker  () -> m_penTarget ;Jump(STATE_CURRENT,0x019100a2, FALSE, EInternal());return TRUE;
#line 6744 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}BOOL CPlayer::H0x019100a3_DoAutoActions_85(const CEntityEvent &__eeInput) {
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x019100a3

#line 6747 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_fAutoSpeed  = 0.0f;
#line 6750 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penActionMarker  = NULL ;
#line 6753 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayerAnimator  & plan  = (CPlayerAnimator  &) * m_penAnimator ;
#line 6754 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
plan  . m_bDisableAnimating  = FALSE ;
#line 6757 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Return(STATE_CURRENT,EVoid  ());
#line 6757 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CPlayer::
#line 6762 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Main(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CPlayer_Main
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CPlayer::Main expects 'EVoid' as input!");  const EVoid &evoid = (const EVoid &)__eeInput;
#line 6765 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
time  (& m_iStartTime );
#line 6767 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ctUnreadMessages  = 0;
#line 6768 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetFlags  (GetFlags  () | ENF_CROSSESLEVELS  | ENF_NOTIFYLEVELCHANGE );
#line 6769 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
InitAsEditorModel  ();
#line 6772 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CTString strDummy ;
#line 6773 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetPlayerAppearance  (GetModelObject  () , NULL  , strDummy  , FALSE );
#line 6775 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ValidateCharacter  ();
#line 6776 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetPlayerAppearance  (& m_moRender  , & en_pcCharacter  , strDummy  , FALSE );
#line 6777 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ParseGender  (strDummy );
#line 6780 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetModelObject  () -> GetData  () == NULL ){
#line 6782 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Return(STATE_CURRENT,EVoid());
#line 6782 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE;
#line 6783 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6787 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ModelChangeNotify  ();
#line 6790 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAfter(0.2f);
Jump(STATE_CURRENT, 0x019100a4, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x019100a4_Main_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x019100a4
switch(__eeInput.ee_slEvent){case(EVENTCODE_EBegin):{const EBegin&e= (EBegin&)__eeInput;
return TRUE;}ASSERT(FALSE);break;case(EVENTCODE_ETimer):{const ETimer&e= (ETimer&)__eeInput;
UnsetTimer();Jump(STATE_CURRENT,0x019100a5, FALSE, EInternal());return TRUE;}ASSERT(FALSE);break;case(EVENTCODE_EDisconnected):{const EDisconnected&e= (EDisconnected&)__eeInput;

#line 6794 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Destroy  ();
#line 6795 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Return(STATE_CURRENT,EVoid());
#line 6795 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE;
#line 6796 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}ASSERT(FALSE);break;default: return FALSE; break;
#line 6797 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}return TRUE;}BOOL CPlayer::H0x019100a5_Main_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x019100a5

#line 6800 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(IsPredictor  ()){
#line 6801 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Destroy  ();
#line 6802 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Return(STATE_CURRENT,EVoid());
#line 6802 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE;
#line 6803 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6806 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SwitchToModel  ();
#line 6807 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  |= PLF_INITIALIZED ;
#line 6810 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_tmMaxHoldBreath  = 60.0f;
#line 6811 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
en_fDensity  = 1000.0f;
#line 6813 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ModelChangeNotify  ();
#line 6816 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penWeapons  = CreateEntity  (GetPlacement  () , CLASS_PLAYER_WEAPONS );
#line 6817 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
EWeaponsInit  eInitWeapons ;
#line 6818 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eInitWeapons  . penOwner  = this ;
#line 6819 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penWeapons  -> Initialize  (eInitWeapons );
#line 6822 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penAnimator  = CreateEntity  (GetPlacement  () , CLASS_PLAYER_ANIMATOR );
#line 6823 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
EAnimatorInit  eInitAnimator ;
#line 6824 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
eInitAnimator  . penPlayer  = this ;
#line 6825 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penAnimator  -> Initialize  (eInitAnimator );
#line 6828 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_soMouth  . Set3DParameters  (50.0f , 10.0f , 1.0f , 1.0f);
#line 6829 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_soFootL  . Set3DParameters  (20.0f , 2.0f , 1.0f , 1.0f);
#line 6830 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_soFootR  . Set3DParameters  (20.0f , 2.0f , 1.0f , 1.0f);
#line 6831 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_soBody  . Set3DParameters  (25.0f , 5.0f , 1.0f , 1.0f);
#line 6832 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_soMessage  . Set3DParameters  (25.0f , 5.0f , 1.0f , 1.0f);
#line 6833 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_soSniperZoom  . Set3DParameters  (25.0f , 5.0f , 1.0f , 1.0f);
#line 6836 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetupLightSource  ();
#line 6839 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
try {
#line 6840 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_aoLightAnimation  . SetData_t  (CTFILENAME  ("Animations\\BasicEffects.ani"));
#line 6841 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}catch  (char  * strError ){
#line 6842 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
WarningMessage  (TRANS  ("Cannot load Animations\\BasicEffects.ani: %s") , strError );
#line 6843 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6844 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlayLightAnim  (LIGHT_ANIM_NONE  , 0);
#line 6846 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetTimerAt(THINKTIME_NEVER);
Jump(STATE_CURRENT, 0x019100a6, FALSE, EBegin());return TRUE;}BOOL CPlayer::H0x019100a6_Main_03(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x019100a6
switch(__eeInput.ee_slEvent){case(EVENTCODE_EBegin):{const EBegin&e= (EBegin&)__eeInput;
Call(STATE_CURRENT, STATE_CPlayer_FirstInit, TRUE, EVoid());return TRUE;}ASSERT(FALSE);break;case(EVENTCODE_ERebirth):{const ERebirth&e= (ERebirth&)__eeInput;
Call(STATE_CURRENT, STATE_CPlayer_Rebirth, TRUE, EVoid());return TRUE;}ASSERT(FALSE);break;case(EVENTCODE_EDeath):{const EDeath&eDeath= (EDeath&)__eeInput;
Call(STATE_CURRENT, STATE_CPlayer_Death, TRUE, eDeath );return TRUE;}ASSERT(FALSE);break;case(EVENTCODE_EDamage):{const EDamage&eDamage= (EDamage&)__eeInput;
Call(STATE_CURRENT, STATE_CPlayer_Wounded, TRUE, eDamage );return TRUE;}ASSERT(FALSE);break;case(EVENTCODE_EPreLevelChange):{const EPreLevelChange&e= (EPreLevelChange&)__eeInput;

#line 6852 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  &= ~ PLF_INITIALIZED ;
#line 6853 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  |= PLF_CHANGINGLEVEL ;
#line 6854 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  &= ~ PLF_LEVELSTARTED ;
#line 6855 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE;
#line 6856 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}ASSERT(FALSE);break;case(EVENTCODE_EPostLevelChange):{const EPostLevelChange&e= (EPostLevelChange&)__eeInput;

#line 6858 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(GetSP  () -> sp_bSinglePlayer  || (GetFlags  () & ENF_ALIVE )){
#line 6859 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Call(STATE_CURRENT, STATE_CPlayer_WorldChange, TRUE, EVoid());return TRUE;
#line 6860 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 6861 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Call(STATE_CURRENT, STATE_CPlayer_WorldChangeDead, TRUE, EVoid());return TRUE;
#line 6862 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6863 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}ASSERT(FALSE);break;case(EVENTCODE_ETakingBreath):{const ETakingBreath&eTakingBreath= (ETakingBreath&)__eeInput;

#line 6865 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetDefaultMouthPitch  ();
#line 6866 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(eTakingBreath  . fBreathDelay  < 0.2f){
#line 6867 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soMouth  , GenderSound  (SOUND_INHALE0 ) , SOF_3D );
#line 6868 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else if(eTakingBreath  . fBreathDelay  < 0.8f){
#line 6869 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soMouth  , GenderSound  (SOUND_INHALE1 ) , SOF_3D );
#line 6870 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}else {
#line 6871 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soMouth  , GenderSound  (SOUND_INHALE2 ) , SOF_3D );
#line 6872 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6873 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE;
#line 6874 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}ASSERT(FALSE);break;case(EVENTCODE_ECameraStart):{const ECameraStart&eStart= (ECameraStart&)__eeInput;

#line 6876 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penCamera  = eStart  . penCamera ;
#line 6878 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_penActionMarker  == NULL ){
#line 6879 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetDesiredTranslation  (FLOAT3D (0.0f , 0.0f , 0.0f));
#line 6880 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetDesiredRotation  (ANGLE3D (0.0f , 0.0f , 0.0f));
#line 6881 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6883 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . SendEvent  (EReleaseWeapon  ());
#line 6884 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE;
#line 6885 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}ASSERT(FALSE);break;case(EVENTCODE_ECameraStop):{const ECameraStop&eCameraStop= (ECameraStop&)__eeInput;

#line 6887 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_penCamera  == eCameraStop  . penCamera ){
#line 6888 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penCamera  = NULL ;
#line 6889 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6890 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE;
#line 6891 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}ASSERT(FALSE);break;case(EVENTCODE_ECenterMessage):{const ECenterMessage&eMsg= (ECenterMessage&)__eeInput;

#line 6893 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_strCenterMessage  = eMsg  . strMessage ;
#line 6894 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_tmCenterMessageEnd  = _pTimer  -> CurrentTick  () + eMsg  . tmLength ;
#line 6895 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(eMsg  . mssSound  == MSS_INFO ){
#line 6896 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_soMessage  . Set3DParameters  (25.0f , 5.0f , 1.0f , 1.0f);
#line 6897 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soMessage  , SOUND_INFO  , SOF_3D  | SOF_VOLUMETRIC  | SOF_LOCAL );
#line 6898 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6899 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE;
#line 6900 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}ASSERT(FALSE);break;case(EVENTCODE_EComputerMessage):{const EComputerMessage&eMsg= (EComputerMessage&)__eeInput;

#line 6902 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ReceiveComputerMessage  (eMsg  . fnmMessage  , CMF_ANALYZE );
#line 6903 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE;
#line 6904 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}ASSERT(FALSE);break;case(EVENTCODE_EVoiceMessage):{const EVoiceMessage&eMsg= (EVoiceMessage&)__eeInput;

#line 6906 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SayVoiceMessage  (eMsg  . fnmMessage );
#line 6907 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE;
#line 6908 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}ASSERT(FALSE);break;case(EVENTCODE_EAutoAction):{const EAutoAction&eAutoAction= (EAutoAction&)__eeInput;

#line 6911 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penActionMarker  = eAutoAction  . penFirstMarker ;
#line 6913 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Call(STATE_CURRENT, STATE_CPlayer_DoAutoActions, TRUE, EVoid());return TRUE;
#line 6914 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}ASSERT(FALSE);break;case(EVENTCODE_EReceiveScore):{const EReceiveScore&eScore= (EReceiveScore&)__eeInput;

#line 6916 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psLevelStats  . ps_iScore  += eScore  . iPoints ;
#line 6917 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psGameStats  . ps_iScore  += eScore  . iPoints ;
#line 6918 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_iMana  += eScore  . iPoints  * GetSP  () -> sp_fManaTransferFactor ;
#line 6919 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CheckHighScore  ();
#line 6920 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE;
#line 6921 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}ASSERT(FALSE);break;case(EVENTCODE_EKilledEnemy):{const EKilledEnemy&e= (EKilledEnemy&)__eeInput;

#line 6923 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psLevelStats  . ps_iKills  += 1;
#line 6924 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psGameStats  . ps_iKills  += 1;
#line 6925 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE;
#line 6926 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}ASSERT(FALSE);break;case(EVENTCODE_ESecretFound):{const ESecretFound&e= (ESecretFound&)__eeInput;

#line 6928 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psLevelStats  . ps_iSecrets  += 1;
#line 6929 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_psGameStats  . ps_iSecrets  += 1;
#line 6930 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE;
#line 6931 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}ASSERT(FALSE);break;case(EVENTCODE_EWeaponChanged):{const EWeaponChanged&e= (EWeaponChanged&)__eeInput;

#line 6934 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
((CPlayerWeapons  &) * m_penWeapons ) . m_bSniping  = FALSE ;
#line 6935 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_ulFlags  &= ~ PLF_ISZOOMING ;
#line 6936 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soSniperZoom  , SOUND_SILENCE  , SOF_3D );
#line 6937 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(_pNetwork  -> IsPlayerLocal  (this )){IFeel_StopEffect  ("SniperZoom");}
#line 6938 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE;
#line 6939 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}ASSERT(FALSE);break;case(EVENTCODE_EEnd):{const EEnd&e= (EEnd&)__eeInput;

#line 6942 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
ASSERT  (FALSE );
#line 6943 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE;
#line 6944 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}ASSERT(FALSE);break;case(EVENTCODE_EDisconnected):{const EDisconnected&e= (EDisconnected&)__eeInput;

#line 6948 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
UnsetTimer();Jump(STATE_CURRENT,0x019100a7, FALSE, EInternal());return TRUE;
#line 6949 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}ASSERT(FALSE);break;case(EVENTCODE_ETouch):{const ETouch&eTouch= (ETouch&)__eeInput;

#line 6952 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(IsOfClass  (eTouch  . penOther  , "Bouncer")){
#line 6953 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
JumpFromBouncer  (this  , eTouch  . penOther );
#line 6955 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SetDefaultMouthPitch  ();
#line 6956 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
PlaySound  (m_soMouth  , GenderSound  (SOUND_JUMP ) , SOF_3D );
#line 6957 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(_pNetwork  -> IsPlayerLocal  (this )){IFeel_PlayEffect  ("Jump");}
#line 6958 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6959 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE;
#line 6960 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}ASSERT(FALSE);break;default: return FALSE; break;
#line 6961 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}return TRUE;}BOOL CPlayer::H0x019100a7_Main_04(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x019100a7

#line 6966 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(! IsPredictor  () && m_ulKeys  != 0){
#line 6968 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayer  * penNextPlayer  = NULL ;
#line 6969 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
for(INDEX iPlayer  = 0;iPlayer  < GetMaxPlayers  ();iPlayer  ++){
#line 6970 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPlayer  * pen  = (CPlayer  *) & * GetPlayerEntity  (iPlayer );
#line 6971 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(pen  != NULL  && pen  != this  && (pen  -> GetFlags  () & ENF_ALIVE ) && ! (pen  -> GetFlags  () & ENF_DELETED )){
#line 6972 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penNextPlayer  = pen ;
#line 6973 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6974 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6977 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(penNextPlayer  != NULL ){
#line 6979 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
CPrintF  (TRANS  ("%s leaving, all keys transfered to %s\n") , 
#line 6980 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
(const char  *) m_strName  , (const char  *) penNextPlayer  -> GetPlayerName  ());
#line 6981 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
penNextPlayer  -> m_ulKeys  |= m_ulKeys ;
#line 6982 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6983 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6986 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
SpawnTeleport  ();
#line 6989 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penWeapons  -> Destroy  ();
#line 6990 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penAnimator  -> Destroy  ();
#line 6991 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_penView  != NULL ){
#line 6992 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_penView  -> Destroy  ();
#line 6993 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6994 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
if(m_pen3rdPersonView  != NULL ){
#line 6995 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
m_pen3rdPersonView  -> Destroy  ();
#line 6996 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
}
#line 6997 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Destroy  ();
#line 6998 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
Return(STATE_CURRENT,EVoid());
#line 6998 "V:/Programs/SamSDK/Sources/EntitiesMP/Player.es"
return TRUE; ASSERT(FALSE); return TRUE;};