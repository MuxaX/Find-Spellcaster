/*
 * This file is generated by Entity Class Compiler, (c) CroTeam 1997-98
 */

#line 2 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"

#include "StdH.h"

#include <EntitiesMP/GlassBrush.h>
#include <EntitiesMP/GlassBrush_tables.h>
CEntityEvent *EGBrushDestroyed::MakeCopy(void) { CEntityEvent *peeCopy = new EGBrushDestroyed(*this); return peeCopy;}
EGBrushDestroyed::EGBrushDestroyed() : CEntityEvent(EVENTCODE_EGBrushDestroyed) {;
};
#line 34 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"

static const float TRANSLATION_EPSILON=0.05f;
static const float ROTATION_EPSILON=0.05f;
extern void GetDefaultForce(INDEX iForce, const FLOAT3D &vPoint, 
    CForceStrength &fsGravity, CForceStrength &fsField);

void CGlassBrush::SetDefaultProperties(void) {
  m_strName = "Glass Brush";
  m_strDescription = "";
  m_fHealth = -1.0f;
  m_bBlowupByBull = FALSE ;
  m_bBlowupByDamager = FALSE ;
  m_eetBlowupEvent = EET_IGNORE ;
  m_penBlowupEvent = NULL;
  m_bZoning = FALSE ;
  m_penSoundDestroy = NULL;
  m_soDestroy.SetOwner(this);
m_soDestroy.Stop_internal();
  m_colDebrises = C_WHITE ;
  m_ctDebrises = 12;
  m_fCandyEffect = 0.0f;
  m_fCubeFactor = 1.0f;
  m_dtDebrisType = DT_GLASS ;
  m_bDynamicShadows = FALSE ;
  m_fTouchDamage = 0.0f;
  m_eetTouchEvent = EET_IGNORE ;
  m_penTouchEvent = NULL;
  m_tdeSendEventOnDamage = TDE_TOUCHONLY ;
  CMovableBrushEntity::SetDefaultProperties();
}
  
#line 94 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
void CGlassBrush::Precache(void) {
#line 95 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
PrecacheClass  (CLASS_DEBRIS );
#line 96 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
PrecacheClass  (CLASS_BASIC_EFFECT );
#line 98 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
PrecacheModel  (MODEL_GLASS );
#line 99 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
PrecacheTexture  (TEXTURE_GLASS );
#line 100 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
PrecacheModel  (MODEL_STONE );
#line 101 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
PrecacheTexture  (TEXTURE_STONE );
#line 102 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
PrecacheModel  (MODEL_WOOD );
#line 103 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
PrecacheTexture  (TEXTURE_WOOD );
#line 104 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
PrecacheModel  (MODEL_METAL );
#line 105 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
PrecacheTexture  (TEXTURE_METAL );
#line 106 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
}
  
#line 109 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
void CGlassBrush::PlayDestroySound(void) {
#line 110 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
if(m_penSoundDestroy  != NULL ){
#line 111 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
CSoundHolder  & sh  = (CSoundHolder  &) * m_penSoundDestroy ;
#line 112 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
m_soDestroy  . Set3DParameters  (FLOAT (sh  . m_rFallOffRange ) , FLOAT (sh  . m_rHotSpotRange ) , sh  . m_fVolume  , 1.0f);
#line 113 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
PlaySound  (m_soDestroy  , sh  . m_fnSound  , sh  . m_iPlayType );
#line 114 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
}
#line 115 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
}
  
#line 118 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
void CGlassBrush::GetDebrisModelTexture(INDEX & iModel,INDEX & iTexture) {
#line 119 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
switch(m_dtDebrisType ){
#line 120 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
case DT_STONE : 
#line 121 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
iModel  = MODEL_STONE ;
#line 122 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
iTexture  = TEXTURE_STONE ;
#line 123 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
break ;
#line 124 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
case DT_WOOD : 
#line 125 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
iModel  = MODEL_WOOD ;
#line 126 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
iTexture  = TEXTURE_WOOD ;
#line 127 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
break ;
#line 128 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
case DT_METAL : 
#line 129 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
iModel  = MODEL_METAL ;
#line 130 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
iTexture  = TEXTURE_METAL ;
#line 131 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
break ;
#line 132 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
case DT_GLASS : 
#line 133 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
default  : 
#line 134 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
iModel  = MODEL_GLASS ;
#line 135 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
iTexture  = TEXTURE_GLASS ;
#line 136 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
break ;
#line 137 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
}
#line 138 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
}
  
#line 141 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
INDEX CGlassBrush::GetDebrisImpactType(void) {
#line 142 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
switch(m_dtDebrisType ){
#line 143 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
case DT_STONE : return EIBT_ROCK ;
#line 144 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
case DT_WOOD : return EIBT_WOOD ;
#line 145 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
case DT_METAL : return EIBT_METAL ;
#line 146 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
case DT_GLASS : return EIBT_GLASS ;
#line 147 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
}
#line 148 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
return EIBT_GLASS ;
#line 149 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
}
  
#line 152 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
BOOL CGlassBrush::CanReactOnEntity(CEntity * pen) {
#line 153 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
if(pen  == NULL ){
#line 154 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
return FALSE ;
#line 155 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
}
#line 156 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
if(! (pen  -> GetFlags  () & ENF_ALIVE )){
#line 157 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
return FALSE ;
#line 158 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
}
#line 159 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
return TRUE ;
#line 160 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
}
  
#line 162 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
void CGlassBrush::ReceiveDamage(CEntity * penInflictor,enum DamageType dmtType,
#line 163 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
FLOAT fDamageAmmount,const FLOAT3D & vHitPoint,const FLOAT3D & vDirection) 
#line 164 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
{
#line 165 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
if(m_fHealth  < 0){return ;}
#line 168 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
if(m_tdeSendEventOnDamage  != TDE_TOUCHONLY  && CanReactOnEntity  (penInflictor )){
#line 169 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
SendToTarget  (m_penTouchEvent  , m_eetTouchEvent  , penInflictor );
#line 170 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
}
#line 172 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
if(m_bBlowupByBull  && dmtType  == DMT_IMPACT  && IsOfClass  (penInflictor  , "Werebull")){
#line 173 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
CMovableBrushEntity  :: ReceiveDamage  (penInflictor  , dmtType  , m_fHealth  * 2 , vHitPoint  , vDirection );
#line 174 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
((CLiveEntity  *) penInflictor ) -> SetHealth  (0.0f);
#line 175 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
return ;
#line 176 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
}
#line 178 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
if(m_bBlowupByDamager  && dmtType  == DMT_DAMAGER ){
#line 179 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
CMovableBrushEntity  :: ReceiveDamage  (penInflictor  , dmtType  , fDamageAmmount  , vHitPoint  , vDirection );
#line 180 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
return ;
#line 181 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
}
#line 183 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
if(dmtType  == DMT_EXPLOSION  || dmtType  == DMT_PROJECTILE  || dmtType  == DMT_CANNONBALL ){
#line 184 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
CMovableBrushEntity  :: ReceiveDamage  (penInflictor  , dmtType  , fDamageAmmount  , vHitPoint  , vDirection );
#line 185 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
}
#line 186 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
}
BOOL CGlassBrush::
#line 189 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
Main(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CGlassBrush_Main
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CGlassBrush::Main expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 190 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
InitAsBrush  ();
#line 191 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
SetPhysicsFlags  (EPF_BRUSH_FIXED );
#line 192 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
SetCollisionFlags  (ECF_BRUSH );
#line 193 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
SetHealth  (m_fHealth );
#line 195 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
if(m_bZoning ){SetFlags  (GetFlags  () | ENF_ZONING );}
#line 196 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
if(m_bDynamicShadows ){SetFlags  (GetFlags  () | ENF_DYNAMICSHADOWS );}
#line 198 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
SetTimerAt(THINKTIME_NEVER);
Jump(STATE_CURRENT, 0x02bc0001, FALSE, EBegin());return TRUE;}BOOL CGlassBrush::H0x02bc0001_Main_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x02bc0001
switch(__eeInput.ee_slEvent){case(EVENTCODE_ETouch):{const ETouch&eTouch= (ETouch&)__eeInput;

#line 202 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
if(m_fTouchDamage  != 0.0f){
#line 203 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
InflictDirectDamage  (eTouch  . penOther  , this  , DMT_SPIKESTAB  , m_fTouchDamage  , 
#line 204 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
eTouch  . penOther  -> GetPlacement  () . pl_PositionVector  , eTouch  . plCollision );
#line 205 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
}
#line 207 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
if(m_tdeSendEventOnDamage  != TDE_DAMAGEONLY  && CanReactOnEntity  (eTouch  . penOther )){
#line 208 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
SendToTarget  (m_penTouchEvent  , m_eetTouchEvent );
#line 209 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
}
#line 210 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
return TRUE;
#line 211 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
}ASSERT(FALSE);break;case(EVENTCODE_EDeath):{const EDeath&eDeath= (EDeath&)__eeInput;

#line 215 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
PlayDestroySound  ();
#line 218 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
if(m_ctDebrises  > 0){
#line 219 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
FLOATaabbox3D box ;
#line 220 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
GetSize  (box );
#line 221 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
FLOAT fEntitySize  = pow  (box  . Size  () (1) * box  . Size  () (2) * box  . Size  () (3) / m_ctDebrises  , 1.0f / 3.0f) * m_fCubeFactor ;
#line 224 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
EntityInfoBodyType  eibtDebris  = (EntityInfoBodyType ) GetDebrisImpactType  ();
#line 225 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
Debris_Begin  (eibtDebris  , DPT_NONE  , BET_NONE  , fEntitySize  , FLOAT3D (1.0f , 2.0f , 3.0f) , 
#line 226 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
FLOAT3D (0 , 0 , 0) , 1.0f + m_fCandyEffect  / 2.0f , m_fCandyEffect  , m_colDebrises );
#line 229 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
INDEX iModel  , iTexture ;
#line 230 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
GetDebrisModelTexture  (iModel  , iTexture );
#line 232 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
for(INDEX iDebris  = 0;iDebris  < m_ctDebrises ;iDebris  ++){
#line 233 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
Debris_Spawn  (this  , this  , iModel  , iTexture  , 0 , 0 , 0 , IRnd  () % 4 , 1.0f , 
#line 234 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
FLOAT3D (FRnd  () * 0.8f + 0.1f , FRnd  () * 0.8f + 0.1f , FRnd  () * 0.8f + 0.1f));
#line 235 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
}
#line 236 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
}
#line 239 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
FOREACHINLIST  (CEntity  , en_lnInParent  , en_lhChildren  , iten ){
#line 240 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
iten  -> SendEvent  (EGBrushDestroyed  ());
#line 241 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
}
#line 244 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
SendToTarget  (m_penBlowupEvent  , m_eetBlowupEvent  , eDeath  . eLastDamage  . penInflictor );
#line 247 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
SetFlags  (GetFlags  () | ENF_HIDDEN );
#line 248 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
SetCollisionFlags  (ECF_IMMATERIAL );
#line 249 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
UnsetTimer();Jump(STATE_CURRENT,0x02bc0002, FALSE, EInternal());return TRUE;
#line 250 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
}ASSERT(FALSE);break;default: return FALSE; break;
#line 251 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
}return TRUE;}BOOL CGlassBrush::H0x02bc0002_Main_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x02bc0002

#line 252 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
Return(STATE_CURRENT,EVoid());
#line 252 "V:/Programs/SamSDK/Sources/EntitiesMP/GlassBrush.es"
return TRUE; ASSERT(FALSE); return TRUE;};